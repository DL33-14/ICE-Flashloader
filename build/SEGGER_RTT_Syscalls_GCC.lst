ARM GAS  /tmp/ccOUnUit.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"SEGGER_RTT_Syscalls_GCC.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c"
  20              		.section	.text._write,"ax",%progbits
  21              		.align	1
  22              		.global	_write
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	_write:
  28              	.LVL0:
  29              	.LFB0:
   1:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** /*********************************************************************
   2:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                    SEGGER Microcontroller GmbH                     *
   3:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                        The Embedded Experts                        *
   4:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** **********************************************************************
   5:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                                                                    *
   6:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *            (c) 1995 - 2021 SEGGER Microcontroller GmbH             *
   7:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                                                                    *
   8:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *       www.segger.com     Support: support@segger.com               *
   9:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                                                                    *
  10:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** **********************************************************************
  11:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                                                                    *
  12:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                                                                    *
  14:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** **********************************************************************
  15:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                                                                    *
  16:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * All rights reserved.                                               *
  17:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                                                                    *
  18:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * SEGGER strongly recommends to not make any changes                 *
  19:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * to or modify the source code of this software in order to stay     *
  20:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * compatible with the RTT protocol and J-Link.                       *
  21:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                                                                    *
  22:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * Redistribution and use in source and binary forms, with or         *
  23:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * without modification, are permitted provided that the following    *
  24:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * condition is met:                                                  *
  25:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                                                                    *
  26:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * o Redistributions of source code must retain the above copyright   *
  27:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *   notice, this condition and the following disclaimer.             *
  28:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                                                                    *
  29:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
ARM GAS  /tmp/ccOUnUit.s 			page 2


  30:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
  31:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  33:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * DAMAGE.                                                            *
  42:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                                                                    *
  43:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** **********************************************************************
  44:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                                                                    *
  45:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *       RTT version: 7.94k                                           *
  46:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *                                                                    *
  47:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** **********************************************************************
  48:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** 
  49:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** ---------------------------END-OF-HEADER------------------------------
  50:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** File    : SEGGER_RTT_Syscalls_GCC.c
  51:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** Purpose : Low-level functions for using printf() via RTT in GCC.
  52:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c ****           To use RTT for printf output, include this file in your 
  53:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c ****           application.
  54:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** Revision: $Rev: 24316 $
  55:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** ----------------------------------------------------------------------
  56:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** */
  57:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** #if (defined __GNUC__) && !(defined __SES_ARM) && !(defined __CROSSWORKS_ARM) && !(defined __ARMCC_
  58:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** 
  59:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** #include <reent.h>  // required for _write_r
  60:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** #include "SEGGER_RTT.h"
  61:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** 
  62:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** 
  63:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** /*********************************************************************
  64:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *
  65:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *       Types
  66:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *
  67:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** **********************************************************************
  68:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** */
  69:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** //
  70:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** // If necessary define the _reent struct
  71:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** // to match the one passed by the used standard library.
  72:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** //
  73:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** struct _reent;
  74:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** 
  75:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** /*********************************************************************
  76:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *
  77:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *       Function prototypes
  78:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *
  79:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** **********************************************************************
  80:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** */
  81:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** _ssize_t _write  (int file, const void *ptr, size_t len);
  82:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** _ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len);
  83:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** 
  84:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** /*********************************************************************
  85:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *
  86:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *       Global functions
ARM GAS  /tmp/ccOUnUit.s 			page 3


  87:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *
  88:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** **********************************************************************
  89:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** */
  90:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** 
  91:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** /*********************************************************************
  92:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *
  93:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *       _write()
  94:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *
  95:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * Function description
  96:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *   Low-level write function.
  97:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *   libc subroutines will use this system routine for output to all files,
  98:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *   including stdout.
  99:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *   Write data via RTT.
 100:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** */
 101:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** _ssize_t _write(int file, const void *ptr, size_t len) {
  30              		.loc 1 101 56 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 101 56 is_stmt 0 view .LVU1
  35 0000 10B5     		push	{r4, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 4, -8
  39              		.cfi_offset 14, -4
  40 0002 1446     		mov	r4, r2
 102:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c ****   (void) file;  /* Not used, avoid warning */
  41              		.loc 1 102 3 is_stmt 1 view .LVU2
 103:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c ****   SEGGER_RTT_Write(0, ptr, len);
  42              		.loc 1 103 3 view .LVU3
  43 0004 0020     		movs	r0, #0
  44              	.LVL1:
  45              		.loc 1 103 3 is_stmt 0 view .LVU4
  46 0006 FFF7FEFF 		bl	SEGGER_RTT_Write
  47              	.LVL2:
 104:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c ****   return len;
  48              		.loc 1 104 3 is_stmt 1 view .LVU5
 105:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** }
  49              		.loc 1 105 1 is_stmt 0 view .LVU6
  50 000a 2046     		mov	r0, r4
  51 000c 10BD     		pop	{r4, pc}
  52              		.loc 1 105 1 view .LVU7
  53              		.cfi_endproc
  54              	.LFE0:
  56              		.section	.text._write_r,"ax",%progbits
  57              		.align	1
  58              		.global	_write_r
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  63              	_write_r:
  64              	.LVL3:
  65              	.LFB1:
 106:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** 
 107:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** /*********************************************************************
 108:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *
 109:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *       _write_r()
ARM GAS  /tmp/ccOUnUit.s 			page 4


 110:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *
 111:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** * Function description
 112:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *   Low-level reentrant write function.
 113:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *   libc subroutines will use this system routine for output to all files,
 114:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *   including stdout.
 115:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** *   Write data via RTT.
 116:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** */
 117:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** _ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
  66              		.loc 1 117 76 is_stmt 1 view -0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              		.loc 1 117 76 is_stmt 0 view .LVU9
  71 0000 10B5     		push	{r4, lr}
  72              	.LCFI1:
  73              		.cfi_def_cfa_offset 8
  74              		.cfi_offset 4, -8
  75              		.cfi_offset 14, -4
  76 0002 1146     		mov	r1, r2
  77              	.LVL4:
  78              		.loc 1 117 76 view .LVU10
  79 0004 1C46     		mov	r4, r3
 118:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c ****   (void) file;  /* Not used, avoid warning */
  80              		.loc 1 118 3 is_stmt 1 view .LVU11
 119:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c ****   (void) r;     /* Not used, avoid warning */
  81              		.loc 1 119 3 view .LVU12
 120:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c ****   SEGGER_RTT_Write(0, ptr, len);
  82              		.loc 1 120 3 view .LVU13
  83 0006 1A46     		mov	r2, r3
  84              	.LVL5:
  85              		.loc 1 120 3 is_stmt 0 view .LVU14
  86 0008 0020     		movs	r0, #0
  87              	.LVL6:
  88              		.loc 1 120 3 view .LVU15
  89 000a FFF7FEFF 		bl	SEGGER_RTT_Write
  90              	.LVL7:
 121:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c ****   return len;
  91              		.loc 1 121 3 is_stmt 1 view .LVU16
 122:segger/rtt/src/SEGGER_RTT_Syscalls_GCC.c **** }
  92              		.loc 1 122 1 is_stmt 0 view .LVU17
  93 000e 2046     		mov	r0, r4
  94 0010 10BD     		pop	{r4, pc}
  95              		.loc 1 122 1 view .LVU18
  96              		.cfi_endproc
  97              	.LFE1:
  99              		.text
 100              	.Letext0:
 101              		.file 2 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stddef.h"
 102              		.file 3 "/usr/include/newlib/sys/_types.h"
 103              		.file 4 "/usr/include/newlib/sys/reent.h"
 104              		.file 5 "/usr/include/newlib/sys/lock.h"
 105              		.file 6 "segger/rtt/inc/SEGGER_RTT.h"
 106              		.file 7 "/usr/include/newlib/reent.h"
ARM GAS  /tmp/ccOUnUit.s 			page 5


DEFINED SYMBOLS
                            *ABS*:00000000 SEGGER_RTT_Syscalls_GCC.c
     /tmp/ccOUnUit.s:21     .text._write:00000000 $t
     /tmp/ccOUnUit.s:27     .text._write:00000000 _write
     /tmp/ccOUnUit.s:57     .text._write_r:00000000 $t
     /tmp/ccOUnUit.s:63     .text._write_r:00000000 _write_r

UNDEFINED SYMBOLS
SEGGER_RTT_Write
