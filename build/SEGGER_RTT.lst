ARM GAS  /tmp/ccjFarMV.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"SEGGER_RTT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "segger/rtt/src/SEGGER_RTT.c"
  20              		.section	.text._GetAvailWriteSpace,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_GetAvailWriteSpace:
  27              	.LVL0:
  28              	.LFB4:
   1:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
   2:segger/rtt/src/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:segger/rtt/src/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:segger/rtt/src/SEGGER_RTT.c **** **********************************************************************
   5:segger/rtt/src/SEGGER_RTT.c **** *                                                                    *
   6:segger/rtt/src/SEGGER_RTT.c **** *            (c) 1995 - 2021 SEGGER Microcontroller GmbH             *
   7:segger/rtt/src/SEGGER_RTT.c **** *                                                                    *
   8:segger/rtt/src/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:segger/rtt/src/SEGGER_RTT.c **** *                                                                    *
  10:segger/rtt/src/SEGGER_RTT.c **** **********************************************************************
  11:segger/rtt/src/SEGGER_RTT.c **** *                                                                    *
  12:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:segger/rtt/src/SEGGER_RTT.c **** *                                                                    *
  14:segger/rtt/src/SEGGER_RTT.c **** **********************************************************************
  15:segger/rtt/src/SEGGER_RTT.c **** *                                                                    *
  16:segger/rtt/src/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:segger/rtt/src/SEGGER_RTT.c **** *                                                                    *
  18:segger/rtt/src/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:segger/rtt/src/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:segger/rtt/src/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:segger/rtt/src/SEGGER_RTT.c **** *                                                                    *
  22:segger/rtt/src/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:segger/rtt/src/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:segger/rtt/src/SEGGER_RTT.c **** * condition is met:                                                  *
  25:segger/rtt/src/SEGGER_RTT.c **** *                                                                    *
  26:segger/rtt/src/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:segger/rtt/src/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:segger/rtt/src/SEGGER_RTT.c **** *                                                                    *
  29:segger/rtt/src/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  30:segger/rtt/src/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
ARM GAS  /tmp/ccjFarMV.s 			page 2


  31:segger/rtt/src/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:segger/rtt/src/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  33:segger/rtt/src/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:segger/rtt/src/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:segger/rtt/src/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:segger/rtt/src/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:segger/rtt/src/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:segger/rtt/src/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:segger/rtt/src/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:segger/rtt/src/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:segger/rtt/src/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:segger/rtt/src/SEGGER_RTT.c **** *                                                                    *
  43:segger/rtt/src/SEGGER_RTT.c **** **********************************************************************
  44:segger/rtt/src/SEGGER_RTT.c **** *                                                                    *
  45:segger/rtt/src/SEGGER_RTT.c **** *       RTT version: 7.94k                                           *
  46:segger/rtt/src/SEGGER_RTT.c **** *                                                                    *
  47:segger/rtt/src/SEGGER_RTT.c **** **********************************************************************
  48:segger/rtt/src/SEGGER_RTT.c **** 
  49:segger/rtt/src/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  50:segger/rtt/src/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  51:segger/rtt/src/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  52:segger/rtt/src/SEGGER_RTT.c ****           allows real-time communication on targets which support
  53:segger/rtt/src/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  54:segger/rtt/src/SEGGER_RTT.c **** Revision: $Rev: 29668 $
  55:segger/rtt/src/SEGGER_RTT.c **** 
  56:segger/rtt/src/SEGGER_RTT.c **** Additional information:
  57:segger/rtt/src/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  58:segger/rtt/src/SEGGER_RTT.c ****           H->T    Host to target communication
  59:segger/rtt/src/SEGGER_RTT.c ****           T->H    Target to host communication
  60:segger/rtt/src/SEGGER_RTT.c **** 
  61:segger/rtt/src/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  62:segger/rtt/src/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  63:segger/rtt/src/SEGGER_RTT.c **** 
  64:segger/rtt/src/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  65:segger/rtt/src/SEGGER_RTT.c **** 
  66:segger/rtt/src/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  67:segger/rtt/src/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  68:segger/rtt/src/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  69:segger/rtt/src/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  70:segger/rtt/src/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):
  71:segger/rtt/src/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  72:segger/rtt/src/SEGGER_RTT.c **** 
  73:segger/rtt/src/SEGGER_RTT.c **** 
  74:segger/rtt/src/SEGGER_RTT.c **** ----------------------------------------------------------------------
  75:segger/rtt/src/SEGGER_RTT.c **** */
  76:segger/rtt/src/SEGGER_RTT.c **** 
  77:segger/rtt/src/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  78:segger/rtt/src/SEGGER_RTT.c **** 
  79:segger/rtt/src/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  80:segger/rtt/src/SEGGER_RTT.c **** 
  81:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
  82:segger/rtt/src/SEGGER_RTT.c **** *
  83:segger/rtt/src/SEGGER_RTT.c **** *       Configuration, default values
  84:segger/rtt/src/SEGGER_RTT.c **** *
  85:segger/rtt/src/SEGGER_RTT.c **** **********************************************************************
  86:segger/rtt/src/SEGGER_RTT.c **** */
  87:segger/rtt/src/SEGGER_RTT.c **** 
ARM GAS  /tmp/ccjFarMV.s 			page 3


  88:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
  89:segger/rtt/src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_CB_ALIGN
  90:segger/rtt/src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_CB_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
  91:segger/rtt/src/SEGGER_RTT.c ****   #endif
  92:segger/rtt/src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGN
  93:segger/rtt/src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE !=
  94:segger/rtt/src/SEGGER_RTT.c ****   #endif
  95:segger/rtt/src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_CB_SECTION
  96:segger/rtt/src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_CB_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  97:segger/rtt/src/SEGGER_RTT.c ****   #endif
  98:segger/rtt/src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_BUFFER_SECTION
  99:segger/rtt/src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_BUFFER_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_S
 100:segger/rtt/src/SEGGER_RTT.c ****   #endif
 101:segger/rtt/src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGNMENT
 102:segger/rtt/src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
 103:segger/rtt/src/SEGGER_RTT.c ****   #endif
 104:segger/rtt/src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_ALIGNMENT
 105:segger/rtt/src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
 106:segger/rtt/src/SEGGER_RTT.c ****   #endif
 107:segger/rtt/src/SEGGER_RTT.c **** #endif
 108:segger/rtt/src/SEGGER_RTT.c **** 
 109:segger/rtt/src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
 110:segger/rtt/src/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
 111:segger/rtt/src/SEGGER_RTT.c **** #endif
 112:segger/rtt/src/SEGGER_RTT.c **** 
 113:segger/rtt/src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
 114:segger/rtt/src/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
 115:segger/rtt/src/SEGGER_RTT.c **** #endif
 116:segger/rtt/src/SEGGER_RTT.c **** 
 117:segger/rtt/src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
 118:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
 119:segger/rtt/src/SEGGER_RTT.c **** #endif
 120:segger/rtt/src/SEGGER_RTT.c **** 
 121:segger/rtt/src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 122:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 123:segger/rtt/src/SEGGER_RTT.c **** #endif
 124:segger/rtt/src/SEGGER_RTT.c **** 
 125:segger/rtt/src/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 126:segger/rtt/src/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 127:segger/rtt/src/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 128:segger/rtt/src/SEGGER_RTT.c ****   #endif
 129:segger/rtt/src/SEGGER_RTT.c **** #endif
 130:segger/rtt/src/SEGGER_RTT.c **** 
 131:segger/rtt/src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 132:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            SEGGER_RTT_CPU_CACHE_LINE_SIZE
 133:segger/rtt/src/SEGGER_RTT.c **** #endif
 134:segger/rtt/src/SEGGER_RTT.c **** 
 135:segger/rtt/src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 136:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     SEGGER_RTT_CPU_CACHE_LINE_SIZE
 137:segger/rtt/src/SEGGER_RTT.c **** #endif
 138:segger/rtt/src/SEGGER_RTT.c **** 
 139:segger/rtt/src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 140:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 141:segger/rtt/src/SEGGER_RTT.c **** #endif
 142:segger/rtt/src/SEGGER_RTT.c **** 
 143:segger/rtt/src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 144:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
ARM GAS  /tmp/ccjFarMV.s 			page 4


 145:segger/rtt/src/SEGGER_RTT.c **** #endif
 146:segger/rtt/src/SEGGER_RTT.c **** 
 147:segger/rtt/src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 148:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 149:segger/rtt/src/SEGGER_RTT.c **** #endif
 150:segger/rtt/src/SEGGER_RTT.c **** 
 151:segger/rtt/src/SEGGER_RTT.c **** #ifndef   STRLEN
 152:segger/rtt/src/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 153:segger/rtt/src/SEGGER_RTT.c **** #endif
 154:segger/rtt/src/SEGGER_RTT.c **** 
 155:segger/rtt/src/SEGGER_RTT.c **** #ifndef   STRCPY
 156:segger/rtt/src/SEGGER_RTT.c ****   #define STRCPY(pDest, pSrc)                             strcpy((pDest), (pSrc))
 157:segger/rtt/src/SEGGER_RTT.c **** #endif
 158:segger/rtt/src/SEGGER_RTT.c **** 
 159:segger/rtt/src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 160:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 161:segger/rtt/src/SEGGER_RTT.c **** #endif
 162:segger/rtt/src/SEGGER_RTT.c **** 
 163:segger/rtt/src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 164:segger/rtt/src/SEGGER_RTT.c ****   #ifdef  MEMCPY
 165:segger/rtt/src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 166:segger/rtt/src/SEGGER_RTT.c ****   #else
 167:segger/rtt/src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 168:segger/rtt/src/SEGGER_RTT.c ****   #endif
 169:segger/rtt/src/SEGGER_RTT.c **** #endif
 170:segger/rtt/src/SEGGER_RTT.c **** 
 171:segger/rtt/src/SEGGER_RTT.c **** #ifndef   MIN
 172:segger/rtt/src/SEGGER_RTT.c ****   #define MIN(a, b)                                       (((a) < (b)) ? (a) : (b))
 173:segger/rtt/src/SEGGER_RTT.c **** #endif
 174:segger/rtt/src/SEGGER_RTT.c **** 
 175:segger/rtt/src/SEGGER_RTT.c **** #ifndef   MAX
 176:segger/rtt/src/SEGGER_RTT.c ****   #define MAX(a, b)                                       (((a) > (b)) ? (a) : (b))
 177:segger/rtt/src/SEGGER_RTT.c **** #endif
 178:segger/rtt/src/SEGGER_RTT.c **** 
 179:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 180:segger/rtt/src/SEGGER_RTT.c **** *
 181:segger/rtt/src/SEGGER_RTT.c **** *       Defines, fixed
 182:segger/rtt/src/SEGGER_RTT.c **** *
 183:segger/rtt/src/SEGGER_RTT.c **** **********************************************************************
 184:segger/rtt/src/SEGGER_RTT.c **** */
 185:segger/rtt/src/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 186:segger/rtt/src/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 187:segger/rtt/src/SEGGER_RTT.c **** #endif
 188:segger/rtt/src/SEGGER_RTT.c **** 
 189:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 190:segger/rtt/src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 191:segger/rtt/src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 192:segger/rtt/src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 193:segger/rtt/src/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 194:segger/rtt/src/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 195:segger/rtt/src/SEGGER_RTT.c ****                                   Var
 196:segger/rtt/src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 197:segger/rtt/src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 198:segger/rtt/src/SEGGER_RTT.c ****   #else
 199:segger/rtt/src/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 200:segger/rtt/src/SEGGER_RTT.c ****   #endif
 201:segger/rtt/src/SEGGER_RTT.c **** #else
ARM GAS  /tmp/ccjFarMV.s 			page 5


 202:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 203:segger/rtt/src/SEGGER_RTT.c **** #endif
 204:segger/rtt/src/SEGGER_RTT.c **** 
 205:segger/rtt/src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 206:segger/rtt/src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 207:segger/rtt/src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 208:segger/rtt/src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 209:segger/rtt/src/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 210:segger/rtt/src/SEGGER_RTT.c ****                                         Var
 211:segger/rtt/src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 212:segger/rtt/src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 213:segger/rtt/src/SEGGER_RTT.c ****   #else
 214:segger/rtt/src/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 215:segger/rtt/src/SEGGER_RTT.c ****   #endif
 216:segger/rtt/src/SEGGER_RTT.c **** #else
 217:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 218:segger/rtt/src/SEGGER_RTT.c **** #endif
 219:segger/rtt/src/SEGGER_RTT.c **** 
 220:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 221:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 222:segger/rtt/src/SEGGER_RTT.c **** #else
 223:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 224:segger/rtt/src/SEGGER_RTT.c **** #endif
 225:segger/rtt/src/SEGGER_RTT.c **** 
 226:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 227:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 228:segger/rtt/src/SEGGER_RTT.c **** #else
 229:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 230:segger/rtt/src/SEGGER_RTT.c **** #endif
 231:segger/rtt/src/SEGGER_RTT.c **** 
 232:segger/rtt/src/SEGGER_RTT.c **** 
 233:segger/rtt/src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 234:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 235:segger/rtt/src/SEGGER_RTT.c **** #else
 236:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 237:segger/rtt/src/SEGGER_RTT.c **** #endif
 238:segger/rtt/src/SEGGER_RTT.c **** 
 239:segger/rtt/src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 240:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 241:segger/rtt/src/SEGGER_RTT.c **** #else
 242:segger/rtt/src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 243:segger/rtt/src/SEGGER_RTT.c **** #endif
 244:segger/rtt/src/SEGGER_RTT.c **** 
 245:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 246:segger/rtt/src/SEGGER_RTT.c **** *
 247:segger/rtt/src/SEGGER_RTT.c **** *       Static const data
 248:segger/rtt/src/SEGGER_RTT.c **** *
 249:segger/rtt/src/SEGGER_RTT.c **** **********************************************************************
 250:segger/rtt/src/SEGGER_RTT.c **** */
 251:segger/rtt/src/SEGGER_RTT.c **** 
 252:segger/rtt/src/SEGGER_RTT.c **** static const unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '
 253:segger/rtt/src/SEGGER_RTT.c **** 
 254:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 255:segger/rtt/src/SEGGER_RTT.c **** *
 256:segger/rtt/src/SEGGER_RTT.c **** *       Static data
 257:segger/rtt/src/SEGGER_RTT.c **** *
 258:segger/rtt/src/SEGGER_RTT.c **** **********************************************************************
ARM GAS  /tmp/ccjFarMV.s 			page 6


 259:segger/rtt/src/SEGGER_RTT.c **** */
 260:segger/rtt/src/SEGGER_RTT.c **** 
 261:segger/rtt/src/SEGGER_RTT.c **** //
 262:segger/rtt/src/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 263:segger/rtt/src/SEGGER_RTT.c **** //
 264:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
 265:segger/rtt/src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 266:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT                                                             __attribu
 267:segger/rtt/src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)]   __attribu
 268:segger/rtt/src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)] __attribu
 269:segger/rtt/src/SEGGER_RTT.c ****   #elif (defined __ICCARM__)
 270:segger/rtt/src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 271:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT;
 272:segger/rtt/src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 273:segger/rtt/src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)];
 274:segger/rtt/src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 275:segger/rtt/src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)];
 276:segger/rtt/src/SEGGER_RTT.c ****   #else
 277:segger/rtt/src/SEGGER_RTT.c ****     #error "Don't know how to place _SEGGER_RTT, _acUpBuffer, _acDownBuffer cache-line aligned"
 278:segger/rtt/src/SEGGER_RTT.c ****   #endif
 279:segger/rtt/src/SEGGER_RTT.c **** #else
 280:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 281:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]))
 282:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]
 283:segger/rtt/src/SEGGER_RTT.c **** #endif
 284:segger/rtt/src/SEGGER_RTT.c **** 
 285:segger/rtt/src/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 286:segger/rtt/src/SEGGER_RTT.c **** 
 287:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 288:segger/rtt/src/SEGGER_RTT.c **** *
 289:segger/rtt/src/SEGGER_RTT.c **** *       Static functions
 290:segger/rtt/src/SEGGER_RTT.c **** *
 291:segger/rtt/src/SEGGER_RTT.c **** **********************************************************************
 292:segger/rtt/src/SEGGER_RTT.c **** */
 293:segger/rtt/src/SEGGER_RTT.c **** 
 294:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 295:segger/rtt/src/SEGGER_RTT.c **** *
 296:segger/rtt/src/SEGGER_RTT.c **** *       _DoInit()
 297:segger/rtt/src/SEGGER_RTT.c **** *
 298:segger/rtt/src/SEGGER_RTT.c **** *  Function description
 299:segger/rtt/src/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 300:segger/rtt/src/SEGGER_RTT.c **** *
 301:segger/rtt/src/SEGGER_RTT.c **** *  Notes
 302:segger/rtt/src/SEGGER_RTT.c **** *    (1) May only be called via INIT() to avoid overriding settings.
 303:segger/rtt/src/SEGGER_RTT.c **** *        The only exception is SEGGER_RTT_Init(), to make an intentional override possible.
 304:segger/rtt/src/SEGGER_RTT.c **** */
 305:segger/rtt/src/SEGGER_RTT.c ****   #define INIT()                                                                             \
 306:segger/rtt/src/SEGGER_RTT.c ****     do {                                                                                     \
 307:segger/rtt/src/SEGGER_RTT.c ****       volatile SEGGER_RTT_CB* pRTTCBInit;                                                    \
 308:segger/rtt/src/SEGGER_RTT.c ****       pRTTCBInit = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF); \
 309:segger/rtt/src/SEGGER_RTT.c ****       if (pRTTCBInit->acID[0] != 'S') {                                                      \
 310:segger/rtt/src/SEGGER_RTT.c ****         _DoInit();                                                                           \
 311:segger/rtt/src/SEGGER_RTT.c ****       }                                                                                      \
 312:segger/rtt/src/SEGGER_RTT.c ****     } while (0)
 313:segger/rtt/src/SEGGER_RTT.c **** 
 314:segger/rtt/src/SEGGER_RTT.c **** static void _DoInit(void) {
 315:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
ARM GAS  /tmp/ccjFarMV.s 			page 7


 316:segger/rtt/src/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 317:segger/rtt/src/SEGGER_RTT.c ****   unsigned i;
 318:segger/rtt/src/SEGGER_RTT.c ****   //
 319:segger/rtt/src/SEGGER_RTT.c ****   // Initialize control block
 320:segger/rtt/src/SEGGER_RTT.c ****   //
 321:segger/rtt/src/SEGGER_RTT.c ****   p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_O
 322:segger/rtt/src/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
 323:segger/rtt/src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 324:segger/rtt/src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 325:segger/rtt/src/SEGGER_RTT.c ****   //
 326:segger/rtt/src/SEGGER_RTT.c ****   // Initialize up buffer 0
 327:segger/rtt/src/SEGGER_RTT.c ****   //
 328:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 329:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 330:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 331:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 332:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 333:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 334:segger/rtt/src/SEGGER_RTT.c ****   //
 335:segger/rtt/src/SEGGER_RTT.c ****   // Initialize down buffer 0
 336:segger/rtt/src/SEGGER_RTT.c ****   //
 337:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 338:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 339:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 340:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 341:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 342:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 343:segger/rtt/src/SEGGER_RTT.c ****   //
 344:segger/rtt/src/SEGGER_RTT.c ****   // Finish initialization of the control block.
 345:segger/rtt/src/SEGGER_RTT.c ****   // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (us
 346:segger/rtt/src/SEGGER_RTT.c ****   // as this would cause J-Link to "find" the control block at a wrong address.
 347:segger/rtt/src/SEGGER_RTT.c ****   //
 348:segger/rtt/src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 349:segger/rtt/src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 350:segger/rtt/src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 351:segger/rtt/src/SEGGER_RTT.c ****   }
 352:segger/rtt/src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 353:segger/rtt/src/SEGGER_RTT.c **** }
 354:segger/rtt/src/SEGGER_RTT.c **** 
 355:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 356:segger/rtt/src/SEGGER_RTT.c **** *
 357:segger/rtt/src/SEGGER_RTT.c **** *       _WriteBlocking()
 358:segger/rtt/src/SEGGER_RTT.c **** *
 359:segger/rtt/src/SEGGER_RTT.c **** *  Function description
 360:segger/rtt/src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 361:segger/rtt/src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 362:segger/rtt/src/SEGGER_RTT.c **** *    read by the host.
 363:segger/rtt/src/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 364:segger/rtt/src/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 365:segger/rtt/src/SEGGER_RTT.c **** *
 366:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
 367:segger/rtt/src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 368:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 369:segger/rtt/src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 370:segger/rtt/src/SEGGER_RTT.c **** *
 371:segger/rtt/src/SEGGER_RTT.c **** *  Return value
 372:segger/rtt/src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
ARM GAS  /tmp/ccjFarMV.s 			page 8


 373:segger/rtt/src/SEGGER_RTT.c **** */
 374:segger/rtt/src/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 375:segger/rtt/src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 376:segger/rtt/src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 377:segger/rtt/src/SEGGER_RTT.c ****   unsigned RdOff;
 378:segger/rtt/src/SEGGER_RTT.c ****   unsigned WrOff;
 379:segger/rtt/src/SEGGER_RTT.c ****   volatile char* pDst;
 380:segger/rtt/src/SEGGER_RTT.c ****   //
 381:segger/rtt/src/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 382:segger/rtt/src/SEGGER_RTT.c ****   //
 383:segger/rtt/src/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 384:segger/rtt/src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 385:segger/rtt/src/SEGGER_RTT.c ****   do {
 386:segger/rtt/src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 387:segger/rtt/src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 388:segger/rtt/src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 389:segger/rtt/src/SEGGER_RTT.c ****     } else {
 390:segger/rtt/src/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 391:segger/rtt/src/SEGGER_RTT.c ****     }
 392:segger/rtt/src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 393:segger/rtt/src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 394:segger/rtt/src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 395:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 396:segger/rtt/src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 397:segger/rtt/src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 398:segger/rtt/src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 399:segger/rtt/src/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 400:segger/rtt/src/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 401:segger/rtt/src/SEGGER_RTT.c ****     };
 402:segger/rtt/src/SEGGER_RTT.c **** #else
 403:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 404:segger/rtt/src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 405:segger/rtt/src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 406:segger/rtt/src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 407:segger/rtt/src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 408:segger/rtt/src/SEGGER_RTT.c **** #endif
 409:segger/rtt/src/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 410:segger/rtt/src/SEGGER_RTT.c ****       WrOff = 0u;
 411:segger/rtt/src/SEGGER_RTT.c ****     }
 412:segger/rtt/src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 413:segger/rtt/src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 414:segger/rtt/src/SEGGER_RTT.c ****   } while (NumBytes);
 415:segger/rtt/src/SEGGER_RTT.c ****   return NumBytesWritten;
 416:segger/rtt/src/SEGGER_RTT.c **** }
 417:segger/rtt/src/SEGGER_RTT.c **** 
 418:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 419:segger/rtt/src/SEGGER_RTT.c **** *
 420:segger/rtt/src/SEGGER_RTT.c **** *       _WriteNoCheck()
 421:segger/rtt/src/SEGGER_RTT.c **** *
 422:segger/rtt/src/SEGGER_RTT.c **** *  Function description
 423:segger/rtt/src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 424:segger/rtt/src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 425:segger/rtt/src/SEGGER_RTT.c **** *    read by the host.
 426:segger/rtt/src/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 427:segger/rtt/src/SEGGER_RTT.c **** *
 428:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
 429:segger/rtt/src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
ARM GAS  /tmp/ccjFarMV.s 			page 9


 430:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 431:segger/rtt/src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 432:segger/rtt/src/SEGGER_RTT.c **** *
 433:segger/rtt/src/SEGGER_RTT.c **** *  Notes
 434:segger/rtt/src/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 435:segger/rtt/src/SEGGER_RTT.c **** */
 436:segger/rtt/src/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 437:segger/rtt/src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 438:segger/rtt/src/SEGGER_RTT.c ****   unsigned WrOff;
 439:segger/rtt/src/SEGGER_RTT.c ****   unsigned Rem;
 440:segger/rtt/src/SEGGER_RTT.c ****   volatile char* pDst;
 441:segger/rtt/src/SEGGER_RTT.c **** 
 442:segger/rtt/src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 443:segger/rtt/src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 444:segger/rtt/src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 445:segger/rtt/src/SEGGER_RTT.c ****     //
 446:segger/rtt/src/SEGGER_RTT.c ****     // All data fits before wrap around
 447:segger/rtt/src/SEGGER_RTT.c ****     //
 448:segger/rtt/src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 449:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 450:segger/rtt/src/SEGGER_RTT.c ****     WrOff += NumBytes;
 451:segger/rtt/src/SEGGER_RTT.c ****     while (NumBytes--) {
 452:segger/rtt/src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 453:segger/rtt/src/SEGGER_RTT.c ****     };
 454:segger/rtt/src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 455:segger/rtt/src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 456:segger/rtt/src/SEGGER_RTT.c **** #else
 457:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 458:segger/rtt/src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 459:segger/rtt/src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 460:segger/rtt/src/SEGGER_RTT.c **** #endif
 461:segger/rtt/src/SEGGER_RTT.c ****   } else {
 462:segger/rtt/src/SEGGER_RTT.c ****     //
 463:segger/rtt/src/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 464:segger/rtt/src/SEGGER_RTT.c ****     //
 465:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 466:segger/rtt/src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 467:segger/rtt/src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 468:segger/rtt/src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 469:segger/rtt/src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 470:segger/rtt/src/SEGGER_RTT.c ****     };
 471:segger/rtt/src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 472:segger/rtt/src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 473:segger/rtt/src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 474:segger/rtt/src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 475:segger/rtt/src/SEGGER_RTT.c ****     };
 476:segger/rtt/src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 477:segger/rtt/src/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 478:segger/rtt/src/SEGGER_RTT.c **** #else
 479:segger/rtt/src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 480:segger/rtt/src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 481:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 482:segger/rtt/src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 483:segger/rtt/src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 484:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 485:segger/rtt/src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 486:segger/rtt/src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
ARM GAS  /tmp/ccjFarMV.s 			page 10


 487:segger/rtt/src/SEGGER_RTT.c **** #endif
 488:segger/rtt/src/SEGGER_RTT.c ****   }
 489:segger/rtt/src/SEGGER_RTT.c **** }
 490:segger/rtt/src/SEGGER_RTT.c **** 
 491:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 492:segger/rtt/src/SEGGER_RTT.c **** *
 493:segger/rtt/src/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 494:segger/rtt/src/SEGGER_RTT.c **** *
 495:segger/rtt/src/SEGGER_RTT.c **** *  Function description
 496:segger/rtt/src/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 497:segger/rtt/src/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 498:segger/rtt/src/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 499:segger/rtt/src/SEGGER_RTT.c **** *
 500:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
 501:segger/rtt/src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 502:segger/rtt/src/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 503:segger/rtt/src/SEGGER_RTT.c **** */
 504:segger/rtt/src/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 505:segger/rtt/src/SEGGER_RTT.c ****   unsigned char ac[2];
 506:segger/rtt/src/SEGGER_RTT.c **** 
 507:segger/rtt/src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 508:segger/rtt/src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 509:segger/rtt/src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 510:segger/rtt/src/SEGGER_RTT.c **** }
 511:segger/rtt/src/SEGGER_RTT.c **** 
 512:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 513:segger/rtt/src/SEGGER_RTT.c **** *
 514:segger/rtt/src/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 515:segger/rtt/src/SEGGER_RTT.c **** *
 516:segger/rtt/src/SEGGER_RTT.c **** *  Function description
 517:segger/rtt/src/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 518:segger/rtt/src/SEGGER_RTT.c **** *    buffer without blocking.
 519:segger/rtt/src/SEGGER_RTT.c **** *
 520:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
 521:segger/rtt/src/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 522:segger/rtt/src/SEGGER_RTT.c **** *
 523:segger/rtt/src/SEGGER_RTT.c **** *  Return value
 524:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 525:segger/rtt/src/SEGGER_RTT.c **** */
 526:segger/rtt/src/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
  29              		.loc 1 526 66 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 527:segger/rtt/src/SEGGER_RTT.c ****   unsigned RdOff;
  34              		.loc 1 527 3 view .LVU1
 528:segger/rtt/src/SEGGER_RTT.c ****   unsigned WrOff;
  35              		.loc 1 528 3 view .LVU2
 529:segger/rtt/src/SEGGER_RTT.c ****   unsigned r;
  36              		.loc 1 529 3 view .LVU3
 530:segger/rtt/src/SEGGER_RTT.c ****   //
 531:segger/rtt/src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 532:segger/rtt/src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 533:segger/rtt/src/SEGGER_RTT.c ****   //
 534:segger/rtt/src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
  37              		.loc 1 534 3 view .LVU4
ARM GAS  /tmp/ccjFarMV.s 			page 11


  38              		.loc 1 534 9 is_stmt 0 view .LVU5
  39 0000 0369     		ldr	r3, [r0, #16]
  40              	.LVL1:
 535:segger/rtt/src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
  41              		.loc 1 535 3 is_stmt 1 view .LVU6
  42              		.loc 1 535 9 is_stmt 0 view .LVU7
  43 0002 C268     		ldr	r2, [r0, #12]
  44              	.LVL2:
 536:segger/rtt/src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
  45              		.loc 1 536 3 is_stmt 1 view .LVU8
  46              		.loc 1 536 6 is_stmt 0 view .LVU9
  47 0004 9342     		cmp	r3, r2
  48 0006 04D8     		bhi	.L2
 537:segger/rtt/src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
  49              		.loc 1 537 5 is_stmt 1 view .LVU10
  50              		.loc 1 537 14 is_stmt 0 view .LVU11
  51 0008 8168     		ldr	r1, [r0, #8]
  52              		.loc 1 537 34 view .LVU12
  53 000a 8A1A     		subs	r2, r1, r2
  54              	.LVL3:
  55              		.loc 1 537 42 view .LVU13
  56 000c 1344     		add	r3, r3, r2
  57              	.LVL4:
  58              		.loc 1 537 7 view .LVU14
  59 000e 581E     		subs	r0, r3, #1
  60              	.LVL5:
  61              		.loc 1 537 7 view .LVU15
  62 0010 7047     		bx	lr
  63              	.LVL6:
  64              	.L2:
 538:segger/rtt/src/SEGGER_RTT.c ****   } else {
 539:segger/rtt/src/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
  65              		.loc 1 539 5 is_stmt 1 view .LVU16
  66              		.loc 1 539 15 is_stmt 0 view .LVU17
  67 0012 981A     		subs	r0, r3, r2
  68              	.LVL7:
  69              		.loc 1 539 7 view .LVU18
  70 0014 0138     		subs	r0, r0, #1
  71              	.LVL8:
 540:segger/rtt/src/SEGGER_RTT.c ****   }
 541:segger/rtt/src/SEGGER_RTT.c ****   return r;
  72              		.loc 1 541 3 is_stmt 1 view .LVU19
 542:segger/rtt/src/SEGGER_RTT.c **** }
  73              		.loc 1 542 1 is_stmt 0 view .LVU20
  74 0016 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE4:
  78              		.section	.text._WriteNoCheck,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	_WriteNoCheck:
  85              	.LVL9:
  86              	.LFB2:
 436:segger/rtt/src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  87              		.loc 1 436 94 is_stmt 1 view -0
ARM GAS  /tmp/ccjFarMV.s 			page 12


  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
 436:segger/rtt/src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  91              		.loc 1 436 94 is_stmt 0 view .LVU22
  92 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  93              	.LCFI0:
  94              		.cfi_def_cfa_offset 32
  95              		.cfi_offset 3, -32
  96              		.cfi_offset 4, -28
  97              		.cfi_offset 5, -24
  98              		.cfi_offset 6, -20
  99              		.cfi_offset 7, -16
 100              		.cfi_offset 8, -12
 101              		.cfi_offset 9, -8
 102              		.cfi_offset 14, -4
 103 0004 0446     		mov	r4, r0
 104 0006 8846     		mov	r8, r1
 105 0008 1646     		mov	r6, r2
 437:segger/rtt/src/SEGGER_RTT.c ****   unsigned WrOff;
 106              		.loc 1 437 3 is_stmt 1 view .LVU23
 438:segger/rtt/src/SEGGER_RTT.c ****   unsigned Rem;
 107              		.loc 1 438 3 view .LVU24
 439:segger/rtt/src/SEGGER_RTT.c ****   volatile char* pDst;
 108              		.loc 1 439 3 view .LVU25
 440:segger/rtt/src/SEGGER_RTT.c **** 
 109              		.loc 1 440 3 view .LVU26
 442:segger/rtt/src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 110              		.loc 1 442 3 view .LVU27
 442:segger/rtt/src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 111              		.loc 1 442 9 is_stmt 0 view .LVU28
 112 000a C568     		ldr	r5, [r0, #12]
 113              	.LVL10:
 443:segger/rtt/src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 114              		.loc 1 443 3 is_stmt 1 view .LVU29
 443:segger/rtt/src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 115              		.loc 1 443 14 is_stmt 0 view .LVU30
 116 000c 8768     		ldr	r7, [r0, #8]
 443:segger/rtt/src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 117              		.loc 1 443 7 view .LVU31
 118 000e A7EB0509 		sub	r9, r7, r5
 119              	.LVL11:
 444:segger/rtt/src/SEGGER_RTT.c ****     //
 120              		.loc 1 444 3 is_stmt 1 view .LVU32
 444:segger/rtt/src/SEGGER_RTT.c ****     //
 121              		.loc 1 444 6 is_stmt 0 view .LVU33
 122 0012 9145     		cmp	r9, r2
 123 0014 09D9     		bls	.L5
 448:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 124              		.loc 1 448 5 is_stmt 1 view .LVU34
 448:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 125              		.loc 1 448 18 is_stmt 0 view .LVU35
 126 0016 4068     		ldr	r0, [r0, #4]
 127              	.LVL12:
 457:segger/rtt/src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 128              		.loc 1 457 5 is_stmt 1 view .LVU36
 129 0018 2844     		add	r0, r0, r5
ARM GAS  /tmp/ccjFarMV.s 			page 13


 130              	.LVL13:
 457:segger/rtt/src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 131              		.loc 1 457 5 is_stmt 0 view .LVU37
 132 001a FFF7FEFF 		bl	memcpy
 133              	.LVL14:
 458:segger/rtt/src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 134              		.loc 1 458 5 is_stmt 1 view .LVU38
 135              		.syntax unified
 136              	@ 458 "segger/rtt/src/SEGGER_RTT.c" 1
 137 001e BFF35F8F 		dmb
 138              	
 139              	@ 0 "" 2
 458:segger/rtt/src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 140              		.loc 1 458 15 view .LVU39
 459:segger/rtt/src/SEGGER_RTT.c **** #endif
 141              		.loc 1 459 5 view .LVU40
 459:segger/rtt/src/SEGGER_RTT.c **** #endif
 142              		.loc 1 459 26 is_stmt 0 view .LVU41
 143              		.thumb
 144              		.syntax unified
 145 0022 3544     		add	r5, r5, r6
 146              	.LVL15:
 459:segger/rtt/src/SEGGER_RTT.c **** #endif
 147              		.loc 1 459 18 view .LVU42
 148 0024 E560     		str	r5, [r4, #12]
 149              	.LVL16:
 150              	.L4:
 489:segger/rtt/src/SEGGER_RTT.c **** 
 151              		.loc 1 489 1 view .LVU43
 152 0026 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 153              	.LVL17:
 154              	.L5:
 479:segger/rtt/src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 155              		.loc 1 479 5 is_stmt 1 view .LVU44
 480:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 156              		.loc 1 480 5 view .LVU45
 480:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 157              		.loc 1 480 18 is_stmt 0 view .LVU46
 158 002a 4068     		ldr	r0, [r0, #4]
 159              	.LVL18:
 481:segger/rtt/src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 160              		.loc 1 481 5 is_stmt 1 view .LVU47
 161 002c 4A46     		mov	r2, r9
 162              	.LVL19:
 481:segger/rtt/src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 163              		.loc 1 481 5 is_stmt 0 view .LVU48
 164 002e 2844     		add	r0, r0, r5
 165              	.LVL20:
 481:segger/rtt/src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 166              		.loc 1 481 5 view .LVU49
 167 0030 FFF7FEFF 		bl	memcpy
 168              	.LVL21:
 482:segger/rtt/src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 169              		.loc 1 482 5 is_stmt 1 view .LVU50
 482:segger/rtt/src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 170              		.loc 1 482 20 is_stmt 0 view .LVU51
 171 0034 ED1B     		subs	r5, r5, r7
ARM GAS  /tmp/ccjFarMV.s 			page 14


 172              	.LVL22:
 482:segger/rtt/src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 173              		.loc 1 482 20 view .LVU52
 174 0036 3544     		add	r5, r5, r6
 175              	.LVL23:
 483:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 176              		.loc 1 483 5 is_stmt 1 view .LVU53
 484:segger/rtt/src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 177              		.loc 1 484 5 view .LVU54
 178 0038 2A46     		mov	r2, r5
 179 003a 08EB0901 		add	r1, r8, r9
 180 003e 6068     		ldr	r0, [r4, #4]
 181 0040 FFF7FEFF 		bl	memcpy
 182              	.LVL24:
 485:segger/rtt/src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 183              		.loc 1 485 5 view .LVU55
 184              		.syntax unified
 185              	@ 485 "segger/rtt/src/SEGGER_RTT.c" 1
 186 0044 BFF35F8F 		dmb
 187              	
 188              	@ 0 "" 2
 485:segger/rtt/src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 189              		.loc 1 485 15 view .LVU56
 486:segger/rtt/src/SEGGER_RTT.c **** #endif
 190              		.loc 1 486 5 view .LVU57
 486:segger/rtt/src/SEGGER_RTT.c **** #endif
 191              		.loc 1 486 18 is_stmt 0 view .LVU58
 192              		.thumb
 193              		.syntax unified
 194 0048 E560     		str	r5, [r4, #12]
 489:segger/rtt/src/SEGGER_RTT.c **** 
 195              		.loc 1 489 1 view .LVU59
 196 004a ECE7     		b	.L4
 197              		.cfi_endproc
 198              	.LFE2:
 200              		.section	.text._WriteBlocking,"ax",%progbits
 201              		.align	1
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 206              	_WriteBlocking:
 207              	.LVL25:
 208              	.LFB1:
 374:segger/rtt/src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 209              		.loc 1 374 101 is_stmt 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 374:segger/rtt/src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 213              		.loc 1 374 101 is_stmt 0 view .LVU61
 214 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 215              	.LCFI1:
 216              		.cfi_def_cfa_offset 32
 217              		.cfi_offset 3, -32
 218              		.cfi_offset 4, -28
 219              		.cfi_offset 5, -24
 220              		.cfi_offset 6, -20
ARM GAS  /tmp/ccjFarMV.s 			page 15


 221              		.cfi_offset 7, -16
 222              		.cfi_offset 8, -12
 223              		.cfi_offset 9, -8
 224              		.cfi_offset 14, -4
 225 0004 0646     		mov	r6, r0
 226 0006 8846     		mov	r8, r1
 227 0008 1746     		mov	r7, r2
 375:segger/rtt/src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 228              		.loc 1 375 3 is_stmt 1 view .LVU62
 376:segger/rtt/src/SEGGER_RTT.c ****   unsigned RdOff;
 229              		.loc 1 376 3 view .LVU63
 377:segger/rtt/src/SEGGER_RTT.c ****   unsigned WrOff;
 230              		.loc 1 377 3 view .LVU64
 378:segger/rtt/src/SEGGER_RTT.c ****   volatile char* pDst;
 231              		.loc 1 378 3 view .LVU65
 379:segger/rtt/src/SEGGER_RTT.c ****   //
 232              		.loc 1 379 3 view .LVU66
 383:segger/rtt/src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 233              		.loc 1 383 3 view .LVU67
 234              	.LVL26:
 384:segger/rtt/src/SEGGER_RTT.c ****   do {
 235              		.loc 1 384 3 view .LVU68
 384:segger/rtt/src/SEGGER_RTT.c ****   do {
 236              		.loc 1 384 9 is_stmt 0 view .LVU69
 237 000a C568     		ldr	r5, [r0, #12]
 238              	.LVL27:
 383:segger/rtt/src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 239              		.loc 1 383 19 view .LVU70
 240 000c 4FF00009 		mov	r9, #0
 241 0010 1AE0     		b	.L12
 242              	.LVL28:
 243              	.L17:
 388:segger/rtt/src/SEGGER_RTT.c ****     } else {
 244              		.loc 1 388 7 is_stmt 1 view .LVU71
 388:segger/rtt/src/SEGGER_RTT.c ****     } else {
 245              		.loc 1 388 31 is_stmt 0 view .LVU72
 246 0012 5B1B     		subs	r3, r3, r5
 247              	.LVL29:
 388:segger/rtt/src/SEGGER_RTT.c ****     } else {
 248              		.loc 1 388 23 view .LVU73
 249 0014 5A1E     		subs	r2, r3, #1
 250              	.LVL30:
 251              	.L10:
 392:segger/rtt/src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 252              		.loc 1 392 5 is_stmt 1 view .LVU74
 392:segger/rtt/src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 253              		.loc 1 392 23 is_stmt 0 view .LVU75
 254 0016 B368     		ldr	r3, [r6, #8]
 255 0018 5C1B     		subs	r4, r3, r5
 392:segger/rtt/src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 256              		.loc 1 392 21 view .LVU76
 257 001a 9442     		cmp	r4, r2
 258 001c 28BF     		it	cs
 259 001e 1446     		movcs	r4, r2
 260              	.LVL31:
 393:segger/rtt/src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 261              		.loc 1 393 5 is_stmt 1 view .LVU77
ARM GAS  /tmp/ccjFarMV.s 			page 16


 393:segger/rtt/src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 262              		.loc 1 393 21 is_stmt 0 view .LVU78
 263 0020 BC42     		cmp	r4, r7
 264 0022 28BF     		it	cs
 265 0024 3C46     		movcs	r4, r7
 266              	.LVL32:
 394:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 267              		.loc 1 394 5 is_stmt 1 view .LVU79
 394:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 268              		.loc 1 394 18 is_stmt 0 view .LVU80
 269 0026 7068     		ldr	r0, [r6, #4]
 270              	.LVL33:
 403:segger/rtt/src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 271              		.loc 1 403 5 is_stmt 1 view .LVU81
 272 0028 2246     		mov	r2, r4
 273 002a 4146     		mov	r1, r8
 274 002c 2844     		add	r0, r0, r5
 275              	.LVL34:
 403:segger/rtt/src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 276              		.loc 1 403 5 is_stmt 0 view .LVU82
 277 002e FFF7FEFF 		bl	memcpy
 278              	.LVL35:
 404:segger/rtt/src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 279              		.loc 1 404 5 is_stmt 1 view .LVU83
 404:segger/rtt/src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 280              		.loc 1 404 21 is_stmt 0 view .LVU84
 281 0032 A144     		add	r9, r9, r4
 282              	.LVL36:
 405:segger/rtt/src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 283              		.loc 1 405 5 is_stmt 1 view .LVU85
 405:segger/rtt/src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 284              		.loc 1 405 21 is_stmt 0 view .LVU86
 285 0034 A044     		add	r8, r8, r4
 286              	.LVL37:
 406:segger/rtt/src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 287              		.loc 1 406 5 is_stmt 1 view .LVU87
 406:segger/rtt/src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 288              		.loc 1 406 21 is_stmt 0 view .LVU88
 289 0036 3F1B     		subs	r7, r7, r4
 290              	.LVL38:
 407:segger/rtt/src/SEGGER_RTT.c **** #endif
 291              		.loc 1 407 5 is_stmt 1 view .LVU89
 407:segger/rtt/src/SEGGER_RTT.c **** #endif
 292              		.loc 1 407 21 is_stmt 0 view .LVU90
 293 0038 2544     		add	r5, r5, r4
 294              	.LVL39:
 409:segger/rtt/src/SEGGER_RTT.c ****       WrOff = 0u;
 295              		.loc 1 409 5 is_stmt 1 view .LVU91
 409:segger/rtt/src/SEGGER_RTT.c ****       WrOff = 0u;
 296              		.loc 1 409 23 is_stmt 0 view .LVU92
 297 003a B368     		ldr	r3, [r6, #8]
 409:segger/rtt/src/SEGGER_RTT.c ****       WrOff = 0u;
 298              		.loc 1 409 8 view .LVU93
 299 003c AB42     		cmp	r3, r5
 300 003e 0BD0     		beq	.L15
 301              	.LVL40:
 302              	.L11:
ARM GAS  /tmp/ccjFarMV.s 			page 17


 412:segger/rtt/src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 303              		.loc 1 412 5 is_stmt 1 view .LVU94
 304              		.syntax unified
 305              	@ 412 "segger/rtt/src/SEGGER_RTT.c" 1
 306 0040 BFF35F8F 		dmb
 307              	
 308              	@ 0 "" 2
 412:segger/rtt/src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 309              		.loc 1 412 15 view .LVU95
 413:segger/rtt/src/SEGGER_RTT.c ****   } while (NumBytes);
 310              		.loc 1 413 5 view .LVU96
 413:segger/rtt/src/SEGGER_RTT.c ****   } while (NumBytes);
 311              		.loc 1 413 18 is_stmt 0 view .LVU97
 312              		.thumb
 313              		.syntax unified
 314 0044 F560     		str	r5, [r6, #12]
 414:segger/rtt/src/SEGGER_RTT.c ****   return NumBytesWritten;
 315              		.loc 1 414 12 is_stmt 1 view .LVU98
 316 0046 4FB1     		cbz	r7, .L16
 317              	.LVL41:
 318              	.L12:
 385:segger/rtt/src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 319              		.loc 1 385 3 view .LVU99
 386:segger/rtt/src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 320              		.loc 1 386 5 view .LVU100
 386:segger/rtt/src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 321              		.loc 1 386 11 is_stmt 0 view .LVU101
 322 0048 3369     		ldr	r3, [r6, #16]
 323              	.LVL42:
 387:segger/rtt/src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 324              		.loc 1 387 5 is_stmt 1 view .LVU102
 387:segger/rtt/src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 325              		.loc 1 387 8 is_stmt 0 view .LVU103
 326 004a 9D42     		cmp	r5, r3
 327 004c E1D3     		bcc	.L17
 390:segger/rtt/src/SEGGER_RTT.c ****     }
 328              		.loc 1 390 7 is_stmt 1 view .LVU104
 390:segger/rtt/src/SEGGER_RTT.c ****     }
 329              		.loc 1 390 30 is_stmt 0 view .LVU105
 330 004e B268     		ldr	r2, [r6, #8]
 390:segger/rtt/src/SEGGER_RTT.c ****     }
 331              		.loc 1 390 62 view .LVU106
 332 0050 5B1B     		subs	r3, r3, r5
 333              	.LVL43:
 390:segger/rtt/src/SEGGER_RTT.c ****     }
 334              		.loc 1 390 45 view .LVU107
 335 0052 1A44     		add	r2, r2, r3
 390:segger/rtt/src/SEGGER_RTT.c ****     }
 336              		.loc 1 390 23 view .LVU108
 337 0054 013A     		subs	r2, r2, #1
 338              	.LVL44:
 390:segger/rtt/src/SEGGER_RTT.c ****     }
 339              		.loc 1 390 23 view .LVU109
 340 0056 DEE7     		b	.L10
 341              	.LVL45:
 342              	.L15:
 410:segger/rtt/src/SEGGER_RTT.c ****     }
ARM GAS  /tmp/ccjFarMV.s 			page 18


 343              		.loc 1 410 13 view .LVU110
 344 0058 0025     		movs	r5, #0
 345              	.LVL46:
 410:segger/rtt/src/SEGGER_RTT.c ****     }
 346              		.loc 1 410 13 view .LVU111
 347 005a F1E7     		b	.L11
 348              	.LVL47:
 349              	.L16:
 415:segger/rtt/src/SEGGER_RTT.c **** }
 350              		.loc 1 415 3 is_stmt 1 view .LVU112
 416:segger/rtt/src/SEGGER_RTT.c **** 
 351              		.loc 1 416 1 is_stmt 0 view .LVU113
 352 005c 4846     		mov	r0, r9
 353 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 416:segger/rtt/src/SEGGER_RTT.c **** 
 354              		.loc 1 416 1 view .LVU114
 355              		.cfi_endproc
 356              	.LFE1:
 358              		.section	.text._PostTerminalSwitch,"ax",%progbits
 359              		.align	1
 360              		.syntax unified
 361              		.thumb
 362              		.thumb_func
 364              	_PostTerminalSwitch:
 365              	.LVL48:
 366              	.LFB3:
 504:segger/rtt/src/SEGGER_RTT.c ****   unsigned char ac[2];
 367              		.loc 1 504 88 is_stmt 1 view -0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 8
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 504:segger/rtt/src/SEGGER_RTT.c ****   unsigned char ac[2];
 371              		.loc 1 504 88 is_stmt 0 view .LVU116
 372 0000 00B5     		push	{lr}
 373              	.LCFI2:
 374              		.cfi_def_cfa_offset 4
 375              		.cfi_offset 14, -4
 376 0002 83B0     		sub	sp, sp, #12
 377              	.LCFI3:
 378              		.cfi_def_cfa_offset 16
 505:segger/rtt/src/SEGGER_RTT.c **** 
 379              		.loc 1 505 3 is_stmt 1 view .LVU117
 507:segger/rtt/src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 380              		.loc 1 507 3 view .LVU118
 507:segger/rtt/src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 381              		.loc 1 507 9 is_stmt 0 view .LVU119
 382 0004 FF23     		movs	r3, #255
 383 0006 8DF80430 		strb	r3, [sp, #4]
 508:segger/rtt/src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 384              		.loc 1 508 3 is_stmt 1 view .LVU120
 508:segger/rtt/src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 385              		.loc 1 508 23 is_stmt 0 view .LVU121
 386 000a 054B     		ldr	r3, .L20
 387 000c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 508:segger/rtt/src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 388              		.loc 1 508 9 view .LVU122
 389 000e 8DF80530 		strb	r3, [sp, #5]
ARM GAS  /tmp/ccjFarMV.s 			page 19


 509:segger/rtt/src/SEGGER_RTT.c **** }
 390              		.loc 1 509 3 is_stmt 1 view .LVU123
 391 0012 0222     		movs	r2, #2
 392 0014 01A9     		add	r1, sp, #4
 393              	.LVL49:
 509:segger/rtt/src/SEGGER_RTT.c **** }
 394              		.loc 1 509 3 is_stmt 0 view .LVU124
 395 0016 FFF7FEFF 		bl	_WriteBlocking
 396              	.LVL50:
 510:segger/rtt/src/SEGGER_RTT.c **** 
 397              		.loc 1 510 1 view .LVU125
 398 001a 03B0     		add	sp, sp, #12
 399              	.LCFI4:
 400              		.cfi_def_cfa_offset 4
 401              		@ sp needed
 402 001c 5DF804FB 		ldr	pc, [sp], #4
 403              	.L21:
 404              		.align	2
 405              	.L20:
 406 0020 00000000 		.word	_aTerminalId
 407              		.cfi_endproc
 408              	.LFE3:
 410              		.section	.rodata._DoInit.str1.4,"aMS",%progbits,1
 411              		.align	2
 412              	.LC0:
 413 0000 5465726D 		.ascii	"Terminal\000"
 413      696E616C 
 413      00
 414              		.section	.text._DoInit,"ax",%progbits
 415              		.align	1
 416              		.syntax unified
 417              		.thumb
 418              		.thumb_func
 420              	_DoInit:
 421              	.LFB0:
 314:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 422              		.loc 1 314 27 is_stmt 1 view -0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 0
 425              		@ frame_needed = 0, uses_anonymous_args = 0
 426 0000 10B5     		push	{r4, lr}
 427              	.LCFI5:
 428              		.cfi_def_cfa_offset 8
 429              		.cfi_offset 4, -8
 430              		.cfi_offset 14, -4
 315:segger/rtt/src/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 431              		.loc 1 315 3 view .LVU127
 316:segger/rtt/src/SEGGER_RTT.c ****   unsigned i;
 432              		.loc 1 316 3 view .LVU128
 317:segger/rtt/src/SEGGER_RTT.c ****   //
 433              		.loc 1 317 3 view .LVU129
 321:segger/rtt/src/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
 434              		.loc 1 321 3 view .LVU130
 435              	.LVL51:
 322:segger/rtt/src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 436              		.loc 1 322 3 view .LVU131
 437 0002 154C     		ldr	r4, .L26
ARM GAS  /tmp/ccjFarMV.s 			page 20


 438 0004 A822     		movs	r2, #168
 439 0006 0021     		movs	r1, #0
 440 0008 2046     		mov	r0, r4
 441 000a FFF7FEFF 		bl	memset
 442              	.LVL52:
 323:segger/rtt/src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 443              		.loc 1 323 3 view .LVU132
 323:segger/rtt/src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 444              		.loc 1 323 25 is_stmt 0 view .LVU133
 445 000e 0323     		movs	r3, #3
 446 0010 2361     		str	r3, [r4, #16]
 324:segger/rtt/src/SEGGER_RTT.c ****   //
 447              		.loc 1 324 3 is_stmt 1 view .LVU134
 324:segger/rtt/src/SEGGER_RTT.c ****   //
 448              		.loc 1 324 25 is_stmt 0 view .LVU135
 449 0012 6361     		str	r3, [r4, #20]
 328:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 450              		.loc 1 328 3 is_stmt 1 view .LVU136
 328:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 451              		.loc 1 328 27 is_stmt 0 view .LVU137
 452 0014 114A     		ldr	r2, .L26+4
 453 0016 A261     		str	r2, [r4, #24]
 329:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 454              		.loc 1 329 3 is_stmt 1 view .LVU138
 329:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 455              		.loc 1 329 27 is_stmt 0 view .LVU139
 456 0018 114B     		ldr	r3, .L26+8
 457 001a E361     		str	r3, [r4, #28]
 330:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 458              		.loc 1 330 3 is_stmt 1 view .LVU140
 330:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 459              		.loc 1 330 27 is_stmt 0 view .LVU141
 460 001c 4FF48063 		mov	r3, #1024
 461 0020 2362     		str	r3, [r4, #32]
 331:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 462              		.loc 1 331 3 is_stmt 1 view .LVU142
 331:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 463              		.loc 1 331 27 is_stmt 0 view .LVU143
 464 0022 0023     		movs	r3, #0
 465 0024 A362     		str	r3, [r4, #40]
 332:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 466              		.loc 1 332 3 is_stmt 1 view .LVU144
 332:segger/rtt/src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 467              		.loc 1 332 27 is_stmt 0 view .LVU145
 468 0026 6362     		str	r3, [r4, #36]
 333:segger/rtt/src/SEGGER_RTT.c ****   //
 469              		.loc 1 333 3 is_stmt 1 view .LVU146
 333:segger/rtt/src/SEGGER_RTT.c ****   //
 470              		.loc 1 333 27 is_stmt 0 view .LVU147
 471 0028 E362     		str	r3, [r4, #44]
 337:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 472              		.loc 1 337 3 is_stmt 1 view .LVU148
 337:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 473              		.loc 1 337 29 is_stmt 0 view .LVU149
 474 002a 2266     		str	r2, [r4, #96]
 338:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 475              		.loc 1 338 3 is_stmt 1 view .LVU150
ARM GAS  /tmp/ccjFarMV.s 			page 21


 338:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 476              		.loc 1 338 29 is_stmt 0 view .LVU151
 477 002c 0D4A     		ldr	r2, .L26+12
 478 002e 6266     		str	r2, [r4, #100]
 339:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 479              		.loc 1 339 3 is_stmt 1 view .LVU152
 339:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 480              		.loc 1 339 29 is_stmt 0 view .LVU153
 481 0030 1022     		movs	r2, #16
 482 0032 A266     		str	r2, [r4, #104]
 340:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 483              		.loc 1 340 3 is_stmt 1 view .LVU154
 340:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 484              		.loc 1 340 29 is_stmt 0 view .LVU155
 485 0034 2367     		str	r3, [r4, #112]
 341:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 486              		.loc 1 341 3 is_stmt 1 view .LVU156
 341:segger/rtt/src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 487              		.loc 1 341 29 is_stmt 0 view .LVU157
 488 0036 E366     		str	r3, [r4, #108]
 342:segger/rtt/src/SEGGER_RTT.c ****   //
 489              		.loc 1 342 3 is_stmt 1 view .LVU158
 342:segger/rtt/src/SEGGER_RTT.c ****   //
 490              		.loc 1 342 29 is_stmt 0 view .LVU159
 491 0038 6367     		str	r3, [r4, #116]
 348:segger/rtt/src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 492              		.loc 1 348 3 is_stmt 1 view .LVU160
 493              		.syntax unified
 494              	@ 348 "segger/rtt/src/SEGGER_RTT.c" 1
 495 003a BFF35F8F 		dmb
 496              	
 497              	@ 0 "" 2
 348:segger/rtt/src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 498              		.loc 1 348 13 view .LVU161
 349:segger/rtt/src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 499              		.loc 1 349 3 view .LVU162
 500              	.LVL53:
 349:segger/rtt/src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 501              		.loc 1 349 3 is_stmt 0 view .LVU163
 502              		.thumb
 503              		.syntax unified
 504 003e 06E0     		b	.L23
 505              	.LVL54:
 506              	.L24:
 350:segger/rtt/src/SEGGER_RTT.c ****   }
 507              		.loc 1 350 5 is_stmt 1 view .LVU164
 350:segger/rtt/src/SEGGER_RTT.c ****   }
 508              		.loc 1 350 50 is_stmt 0 view .LVU165
 509 0040 C3F10F02 		rsb	r2, r3, #15
 350:segger/rtt/src/SEGGER_RTT.c ****   }
 510              		.loc 1 350 27 view .LVU166
 511 0044 0849     		ldr	r1, .L26+16
 512 0046 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 350:segger/rtt/src/SEGGER_RTT.c ****   }
 513              		.loc 1 350 16 view .LVU167
 514 0048 034A     		ldr	r2, .L26
 515 004a D154     		strb	r1, [r2, r3]
ARM GAS  /tmp/ccjFarMV.s 			page 22


 349:segger/rtt/src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 516              		.loc 1 349 42 is_stmt 1 discriminator 3 view .LVU168
 517 004c 0133     		adds	r3, r3, #1
 518              	.LVL55:
 519              	.L23:
 349:segger/rtt/src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 520              		.loc 1 349 17 discriminator 1 view .LVU169
 521 004e 0F2B     		cmp	r3, #15
 522 0050 F6D9     		bls	.L24
 352:segger/rtt/src/SEGGER_RTT.c **** }
 523              		.loc 1 352 3 view .LVU170
 524              		.syntax unified
 525              	@ 352 "segger/rtt/src/SEGGER_RTT.c" 1
 526 0052 BFF35F8F 		dmb
 527              	
 528              	@ 0 "" 2
 352:segger/rtt/src/SEGGER_RTT.c **** }
 529              		.loc 1 352 13 view .LVU171
 353:segger/rtt/src/SEGGER_RTT.c **** 
 530              		.loc 1 353 1 is_stmt 0 view .LVU172
 531              		.thumb
 532              		.syntax unified
 533 0056 10BD     		pop	{r4, pc}
 534              	.L27:
 535              		.align	2
 536              	.L26:
 537 0058 00000000 		.word	_SEGGER_RTT
 538 005c 00000000 		.word	.LC0
 539 0060 00000000 		.word	_acUpBuffer
 540 0064 00000000 		.word	_acDownBuffer
 541 0068 00000000 		.word	_aInitStr.0
 542              		.cfi_endproc
 543              	.LFE0:
 545              		.section	.text.SEGGER_RTT_ReadUpBufferNoLock,"ax",%progbits
 546              		.align	1
 547              		.global	SEGGER_RTT_ReadUpBufferNoLock
 548              		.syntax unified
 549              		.thumb
 550              		.thumb_func
 552              	SEGGER_RTT_ReadUpBufferNoLock:
 553              	.LVL56:
 554              	.LFB5:
 543:segger/rtt/src/SEGGER_RTT.c **** 
 544:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 545:segger/rtt/src/SEGGER_RTT.c **** *
 546:segger/rtt/src/SEGGER_RTT.c **** *       Public code
 547:segger/rtt/src/SEGGER_RTT.c **** *
 548:segger/rtt/src/SEGGER_RTT.c **** **********************************************************************
 549:segger/rtt/src/SEGGER_RTT.c **** */
 550:segger/rtt/src/SEGGER_RTT.c **** 
 551:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 552:segger/rtt/src/SEGGER_RTT.c **** *
 553:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBufferNoLock()
 554:segger/rtt/src/SEGGER_RTT.c **** *
 555:segger/rtt/src/SEGGER_RTT.c **** *  Function description
 556:segger/rtt/src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 557:segger/rtt/src/SEGGER_RTT.c **** *    which have been previously stored by the application.
ARM GAS  /tmp/ccjFarMV.s 			page 23


 558:segger/rtt/src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 559:segger/rtt/src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer
 560:segger/rtt/src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 561:segger/rtt/src/SEGGER_RTT.c **** *
 562:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
 563:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 564:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 565:segger/rtt/src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 566:segger/rtt/src/SEGGER_RTT.c **** *
 567:segger/rtt/src/SEGGER_RTT.c **** *  Return value
 568:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 569:segger/rtt/src/SEGGER_RTT.c **** *
 570:segger/rtt/src/SEGGER_RTT.c **** *  Additional information
 571:segger/rtt/src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 572:segger/rtt/src/SEGGER_RTT.c **** */
 573:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 555              		.loc 1 573 96 is_stmt 1 view -0
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 0
 558              		@ frame_needed = 0, uses_anonymous_args = 0
 559              		.loc 1 573 96 is_stmt 0 view .LVU174
 560 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 561              	.LCFI6:
 562              		.cfi_def_cfa_offset 32
 563              		.cfi_offset 4, -32
 564              		.cfi_offset 5, -28
 565              		.cfi_offset 6, -24
 566              		.cfi_offset 7, -20
 567              		.cfi_offset 8, -16
 568              		.cfi_offset 9, -12
 569              		.cfi_offset 10, -8
 570              		.cfi_offset 14, -4
 571 0004 0446     		mov	r4, r0
 572 0006 8846     		mov	r8, r1
 573 0008 9146     		mov	r9, r2
 574:segger/rtt/src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 574              		.loc 1 574 3 is_stmt 1 view .LVU175
 575:segger/rtt/src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 575              		.loc 1 575 3 view .LVU176
 576:segger/rtt/src/SEGGER_RTT.c ****   unsigned                RdOff;
 576              		.loc 1 576 3 view .LVU177
 577:segger/rtt/src/SEGGER_RTT.c ****   unsigned                WrOff;
 577              		.loc 1 577 3 view .LVU178
 578:segger/rtt/src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 578              		.loc 1 578 3 view .LVU179
 579:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 579              		.loc 1 579 3 view .LVU180
 580:segger/rtt/src/SEGGER_RTT.c ****   volatile char*          pSrc;
 580              		.loc 1 580 3 view .LVU181
 581:segger/rtt/src/SEGGER_RTT.c **** 
 582:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 581              		.loc 1 582 3 view .LVU182
 582              	.LBB2:
 583              		.loc 1 582 3 view .LVU183
 584              		.loc 1 582 3 view .LVU184
 585              	.LVL57:
 586              		.loc 1 582 3 view .LVU185
ARM GAS  /tmp/ccjFarMV.s 			page 24


 587 000a 274B     		ldr	r3, .L39
 588 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 589 000e DBB2     		uxtb	r3, r3
 590 0010 532B     		cmp	r3, #83
 591 0012 18D1     		bne	.L36
 592              	.LVL58:
 593              	.L29:
 594              		.loc 1 582 3 is_stmt 0 view .LVU186
 595              	.LBE2:
 596              		.loc 1 582 3 is_stmt 1 discriminator 3 view .LVU187
 583:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 597              		.loc 1 583 3 view .LVU188
 584:segger/rtt/src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 598              		.loc 1 584 3 view .LVU189
 585:segger/rtt/src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 599              		.loc 1 585 3 view .LVU190
 600              		.loc 1 585 9 is_stmt 0 view .LVU191
 601 0014 04EB4402 		add	r2, r4, r4, lsl #1
 602 0018 234B     		ldr	r3, .L39
 603 001a 03EBC203 		add	r3, r3, r2, lsl #3
 604 001e 9F6A     		ldr	r7, [r3, #40]
 605              	.LVL59:
 586:segger/rtt/src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 606              		.loc 1 586 3 is_stmt 1 view .LVU192
 607              		.loc 1 586 9 is_stmt 0 view .LVU193
 608 0020 5D6A     		ldr	r5, [r3, #36]
 609              	.LVL60:
 587:segger/rtt/src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 610              		.loc 1 587 3 is_stmt 1 view .LVU194
 588:segger/rtt/src/SEGGER_RTT.c ****   //
 589:segger/rtt/src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 590:segger/rtt/src/SEGGER_RTT.c ****   //
 591:segger/rtt/src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 611              		.loc 1 591 3 view .LVU195
 612              		.loc 1 591 6 is_stmt 0 view .LVU196
 613 0022 AF42     		cmp	r7, r5
 614 0024 12D8     		bhi	.L37
 587:segger/rtt/src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 615              		.loc 1 587 16 view .LVU197
 616 0026 0026     		movs	r6, #0
 617              	.LVL61:
 618              	.L30:
 592:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 593:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 594:segger/rtt/src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 595:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 596:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 597:segger/rtt/src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 598:segger/rtt/src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 599:segger/rtt/src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 600:segger/rtt/src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 601:segger/rtt/src/SEGGER_RTT.c ****     };
 602:segger/rtt/src/SEGGER_RTT.c **** #else
 603:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 604:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 605:segger/rtt/src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 606:segger/rtt/src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
ARM GAS  /tmp/ccjFarMV.s 			page 25


 607:segger/rtt/src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 608:segger/rtt/src/SEGGER_RTT.c **** #endif
 609:segger/rtt/src/SEGGER_RTT.c ****     //
 610:segger/rtt/src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 611:segger/rtt/src/SEGGER_RTT.c ****     //
 612:segger/rtt/src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 613:segger/rtt/src/SEGGER_RTT.c ****       RdOff = 0u;
 614:segger/rtt/src/SEGGER_RTT.c ****     }
 615:segger/rtt/src/SEGGER_RTT.c ****   }
 616:segger/rtt/src/SEGGER_RTT.c ****   //
 617:segger/rtt/src/SEGGER_RTT.c ****   // Read remaining items of buffer
 618:segger/rtt/src/SEGGER_RTT.c ****   //
 619:segger/rtt/src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 619              		.loc 1 619 3 is_stmt 1 view .LVU198
 620              		.loc 1 619 15 is_stmt 0 view .LVU199
 621 0028 ED1B     		subs	r5, r5, r7
 622              	.LVL62:
 620:segger/rtt/src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 623              		.loc 1 620 3 is_stmt 1 view .LVU200
 624              		.loc 1 620 15 is_stmt 0 view .LVU201
 625 002a 4D45     		cmp	r5, r9
 626 002c 28BF     		it	cs
 627 002e 4D46     		movcs	r5, r9
 628              	.LVL63:
 621:segger/rtt/src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 629              		.loc 1 621 3 is_stmt 1 view .LVU202
 630              		.loc 1 621 6 is_stmt 0 view .LVU203
 631 0030 55BB     		cbnz	r5, .L38
 632              	.LVL64:
 633              	.L31:
 622:segger/rtt/src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 623:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 624:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 625:segger/rtt/src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 626:segger/rtt/src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 627:segger/rtt/src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 628:segger/rtt/src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 629:segger/rtt/src/SEGGER_RTT.c ****     };
 630:segger/rtt/src/SEGGER_RTT.c **** #else
 631:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 632:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 633:segger/rtt/src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 634:segger/rtt/src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 635:segger/rtt/src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 636:segger/rtt/src/SEGGER_RTT.c **** #endif
 637:segger/rtt/src/SEGGER_RTT.c ****   }
 638:segger/rtt/src/SEGGER_RTT.c ****   //
 639:segger/rtt/src/SEGGER_RTT.c ****   // Update read offset of buffer
 640:segger/rtt/src/SEGGER_RTT.c ****   //
 641:segger/rtt/src/SEGGER_RTT.c ****   if (NumBytesRead) {
 634              		.loc 1 641 3 is_stmt 1 view .LVU204
 635              		.loc 1 641 6 is_stmt 0 view .LVU205
 636 0032 2EB1     		cbz	r6, .L28
 642:segger/rtt/src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 637              		.loc 1 642 5 is_stmt 1 view .LVU206
 638              		.loc 1 642 18 is_stmt 0 view .LVU207
 639 0034 04EB4404 		add	r4, r4, r4, lsl #1
ARM GAS  /tmp/ccjFarMV.s 			page 26


 640              	.LVL65:
 641              		.loc 1 642 18 view .LVU208
 642 0038 1B4B     		ldr	r3, .L39
 643 003a 03EBC403 		add	r3, r3, r4, lsl #3
 644 003e 9F62     		str	r7, [r3, #40]
 643:segger/rtt/src/SEGGER_RTT.c ****   }
 644:segger/rtt/src/SEGGER_RTT.c ****   //
 645:segger/rtt/src/SEGGER_RTT.c ****   return NumBytesRead;
 645              		.loc 1 645 3 is_stmt 1 view .LVU209
 646              	.L28:
 646:segger/rtt/src/SEGGER_RTT.c **** }
 647              		.loc 1 646 1 is_stmt 0 view .LVU210
 648 0040 3046     		mov	r0, r6
 649 0042 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 650              	.LVL66:
 651              	.L36:
 652              	.LBB3:
 582:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 653              		.loc 1 582 3 is_stmt 1 discriminator 1 view .LVU211
 654 0046 FFF7FEFF 		bl	_DoInit
 655              	.LVL67:
 582:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 656              		.loc 1 582 3 is_stmt 0 discriminator 1 view .LVU212
 657 004a E3E7     		b	.L29
 658              	.LVL68:
 659              	.L37:
 582:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 660              		.loc 1 582 3 discriminator 1 view .LVU213
 661              	.LBE3:
 592:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 662              		.loc 1 592 5 is_stmt 1 view .LVU214
 592:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 663              		.loc 1 592 24 is_stmt 0 view .LVU215
 664 004c 164B     		ldr	r3, .L39
 665 004e 03EBC20A 		add	r10, r3, r2, lsl #3
 666 0052 DAF82060 		ldr	r6, [r10, #32]
 592:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 667              		.loc 1 592 17 view .LVU216
 668 0056 F61B     		subs	r6, r6, r7
 669              	.LVL69:
 593:segger/rtt/src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 670              		.loc 1 593 5 is_stmt 1 view .LVU217
 593:segger/rtt/src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 671              		.loc 1 593 17 is_stmt 0 view .LVU218
 672 0058 4E45     		cmp	r6, r9
 673 005a 28BF     		it	cs
 674 005c 4E46     		movcs	r6, r9
 675              	.LVL70:
 594:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 676              		.loc 1 594 5 is_stmt 1 view .LVU219
 594:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 677              		.loc 1 594 18 is_stmt 0 view .LVU220
 678 005e 621C     		adds	r2, r4, #1
 679 0060 02EB4202 		add	r2, r2, r2, lsl #1
 680 0064 03EBC203 		add	r3, r3, r2, lsl #3
 681 0068 5968     		ldr	r1, [r3, #4]
 682              	.LVL71:
ARM GAS  /tmp/ccjFarMV.s 			page 27


 603:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 683              		.loc 1 603 5 is_stmt 1 view .LVU221
 684 006a 3246     		mov	r2, r6
 685 006c 3944     		add	r1, r1, r7
 686              	.LVL72:
 603:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 687              		.loc 1 603 5 is_stmt 0 view .LVU222
 688 006e 4046     		mov	r0, r8
 689 0070 FFF7FEFF 		bl	memcpy
 690              	.LVL73:
 604:segger/rtt/src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 691              		.loc 1 604 5 is_stmt 1 view .LVU223
 605:segger/rtt/src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 692              		.loc 1 605 5 view .LVU224
 605:segger/rtt/src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 693              		.loc 1 605 18 is_stmt 0 view .LVU225
 694 0074 B044     		add	r8, r8, r6
 695              	.LVL74:
 606:segger/rtt/src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 696              		.loc 1 606 5 is_stmt 1 view .LVU226
 606:segger/rtt/src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 697              		.loc 1 606 18 is_stmt 0 view .LVU227
 698 0076 A9EB0609 		sub	r9, r9, r6
 699              	.LVL75:
 607:segger/rtt/src/SEGGER_RTT.c **** #endif
 700              		.loc 1 607 5 is_stmt 1 view .LVU228
 607:segger/rtt/src/SEGGER_RTT.c **** #endif
 701              		.loc 1 607 18 is_stmt 0 view .LVU229
 702 007a 3744     		add	r7, r7, r6
 703              	.LVL76:
 612:segger/rtt/src/SEGGER_RTT.c ****       RdOff = 0u;
 704              		.loc 1 612 5 is_stmt 1 view .LVU230
 612:segger/rtt/src/SEGGER_RTT.c ****       RdOff = 0u;
 705              		.loc 1 612 23 is_stmt 0 view .LVU231
 706 007c DAF82030 		ldr	r3, [r10, #32]
 612:segger/rtt/src/SEGGER_RTT.c ****       RdOff = 0u;
 707              		.loc 1 612 8 view .LVU232
 708 0080 BB42     		cmp	r3, r7
 709 0082 D1D1     		bne	.L30
 613:segger/rtt/src/SEGGER_RTT.c ****     }
 710              		.loc 1 613 13 view .LVU233
 711 0084 0027     		movs	r7, #0
 712              	.LVL77:
 613:segger/rtt/src/SEGGER_RTT.c ****     }
 713              		.loc 1 613 13 view .LVU234
 714 0086 CFE7     		b	.L30
 715              	.LVL78:
 716              	.L38:
 622:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 717              		.loc 1 622 5 is_stmt 1 view .LVU235
 622:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 718              		.loc 1 622 18 is_stmt 0 view .LVU236
 719 0088 631C     		adds	r3, r4, #1
 720 008a 03EB4303 		add	r3, r3, r3, lsl #1
 721 008e 064A     		ldr	r2, .L39
 722 0090 02EBC303 		add	r3, r2, r3, lsl #3
 723 0094 5968     		ldr	r1, [r3, #4]
ARM GAS  /tmp/ccjFarMV.s 			page 28


 724              	.LVL79:
 631:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 725              		.loc 1 631 5 is_stmt 1 view .LVU237
 726 0096 2A46     		mov	r2, r5
 727 0098 3944     		add	r1, r1, r7
 728              	.LVL80:
 631:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 729              		.loc 1 631 5 is_stmt 0 view .LVU238
 730 009a 4046     		mov	r0, r8
 731 009c FFF7FEFF 		bl	memcpy
 732              	.LVL81:
 632:segger/rtt/src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 733              		.loc 1 632 5 is_stmt 1 view .LVU239
 632:segger/rtt/src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 734              		.loc 1 632 18 is_stmt 0 view .LVU240
 735 00a0 2E44     		add	r6, r6, r5
 736              	.LVL82:
 633:segger/rtt/src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 737              		.loc 1 633 5 is_stmt 1 view .LVU241
 634:segger/rtt/src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 738              		.loc 1 634 5 view .LVU242
 635:segger/rtt/src/SEGGER_RTT.c **** #endif
 739              		.loc 1 635 5 view .LVU243
 635:segger/rtt/src/SEGGER_RTT.c **** #endif
 740              		.loc 1 635 18 is_stmt 0 view .LVU244
 741 00a2 2F44     		add	r7, r7, r5
 742              	.LVL83:
 635:segger/rtt/src/SEGGER_RTT.c **** #endif
 743              		.loc 1 635 18 view .LVU245
 744 00a4 C5E7     		b	.L31
 745              	.L40:
 746 00a6 00BF     		.align	2
 747              	.L39:
 748 00a8 00000000 		.word	_SEGGER_RTT
 749              		.cfi_endproc
 750              	.LFE5:
 752              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 753              		.align	1
 754              		.global	SEGGER_RTT_ReadNoLock
 755              		.syntax unified
 756              		.thumb
 757              		.thumb_func
 759              	SEGGER_RTT_ReadNoLock:
 760              	.LVL84:
 761              	.LFB6:
 647:segger/rtt/src/SEGGER_RTT.c **** 
 648:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 649:segger/rtt/src/SEGGER_RTT.c **** *
 650:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 651:segger/rtt/src/SEGGER_RTT.c **** *
 652:segger/rtt/src/SEGGER_RTT.c **** *  Function description
 653:segger/rtt/src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 654:segger/rtt/src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 655:segger/rtt/src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 656:segger/rtt/src/SEGGER_RTT.c **** *
 657:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
 658:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
ARM GAS  /tmp/ccjFarMV.s 			page 29


 659:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 660:segger/rtt/src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 661:segger/rtt/src/SEGGER_RTT.c **** *
 662:segger/rtt/src/SEGGER_RTT.c **** *  Return value
 663:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 664:segger/rtt/src/SEGGER_RTT.c **** */
 665:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 762              		.loc 1 665 88 is_stmt 1 view -0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              		.loc 1 665 88 is_stmt 0 view .LVU247
 767 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 768              	.LCFI7:
 769              		.cfi_def_cfa_offset 32
 770              		.cfi_offset 4, -32
 771              		.cfi_offset 5, -28
 772              		.cfi_offset 6, -24
 773              		.cfi_offset 7, -20
 774              		.cfi_offset 8, -16
 775              		.cfi_offset 9, -12
 776              		.cfi_offset 10, -8
 777              		.cfi_offset 14, -4
 778 0004 0446     		mov	r4, r0
 779 0006 8846     		mov	r8, r1
 780 0008 9146     		mov	r9, r2
 666:segger/rtt/src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 781              		.loc 1 666 3 is_stmt 1 view .LVU248
 667:segger/rtt/src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 782              		.loc 1 667 3 view .LVU249
 668:segger/rtt/src/SEGGER_RTT.c ****   unsigned                RdOff;
 783              		.loc 1 668 3 view .LVU250
 669:segger/rtt/src/SEGGER_RTT.c ****   unsigned                WrOff;
 784              		.loc 1 669 3 view .LVU251
 670:segger/rtt/src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 785              		.loc 1 670 3 view .LVU252
 671:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 786              		.loc 1 671 3 view .LVU253
 672:segger/rtt/src/SEGGER_RTT.c ****   volatile char*          pSrc;
 787              		.loc 1 672 3 view .LVU254
 673:segger/rtt/src/SEGGER_RTT.c ****   //
 674:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 788              		.loc 1 674 3 view .LVU255
 789              	.LBB4:
 790              		.loc 1 674 3 view .LVU256
 791              		.loc 1 674 3 view .LVU257
 792              	.LVL85:
 793              		.loc 1 674 3 view .LVU258
 794 000a 254B     		ldr	r3, .L52
 795 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 796 000e DBB2     		uxtb	r3, r3
 797 0010 532B     		cmp	r3, #83
 798 0012 18D1     		bne	.L49
 799              	.LVL86:
 800              	.L42:
 801              		.loc 1 674 3 is_stmt 0 view .LVU259
 802              	.LBE4:
ARM GAS  /tmp/ccjFarMV.s 			page 30


 803              		.loc 1 674 3 is_stmt 1 discriminator 3 view .LVU260
 675:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHE
 804              		.loc 1 675 3 view .LVU261
 676:segger/rtt/src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 805              		.loc 1 676 3 view .LVU262
 677:segger/rtt/src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 806              		.loc 1 677 3 view .LVU263
 807              		.loc 1 677 9 is_stmt 0 view .LVU264
 808 0014 04EB4402 		add	r2, r4, r4, lsl #1
 809 0018 214B     		ldr	r3, .L52
 810 001a 03EBC203 		add	r3, r3, r2, lsl #3
 811 001e 1F6F     		ldr	r7, [r3, #112]
 812              	.LVL87:
 678:segger/rtt/src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 813              		.loc 1 678 3 is_stmt 1 view .LVU265
 814              		.loc 1 678 9 is_stmt 0 view .LVU266
 815 0020 DD6E     		ldr	r5, [r3, #108]
 816              	.LVL88:
 679:segger/rtt/src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 817              		.loc 1 679 3 is_stmt 1 view .LVU267
 680:segger/rtt/src/SEGGER_RTT.c ****   //
 681:segger/rtt/src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 682:segger/rtt/src/SEGGER_RTT.c ****   //
 683:segger/rtt/src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 818              		.loc 1 683 3 view .LVU268
 819              		.loc 1 683 6 is_stmt 0 view .LVU269
 820 0022 AF42     		cmp	r7, r5
 821 0024 12D8     		bhi	.L50
 679:segger/rtt/src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 822              		.loc 1 679 16 view .LVU270
 823 0026 0026     		movs	r6, #0
 824              	.LVL89:
 825              	.L43:
 684:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 685:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 686:segger/rtt/src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 687:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 688:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 689:segger/rtt/src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 690:segger/rtt/src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 691:segger/rtt/src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 692:segger/rtt/src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 693:segger/rtt/src/SEGGER_RTT.c ****     };
 694:segger/rtt/src/SEGGER_RTT.c **** #else
 695:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 696:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 697:segger/rtt/src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 698:segger/rtt/src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 699:segger/rtt/src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 700:segger/rtt/src/SEGGER_RTT.c **** #endif
 701:segger/rtt/src/SEGGER_RTT.c ****     //
 702:segger/rtt/src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 703:segger/rtt/src/SEGGER_RTT.c ****     //
 704:segger/rtt/src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 705:segger/rtt/src/SEGGER_RTT.c ****       RdOff = 0u;
 706:segger/rtt/src/SEGGER_RTT.c ****     }
 707:segger/rtt/src/SEGGER_RTT.c ****   }
ARM GAS  /tmp/ccjFarMV.s 			page 31


 708:segger/rtt/src/SEGGER_RTT.c ****   //
 709:segger/rtt/src/SEGGER_RTT.c ****   // Read remaining items of buffer
 710:segger/rtt/src/SEGGER_RTT.c ****   //
 711:segger/rtt/src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 826              		.loc 1 711 3 is_stmt 1 view .LVU271
 827              		.loc 1 711 15 is_stmt 0 view .LVU272
 828 0028 ED1B     		subs	r5, r5, r7
 829              	.LVL90:
 712:segger/rtt/src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 830              		.loc 1 712 3 is_stmt 1 view .LVU273
 831              		.loc 1 712 15 is_stmt 0 view .LVU274
 832 002a 4D45     		cmp	r5, r9
 833 002c 28BF     		it	cs
 834 002e 4D46     		movcs	r5, r9
 835              	.LVL91:
 713:segger/rtt/src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 836              		.loc 1 713 3 is_stmt 1 view .LVU275
 837              		.loc 1 713 6 is_stmt 0 view .LVU276
 838 0030 3DBB     		cbnz	r5, .L51
 839              	.LVL92:
 840              	.L44:
 714:segger/rtt/src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 715:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 716:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 717:segger/rtt/src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 718:segger/rtt/src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 719:segger/rtt/src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 720:segger/rtt/src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 721:segger/rtt/src/SEGGER_RTT.c ****     };
 722:segger/rtt/src/SEGGER_RTT.c **** #else
 723:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 724:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 725:segger/rtt/src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 726:segger/rtt/src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 727:segger/rtt/src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 728:segger/rtt/src/SEGGER_RTT.c **** #endif
 729:segger/rtt/src/SEGGER_RTT.c ****   }
 730:segger/rtt/src/SEGGER_RTT.c ****   if (NumBytesRead) {
 841              		.loc 1 730 3 is_stmt 1 view .LVU277
 842              		.loc 1 730 6 is_stmt 0 view .LVU278
 843 0032 2EB1     		cbz	r6, .L41
 731:segger/rtt/src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 844              		.loc 1 731 5 is_stmt 1 view .LVU279
 845              		.loc 1 731 18 is_stmt 0 view .LVU280
 846 0034 04EB4404 		add	r4, r4, r4, lsl #1
 847              	.LVL93:
 848              		.loc 1 731 18 view .LVU281
 849 0038 194B     		ldr	r3, .L52
 850 003a 03EBC403 		add	r3, r3, r4, lsl #3
 851 003e 1F67     		str	r7, [r3, #112]
 732:segger/rtt/src/SEGGER_RTT.c ****   }
 733:segger/rtt/src/SEGGER_RTT.c ****   //
 734:segger/rtt/src/SEGGER_RTT.c ****   return NumBytesRead;
 852              		.loc 1 734 3 is_stmt 1 view .LVU282
 853              	.L41:
 735:segger/rtt/src/SEGGER_RTT.c **** }
 854              		.loc 1 735 1 is_stmt 0 view .LVU283
ARM GAS  /tmp/ccjFarMV.s 			page 32


 855 0040 3046     		mov	r0, r6
 856 0042 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 857              	.LVL94:
 858              	.L49:
 859              	.LBB5:
 674:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHE
 860              		.loc 1 674 3 is_stmt 1 discriminator 1 view .LVU284
 861 0046 FFF7FEFF 		bl	_DoInit
 862              	.LVL95:
 674:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHE
 863              		.loc 1 674 3 is_stmt 0 discriminator 1 view .LVU285
 864 004a E3E7     		b	.L42
 865              	.LVL96:
 866              	.L50:
 674:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHE
 867              		.loc 1 674 3 discriminator 1 view .LVU286
 868              	.LBE5:
 684:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 869              		.loc 1 684 5 is_stmt 1 view .LVU287
 684:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 870              		.loc 1 684 24 is_stmt 0 view .LVU288
 871 004c 1346     		mov	r3, r2
 872 004e 144A     		ldr	r2, .L52
 873 0050 02EBC30A 		add	r10, r2, r3, lsl #3
 874 0054 DAF86860 		ldr	r6, [r10, #104]
 684:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 875              		.loc 1 684 17 view .LVU289
 876 0058 F61B     		subs	r6, r6, r7
 877              	.LVL97:
 685:segger/rtt/src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 878              		.loc 1 685 5 is_stmt 1 view .LVU290
 685:segger/rtt/src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 879              		.loc 1 685 17 is_stmt 0 view .LVU291
 880 005a 4E45     		cmp	r6, r9
 881 005c 28BF     		it	cs
 882 005e 4E46     		movcs	r6, r9
 883              	.LVL98:
 686:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 884              		.loc 1 686 5 is_stmt 1 view .LVU292
 686:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 885              		.loc 1 686 18 is_stmt 0 view .LVU293
 886 0060 DAF86410 		ldr	r1, [r10, #100]
 887              	.LVL99:
 695:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 888              		.loc 1 695 5 is_stmt 1 view .LVU294
 889 0064 3246     		mov	r2, r6
 890 0066 3944     		add	r1, r1, r7
 891              	.LVL100:
 695:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 892              		.loc 1 695 5 is_stmt 0 view .LVU295
 893 0068 4046     		mov	r0, r8
 894 006a FFF7FEFF 		bl	memcpy
 895              	.LVL101:
 696:segger/rtt/src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 896              		.loc 1 696 5 is_stmt 1 view .LVU296
 697:segger/rtt/src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 897              		.loc 1 697 5 view .LVU297
ARM GAS  /tmp/ccjFarMV.s 			page 33


 697:segger/rtt/src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 898              		.loc 1 697 18 is_stmt 0 view .LVU298
 899 006e B044     		add	r8, r8, r6
 900              	.LVL102:
 698:segger/rtt/src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 901              		.loc 1 698 5 is_stmt 1 view .LVU299
 698:segger/rtt/src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 902              		.loc 1 698 18 is_stmt 0 view .LVU300
 903 0070 A9EB0609 		sub	r9, r9, r6
 904              	.LVL103:
 699:segger/rtt/src/SEGGER_RTT.c **** #endif
 905              		.loc 1 699 5 is_stmt 1 view .LVU301
 699:segger/rtt/src/SEGGER_RTT.c **** #endif
 906              		.loc 1 699 18 is_stmt 0 view .LVU302
 907 0074 3744     		add	r7, r7, r6
 908              	.LVL104:
 704:segger/rtt/src/SEGGER_RTT.c ****       RdOff = 0u;
 909              		.loc 1 704 5 is_stmt 1 view .LVU303
 704:segger/rtt/src/SEGGER_RTT.c ****       RdOff = 0u;
 910              		.loc 1 704 23 is_stmt 0 view .LVU304
 911 0076 DAF86830 		ldr	r3, [r10, #104]
 704:segger/rtt/src/SEGGER_RTT.c ****       RdOff = 0u;
 912              		.loc 1 704 8 view .LVU305
 913 007a BB42     		cmp	r3, r7
 914 007c D4D1     		bne	.L43
 705:segger/rtt/src/SEGGER_RTT.c ****     }
 915              		.loc 1 705 13 view .LVU306
 916 007e 0027     		movs	r7, #0
 917              	.LVL105:
 705:segger/rtt/src/SEGGER_RTT.c ****     }
 918              		.loc 1 705 13 view .LVU307
 919 0080 D2E7     		b	.L43
 920              	.LVL106:
 921              	.L51:
 714:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 922              		.loc 1 714 5 is_stmt 1 view .LVU308
 714:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 923              		.loc 1 714 18 is_stmt 0 view .LVU309
 924 0082 04EB4402 		add	r2, r4, r4, lsl #1
 925 0086 064B     		ldr	r3, .L52
 926 0088 03EBC203 		add	r3, r3, r2, lsl #3
 927 008c 596E     		ldr	r1, [r3, #100]
 928              	.LVL107:
 723:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 929              		.loc 1 723 5 is_stmt 1 view .LVU310
 930 008e 2A46     		mov	r2, r5
 931 0090 3944     		add	r1, r1, r7
 932              	.LVL108:
 723:segger/rtt/src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 933              		.loc 1 723 5 is_stmt 0 view .LVU311
 934 0092 4046     		mov	r0, r8
 935 0094 FFF7FEFF 		bl	memcpy
 936              	.LVL109:
 724:segger/rtt/src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 937              		.loc 1 724 5 is_stmt 1 view .LVU312
 724:segger/rtt/src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 938              		.loc 1 724 18 is_stmt 0 view .LVU313
ARM GAS  /tmp/ccjFarMV.s 			page 34


 939 0098 2E44     		add	r6, r6, r5
 940              	.LVL110:
 725:segger/rtt/src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 941              		.loc 1 725 5 is_stmt 1 view .LVU314
 726:segger/rtt/src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 942              		.loc 1 726 5 view .LVU315
 727:segger/rtt/src/SEGGER_RTT.c **** #endif
 943              		.loc 1 727 5 view .LVU316
 727:segger/rtt/src/SEGGER_RTT.c **** #endif
 944              		.loc 1 727 18 is_stmt 0 view .LVU317
 945 009a 2F44     		add	r7, r7, r5
 946              	.LVL111:
 727:segger/rtt/src/SEGGER_RTT.c **** #endif
 947              		.loc 1 727 18 view .LVU318
 948 009c C9E7     		b	.L44
 949              	.L53:
 950 009e 00BF     		.align	2
 951              	.L52:
 952 00a0 00000000 		.word	_SEGGER_RTT
 953              		.cfi_endproc
 954              	.LFE6:
 956              		.section	.text.SEGGER_RTT_ReadUpBuffer,"ax",%progbits
 957              		.align	1
 958              		.global	SEGGER_RTT_ReadUpBuffer
 959              		.syntax unified
 960              		.thumb
 961              		.thumb_func
 963              	SEGGER_RTT_ReadUpBuffer:
 964              	.LVL112:
 965              	.LFB7:
 736:segger/rtt/src/SEGGER_RTT.c **** 
 737:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 738:segger/rtt/src/SEGGER_RTT.c **** *
 739:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBuffer
 740:segger/rtt/src/SEGGER_RTT.c **** *
 741:segger/rtt/src/SEGGER_RTT.c **** *  Function description
 742:segger/rtt/src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 743:segger/rtt/src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 744:segger/rtt/src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer
 745:segger/rtt/src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 746:segger/rtt/src/SEGGER_RTT.c **** *
 747:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
 748:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 749:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 750:segger/rtt/src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 751:segger/rtt/src/SEGGER_RTT.c **** *
 752:segger/rtt/src/SEGGER_RTT.c **** *  Return value
 753:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 754:segger/rtt/src/SEGGER_RTT.c **** *
 755:segger/rtt/src/SEGGER_RTT.c **** *  Additional information
 756:segger/rtt/src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 757:segger/rtt/src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
 758:segger/rtt/src/SEGGER_RTT.c **** *    the read operation, writing is also locked.
 759:segger/rtt/src/SEGGER_RTT.c **** *    If only one consumer reads from the up buffer,
 760:segger/rtt/src/SEGGER_RTT.c **** *    call sEGGER_RTT_ReadUpBufferNoLock() instead.
 761:segger/rtt/src/SEGGER_RTT.c **** */
 762:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
ARM GAS  /tmp/ccjFarMV.s 			page 35


 966              		.loc 1 762 92 is_stmt 1 view -0
 967              		.cfi_startproc
 968              		@ args = 0, pretend = 0, frame = 0
 969              		@ frame_needed = 0, uses_anonymous_args = 0
 970              		.loc 1 762 92 is_stmt 0 view .LVU320
 971 0000 10B5     		push	{r4, lr}
 972              	.LCFI8:
 973              		.cfi_def_cfa_offset 8
 974              		.cfi_offset 4, -8
 975              		.cfi_offset 14, -4
 976 0002 0B46     		mov	r3, r1
 763:segger/rtt/src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 977              		.loc 1 763 3 is_stmt 1 view .LVU321
 978              	.LBB6:
 764:segger/rtt/src/SEGGER_RTT.c **** 
 765:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 979              		.loc 1 765 3 view .LVU322
 980              		.loc 1 765 3 view .LVU323
 981              		.syntax unified
 982              	@ 765 "segger/rtt/src/SEGGER_RTT.c" 1
 983 0004 EFF31184 		mrs   r4, basepri  
 984 0008 4FF02001 		mov   r1, #32       
 985 000c 81F31188 		msr   basepri, r1  
 986              		
 987              	@ 0 "" 2
 988              	.LVL113:
 989              		.loc 1 765 20 view .LVU324
 766:segger/rtt/src/SEGGER_RTT.c ****   //
 767:segger/rtt/src/SEGGER_RTT.c ****   // Call the non-locking read function
 768:segger/rtt/src/SEGGER_RTT.c ****   //
 769:segger/rtt/src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
 990              		.loc 1 769 3 view .LVU325
 991              		.loc 1 769 18 is_stmt 0 view .LVU326
 992              		.thumb
 993              		.syntax unified
 994 0010 1946     		mov	r1, r3
 995 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadUpBufferNoLock
 996              	.LVL114:
 770:segger/rtt/src/SEGGER_RTT.c ****   //
 771:segger/rtt/src/SEGGER_RTT.c ****   // Finish up.
 772:segger/rtt/src/SEGGER_RTT.c ****   //
 773:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 997              		.loc 1 773 3 is_stmt 1 view .LVU327
 998              		.syntax unified
 999              	@ 773 "segger/rtt/src/SEGGER_RTT.c" 1
 1000 0016 84F31188 		msr   basepri, r4  
 1001              		
 1002              	@ 0 "" 2
 1003              		.thumb
 1004              		.syntax unified
 1005              	.LBE6:
 1006              		.loc 1 773 22 view .LVU328
 774:segger/rtt/src/SEGGER_RTT.c ****   //
 775:segger/rtt/src/SEGGER_RTT.c ****   return NumBytesRead;
 1007              		.loc 1 775 3 view .LVU329
 776:segger/rtt/src/SEGGER_RTT.c **** }
 1008              		.loc 1 776 1 is_stmt 0 view .LVU330
ARM GAS  /tmp/ccjFarMV.s 			page 36


 1009 001a 10BD     		pop	{r4, pc}
 1010              		.loc 1 776 1 view .LVU331
 1011              		.cfi_endproc
 1012              	.LFE7:
 1014              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 1015              		.align	1
 1016              		.global	SEGGER_RTT_Read
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1021              	SEGGER_RTT_Read:
 1022              	.LVL115:
 1023              	.LFB8:
 777:segger/rtt/src/SEGGER_RTT.c **** 
 778:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 779:segger/rtt/src/SEGGER_RTT.c **** *
 780:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 781:segger/rtt/src/SEGGER_RTT.c **** *
 782:segger/rtt/src/SEGGER_RTT.c **** *  Function description
 783:segger/rtt/src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 784:segger/rtt/src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 785:segger/rtt/src/SEGGER_RTT.c **** *
 786:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
 787:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 788:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 789:segger/rtt/src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 790:segger/rtt/src/SEGGER_RTT.c **** *
 791:segger/rtt/src/SEGGER_RTT.c **** *  Return value
 792:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 793:segger/rtt/src/SEGGER_RTT.c **** */
 794:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 1024              		.loc 1 794 84 is_stmt 1 view -0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 0
 1027              		@ frame_needed = 0, uses_anonymous_args = 0
 1028              		.loc 1 794 84 is_stmt 0 view .LVU333
 1029 0000 10B5     		push	{r4, lr}
 1030              	.LCFI9:
 1031              		.cfi_def_cfa_offset 8
 1032              		.cfi_offset 4, -8
 1033              		.cfi_offset 14, -4
 1034 0002 0B46     		mov	r3, r1
 795:segger/rtt/src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 1035              		.loc 1 795 3 is_stmt 1 view .LVU334
 1036              	.LBB7:
 796:segger/rtt/src/SEGGER_RTT.c **** 
 797:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1037              		.loc 1 797 3 view .LVU335
 1038              		.loc 1 797 3 view .LVU336
 1039              		.syntax unified
 1040              	@ 797 "segger/rtt/src/SEGGER_RTT.c" 1
 1041 0004 EFF31184 		mrs   r4, basepri  
 1042 0008 4FF02001 		mov   r1, #32       
 1043 000c 81F31188 		msr   basepri, r1  
 1044              		
 1045              	@ 0 "" 2
 1046              	.LVL116:
ARM GAS  /tmp/ccjFarMV.s 			page 37


 1047              		.loc 1 797 20 view .LVU337
 798:segger/rtt/src/SEGGER_RTT.c ****   //
 799:segger/rtt/src/SEGGER_RTT.c ****   // Call the non-locking read function
 800:segger/rtt/src/SEGGER_RTT.c ****   //
 801:segger/rtt/src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 1048              		.loc 1 801 3 view .LVU338
 1049              		.loc 1 801 18 is_stmt 0 view .LVU339
 1050              		.thumb
 1051              		.syntax unified
 1052 0010 1946     		mov	r1, r3
 1053 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 1054              	.LVL117:
 802:segger/rtt/src/SEGGER_RTT.c ****   //
 803:segger/rtt/src/SEGGER_RTT.c ****   // Finish up.
 804:segger/rtt/src/SEGGER_RTT.c ****   //
 805:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1055              		.loc 1 805 3 is_stmt 1 view .LVU340
 1056              		.syntax unified
 1057              	@ 805 "segger/rtt/src/SEGGER_RTT.c" 1
 1058 0016 84F31188 		msr   basepri, r4  
 1059              		
 1060              	@ 0 "" 2
 1061              		.thumb
 1062              		.syntax unified
 1063              	.LBE7:
 1064              		.loc 1 805 22 view .LVU341
 806:segger/rtt/src/SEGGER_RTT.c ****   //
 807:segger/rtt/src/SEGGER_RTT.c ****   return NumBytesRead;
 1065              		.loc 1 807 3 view .LVU342
 808:segger/rtt/src/SEGGER_RTT.c **** }
 1066              		.loc 1 808 1 is_stmt 0 view .LVU343
 1067 001a 10BD     		pop	{r4, pc}
 1068              		.loc 1 808 1 view .LVU344
 1069              		.cfi_endproc
 1070              	.LFE8:
 1072              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 1073              		.align	1
 1074              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 1075              		.syntax unified
 1076              		.thumb
 1077              		.thumb_func
 1079              	SEGGER_RTT_WriteWithOverwriteNoLock:
 1080              	.LVL118:
 1081              	.LFB9:
 809:segger/rtt/src/SEGGER_RTT.c **** 
 810:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 811:segger/rtt/src/SEGGER_RTT.c **** *
 812:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 813:segger/rtt/src/SEGGER_RTT.c **** *
 814:segger/rtt/src/SEGGER_RTT.c **** *  Function description
 815:segger/rtt/src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 816:segger/rtt/src/SEGGER_RTT.c **** *    control block.
 817:segger/rtt/src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application
 818:segger/rtt/src/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 819:segger/rtt/src/SEGGER_RTT.c **** *
 820:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
 821:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
ARM GAS  /tmp/ccjFarMV.s 			page 38


 822:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 823:segger/rtt/src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 824:segger/rtt/src/SEGGER_RTT.c **** *
 825:segger/rtt/src/SEGGER_RTT.c **** *  Notes
 826:segger/rtt/src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 827:segger/rtt/src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 828:segger/rtt/src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 829:segger/rtt/src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 830:segger/rtt/src/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link
 831:segger/rtt/src/SEGGER_RTT.c **** *        connection reads RTT data.
 832:segger/rtt/src/SEGGER_RTT.c **** */
 833:segger/rtt/src/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 1082              		.loc 1 833 104 is_stmt 1 view -0
 1083              		.cfi_startproc
 1084              		@ args = 0, pretend = 0, frame = 0
 1085              		@ frame_needed = 0, uses_anonymous_args = 0
 1086              		.loc 1 833 104 is_stmt 0 view .LVU346
 1087 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1088              	.LCFI10:
 1089              		.cfi_def_cfa_offset 32
 1090              		.cfi_offset 3, -32
 1091              		.cfi_offset 4, -28
 1092              		.cfi_offset 5, -24
 1093              		.cfi_offset 6, -20
 1094              		.cfi_offset 7, -16
 1095              		.cfi_offset 8, -12
 1096              		.cfi_offset 9, -8
 1097              		.cfi_offset 14, -4
 1098 0004 0646     		mov	r6, r0
 1099 0006 8846     		mov	r8, r1
 1100 0008 1746     		mov	r7, r2
 834:segger/rtt/src/SEGGER_RTT.c ****   const char*           pData;
 1101              		.loc 1 834 3 is_stmt 1 view .LVU347
 835:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1102              		.loc 1 835 3 view .LVU348
 836:segger/rtt/src/SEGGER_RTT.c ****   unsigned              Avail;
 1103              		.loc 1 836 3 view .LVU349
 837:segger/rtt/src/SEGGER_RTT.c ****   volatile char*        pDst;
 1104              		.loc 1 837 3 view .LVU350
 838:segger/rtt/src/SEGGER_RTT.c ****   //
 839:segger/rtt/src/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 840:segger/rtt/src/SEGGER_RTT.c ****   //
 841:segger/rtt/src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1105              		.loc 1 841 3 view .LVU351
 1106              	.LVL119:
 842:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 1107              		.loc 1 842 3 view .LVU352
 843:segger/rtt/src/SEGGER_RTT.c ****   //
 844:segger/rtt/src/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 845:segger/rtt/src/SEGGER_RTT.c ****   //
 846:segger/rtt/src/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 1108              		.loc 1 846 3 view .LVU353
 1109              		.loc 1 846 12 is_stmt 0 view .LVU354
 1110 000a 00EB4002 		add	r2, r0, r0, lsl #1
 1111              	.LVL120:
 1112              		.loc 1 846 12 view .LVU355
 1113 000e 404B     		ldr	r3, .L71
ARM GAS  /tmp/ccjFarMV.s 			page 39


 1114 0010 03EBC203 		add	r3, r3, r2, lsl #3
 1115 0014 596A     		ldr	r1, [r3, #36]
 1116              	.LVL121:
 1117              		.loc 1 846 28 view .LVU356
 1118 0016 9B6A     		ldr	r3, [r3, #40]
 1119              		.loc 1 846 6 view .LVU357
 1120 0018 9942     		cmp	r1, r3
 1121 001a 0ED0     		beq	.L69
 847:segger/rtt/src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 848:segger/rtt/src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1122              		.loc 1 848 10 is_stmt 1 view .LVU358
 1123              		.loc 1 848 35 is_stmt 0 view .LVU359
 1124 001c 00EB4002 		add	r2, r0, r0, lsl #1
 1125 0020 3B4B     		ldr	r3, .L71
 1126 0022 03EBC203 		add	r3, r3, r2, lsl #3
 1127 0026 9B6A     		ldr	r3, [r3, #40]
 1128              		.loc 1 848 13 view .LVU360
 1129 0028 9942     		cmp	r1, r3
 1130 002a 17D2     		bcs	.L61
 849:segger/rtt/src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1131              		.loc 1 849 5 is_stmt 1 view .LVU361
 1132              		.loc 1 849 18 is_stmt 0 view .LVU362
 1133 002c 384B     		ldr	r3, .L71
 1134 002e 03EBC203 		add	r3, r3, r2, lsl #3
 1135 0032 9B6A     		ldr	r3, [r3, #40]
 1136              		.loc 1 849 26 view .LVU363
 1137 0034 5B1A     		subs	r3, r3, r1
 1138              		.loc 1 849 11 view .LVU364
 1139 0036 013B     		subs	r3, r3, #1
 1140              	.LVL122:
 1141              		.loc 1 849 11 view .LVU365
 1142 0038 04E0     		b	.L60
 1143              	.LVL123:
 1144              	.L69:
 847:segger/rtt/src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1145              		.loc 1 847 5 is_stmt 1 view .LVU366
 847:segger/rtt/src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1146              		.loc 1 847 18 is_stmt 0 view .LVU367
 1147 003a 354B     		ldr	r3, .L71
 1148 003c 03EBC203 		add	r3, r3, r2, lsl #3
 1149 0040 1B6A     		ldr	r3, [r3, #32]
 847:segger/rtt/src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1150              		.loc 1 847 11 view .LVU368
 1151 0042 013B     		subs	r3, r3, #1
 1152              	.LVL124:
 1153              	.L60:
 850:segger/rtt/src/SEGGER_RTT.c ****   } else {
 851:segger/rtt/src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 852:segger/rtt/src/SEGGER_RTT.c ****   }
 853:segger/rtt/src/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 1154              		.loc 1 853 3 is_stmt 1 view .LVU369
 1155              		.loc 1 853 6 is_stmt 0 view .LVU370
 1156 0044 BB42     		cmp	r3, r7
 1157 0046 25D2     		bcs	.L62
 854:segger/rtt/src/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 1158              		.loc 1 854 5 is_stmt 1 view .LVU371
 1159              		.loc 1 854 10 is_stmt 0 view .LVU372
ARM GAS  /tmp/ccjFarMV.s 			page 40


 1160 0048 06EB4600 		add	r0, r6, r6, lsl #1
 1161              	.LVL125:
 1162              		.loc 1 854 10 view .LVU373
 1163 004c 304A     		ldr	r2, .L71
 1164 004e 02EBC002 		add	r2, r2, r0, lsl #3
 1165 0052 906A     		ldr	r0, [r2, #40]
 1166              		.loc 1 854 31 view .LVU374
 1167 0054 FB1A     		subs	r3, r7, r3
 1168              	.LVL126:
 1169              		.loc 1 854 18 view .LVU375
 1170 0056 0344     		add	r3, r3, r0
 1171 0058 9362     		str	r3, [r2, #40]
 855:segger/rtt/src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1172              		.loc 1 855 5 is_stmt 1 view .LVU376
 1173              		.loc 1 855 11 is_stmt 0 view .LVU377
 1174 005a 12E0     		b	.L63
 1175              	.LVL127:
 1176              	.L61:
 851:segger/rtt/src/SEGGER_RTT.c ****   }
 1177              		.loc 1 851 5 is_stmt 1 view .LVU378
 851:segger/rtt/src/SEGGER_RTT.c ****   }
 1178              		.loc 1 851 18 is_stmt 0 view .LVU379
 1179 005c 00EB4003 		add	r3, r0, r0, lsl #1
 1180 0060 2B4A     		ldr	r2, .L71
 1181 0062 02EBC302 		add	r2, r2, r3, lsl #3
 1182 0066 936A     		ldr	r3, [r2, #40]
 851:segger/rtt/src/SEGGER_RTT.c ****   }
 1183              		.loc 1 851 26 view .LVU380
 1184 0068 5B1A     		subs	r3, r3, r1
 851:segger/rtt/src/SEGGER_RTT.c ****   }
 1185              		.loc 1 851 53 view .LVU381
 1186 006a 126A     		ldr	r2, [r2, #32]
 851:segger/rtt/src/SEGGER_RTT.c ****   }
 1187              		.loc 1 851 46 view .LVU382
 1188 006c 1344     		add	r3, r3, r2
 851:segger/rtt/src/SEGGER_RTT.c ****   }
 1189              		.loc 1 851 11 view .LVU383
 1190 006e 013B     		subs	r3, r3, #1
 1191              	.LVL128:
 851:segger/rtt/src/SEGGER_RTT.c ****   }
 1192              		.loc 1 851 11 view .LVU384
 1193 0070 E8E7     		b	.L60
 1194              	.LVL129:
 1195              	.L64:
 856:segger/rtt/src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1196              		.loc 1 856 7 is_stmt 1 view .LVU385
 1197              		.loc 1 856 12 is_stmt 0 view .LVU386
 1198 0072 06EB4602 		add	r2, r6, r6, lsl #1
 1199 0076 264B     		ldr	r3, .L71
 1200 0078 03EBC203 		add	r3, r3, r2, lsl #3
 1201 007c 9A6A     		ldr	r2, [r3, #40]
 1202              		.loc 1 856 20 view .LVU387
 1203 007e 121A     		subs	r2, r2, r0
 1204 0080 9A62     		str	r2, [r3, #40]
 1205              	.L63:
 855:segger/rtt/src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1206              		.loc 1 855 25 is_stmt 1 view .LVU388
ARM GAS  /tmp/ccjFarMV.s 			page 41


 855:segger/rtt/src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1207              		.loc 1 855 17 is_stmt 0 view .LVU389
 1208 0082 06EB4602 		add	r2, r6, r6, lsl #1
 1209 0086 224B     		ldr	r3, .L71
 1210 0088 03EBC203 		add	r3, r3, r2, lsl #3
 1211 008c 9A6A     		ldr	r2, [r3, #40]
 855:segger/rtt/src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1212              		.loc 1 855 33 view .LVU390
 1213 008e 186A     		ldr	r0, [r3, #32]
 855:segger/rtt/src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1214              		.loc 1 855 25 view .LVU391
 1215 0090 8242     		cmp	r2, r0
 1216 0092 EED2     		bcs	.L64
 1217              	.L62:
 857:segger/rtt/src/SEGGER_RTT.c ****     }
 858:segger/rtt/src/SEGGER_RTT.c ****   }
 859:segger/rtt/src/SEGGER_RTT.c ****   //
 860:segger/rtt/src/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 861:segger/rtt/src/SEGGER_RTT.c ****   //
 862:segger/rtt/src/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 1218              		.loc 1 862 3 is_stmt 1 view .LVU392
 1219              		.loc 1 862 16 is_stmt 0 view .LVU393
 1220 0094 06EB4602 		add	r2, r6, r6, lsl #1
 1221 0098 1D4B     		ldr	r3, .L71
 1222 009a 03EBC203 		add	r3, r3, r2, lsl #3
 1223 009e 1C6A     		ldr	r4, [r3, #32]
 1224              		.loc 1 862 9 view .LVU394
 1225 00a0 641A     		subs	r4, r4, r1
 1226              	.LVL130:
 1227              	.L67:
 863:segger/rtt/src/SEGGER_RTT.c ****   do {
 1228              		.loc 1 863 3 is_stmt 1 view .LVU395
 864:segger/rtt/src/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 1229              		.loc 1 864 5 view .LVU396
 1230              		.loc 1 864 8 is_stmt 0 view .LVU397
 1231 00a2 A742     		cmp	r7, r4
 1232 00a4 1BD3     		bcc	.L70
 865:segger/rtt/src/SEGGER_RTT.c ****       //
 866:segger/rtt/src/SEGGER_RTT.c ****       // Last round
 867:segger/rtt/src/SEGGER_RTT.c ****       //
 868:segger/rtt/src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 869:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 870:segger/rtt/src/SEGGER_RTT.c ****       Avail = NumBytes;
 871:segger/rtt/src/SEGGER_RTT.c ****       while (NumBytes--) {
 872:segger/rtt/src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 873:segger/rtt/src/SEGGER_RTT.c ****       };
 874:segger/rtt/src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 875:segger/rtt/src/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 876:segger/rtt/src/SEGGER_RTT.c **** #else
 877:segger/rtt/src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 878:segger/rtt/src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 879:segger/rtt/src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 880:segger/rtt/src/SEGGER_RTT.c **** #endif
 881:segger/rtt/src/SEGGER_RTT.c ****       break;
 882:segger/rtt/src/SEGGER_RTT.c ****     } else {
 883:segger/rtt/src/SEGGER_RTT.c ****       //
 884:segger/rtt/src/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
ARM GAS  /tmp/ccjFarMV.s 			page 42


 885:segger/rtt/src/SEGGER_RTT.c ****       //
 886:segger/rtt/src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1233              		.loc 1 886 7 is_stmt 1 view .LVU398
 1234              		.loc 1 886 20 is_stmt 0 view .LVU399
 1235 00a6 1A4D     		ldr	r5, .L71
 1236 00a8 731C     		adds	r3, r6, #1
 1237 00aa 03EB4303 		add	r3, r3, r3, lsl #1
 1238 00ae 05EBC303 		add	r3, r5, r3, lsl #3
 1239 00b2 5868     		ldr	r0, [r3, #4]
 1240              		.loc 1 886 37 view .LVU400
 1241 00b4 06EB4603 		add	r3, r6, r6, lsl #1
 1242 00b8 05EBC305 		add	r5, r5, r3, lsl #3
 1243 00bc 6B6A     		ldr	r3, [r5, #36]
 1244              	.LVL131:
 887:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 888:segger/rtt/src/SEGGER_RTT.c ****       NumBytes -= Avail;
 889:segger/rtt/src/SEGGER_RTT.c ****       while (Avail--) {
 890:segger/rtt/src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 891:segger/rtt/src/SEGGER_RTT.c ****       };
 892:segger/rtt/src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 893:segger/rtt/src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 894:segger/rtt/src/SEGGER_RTT.c **** #else
 895:segger/rtt/src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, Avail);
 1245              		.loc 1 895 7 is_stmt 1 view .LVU401
 1246 00be 2246     		mov	r2, r4
 1247 00c0 4146     		mov	r1, r8
 1248 00c2 1844     		add	r0, r0, r3
 1249              	.LVL132:
 1250              		.loc 1 895 7 is_stmt 0 view .LVU402
 1251 00c4 FFF7FEFF 		bl	memcpy
 1252              	.LVL133:
 896:segger/rtt/src/SEGGER_RTT.c ****       pData += Avail;
 1253              		.loc 1 896 7 is_stmt 1 view .LVU403
 1254              		.loc 1 896 13 is_stmt 0 view .LVU404
 1255 00c8 A044     		add	r8, r8, r4
 1256              	.LVL134:
 897:segger/rtt/src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1257              		.loc 1 897 7 is_stmt 1 view .LVU405
 1258              		.syntax unified
 1259              	@ 897 "segger/rtt/src/SEGGER_RTT.c" 1
 1260 00ca BFF35F8F 		dmb
 1261              	
 1262              	@ 0 "" 2
 1263              		.loc 1 897 17 view .LVU406
 898:segger/rtt/src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1264              		.loc 1 898 7 view .LVU407
 1265              		.loc 1 898 20 is_stmt 0 view .LVU408
 1266              		.thumb
 1267              		.syntax unified
 1268 00ce 0023     		movs	r3, #0
 1269 00d0 6B62     		str	r3, [r5, #36]
 899:segger/rtt/src/SEGGER_RTT.c ****       NumBytes -= Avail;
 1270              		.loc 1 899 7 is_stmt 1 view .LVU409
 1271              		.loc 1 899 16 is_stmt 0 view .LVU410
 1272 00d2 3F1B     		subs	r7, r7, r4
 1273              	.LVL135:
 900:segger/rtt/src/SEGGER_RTT.c **** #endif
ARM GAS  /tmp/ccjFarMV.s 			page 43


 901:segger/rtt/src/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 1274              		.loc 1 901 7 is_stmt 1 view .LVU411
 1275              		.loc 1 901 21 is_stmt 0 view .LVU412
 1276 00d4 2C6A     		ldr	r4, [r5, #32]
 1277              	.LVL136:
 1278              		.loc 1 901 13 view .LVU413
 1279 00d6 013C     		subs	r4, r4, #1
 1280              	.LVL137:
 902:segger/rtt/src/SEGGER_RTT.c ****     }
 903:segger/rtt/src/SEGGER_RTT.c ****   } while (NumBytes);
 1281              		.loc 1 903 12 is_stmt 1 view .LVU414
 1282 00d8 002F     		cmp	r7, #0
 1283 00da E2D1     		bne	.L67
 1284 00dc 15E0     		b	.L58
 1285              	.LVL138:
 1286              	.L70:
 868:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1287              		.loc 1 868 7 view .LVU415
 868:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1288              		.loc 1 868 20 is_stmt 0 view .LVU416
 1289 00de 0C4C     		ldr	r4, .L71
 1290              	.LVL139:
 868:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1291              		.loc 1 868 20 view .LVU417
 1292 00e0 731C     		adds	r3, r6, #1
 1293 00e2 03EB4303 		add	r3, r3, r3, lsl #1
 1294 00e6 04EBC303 		add	r3, r4, r3, lsl #3
 1295 00ea 5868     		ldr	r0, [r3, #4]
 868:segger/rtt/src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1296              		.loc 1 868 37 view .LVU418
 1297 00ec 06EB4605 		add	r5, r6, r6, lsl #1
 1298 00f0 04EBC505 		add	r5, r4, r5, lsl #3
 1299 00f4 6B6A     		ldr	r3, [r5, #36]
 1300              	.LVL140:
 877:segger/rtt/src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1301              		.loc 1 877 7 is_stmt 1 view .LVU419
 1302 00f6 3A46     		mov	r2, r7
 1303 00f8 4146     		mov	r1, r8
 1304 00fa 1844     		add	r0, r0, r3
 1305              	.LVL141:
 877:segger/rtt/src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1306              		.loc 1 877 7 is_stmt 0 view .LVU420
 1307 00fc FFF7FEFF 		bl	memcpy
 1308              	.LVL142:
 878:segger/rtt/src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1309              		.loc 1 878 7 is_stmt 1 view .LVU421
 1310              		.syntax unified
 1311              	@ 878 "segger/rtt/src/SEGGER_RTT.c" 1
 1312 0100 BFF35F8F 		dmb
 1313              	
 1314              	@ 0 "" 2
 878:segger/rtt/src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1315              		.loc 1 878 17 view .LVU422
 879:segger/rtt/src/SEGGER_RTT.c **** #endif
 1316              		.loc 1 879 7 view .LVU423
 879:segger/rtt/src/SEGGER_RTT.c **** #endif
 1317              		.loc 1 879 12 is_stmt 0 view .LVU424
ARM GAS  /tmp/ccjFarMV.s 			page 44


 1318              		.thumb
 1319              		.syntax unified
 1320 0104 6B6A     		ldr	r3, [r5, #36]
 879:segger/rtt/src/SEGGER_RTT.c **** #endif
 1321              		.loc 1 879 20 view .LVU425
 1322 0106 3B44     		add	r3, r3, r7
 1323 0108 6B62     		str	r3, [r5, #36]
 881:segger/rtt/src/SEGGER_RTT.c ****     } else {
 1324              		.loc 1 881 7 is_stmt 1 view .LVU426
 1325              	.LVL143:
 1326              	.L58:
 904:segger/rtt/src/SEGGER_RTT.c **** }
 1327              		.loc 1 904 1 is_stmt 0 view .LVU427
 1328 010a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1329              	.LVL144:
 1330              	.L72:
 1331              		.loc 1 904 1 view .LVU428
 1332 010e 00BF     		.align	2
 1333              	.L71:
 1334 0110 00000000 		.word	_SEGGER_RTT
 1335              		.cfi_endproc
 1336              	.LFE9:
 1338              		.section	.text.SEGGER_RTT_WriteDownBufferNoLock,"ax",%progbits
 1339              		.align	1
 1340              		.global	SEGGER_RTT_WriteDownBufferNoLock
 1341              		.syntax unified
 1342              		.thumb
 1343              		.thumb_func
 1345              	SEGGER_RTT_WriteDownBufferNoLock:
 1346              	.LVL145:
 1347              	.LFB10:
 905:segger/rtt/src/SEGGER_RTT.c **** 
 906:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 907:segger/rtt/src/SEGGER_RTT.c **** *
 908:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 909:segger/rtt/src/SEGGER_RTT.c **** *
 910:segger/rtt/src/SEGGER_RTT.c **** *  Function description
 911:segger/rtt/src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 912:segger/rtt/src/SEGGER_RTT.c **** *    control block which is then read by the host.
 913:segger/rtt/src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 914:segger/rtt/src/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 915:segger/rtt/src/SEGGER_RTT.c **** *
 916:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
 917:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 918:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 919:segger/rtt/src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 920:segger/rtt/src/SEGGER_RTT.c **** *                 MUST be > 0!!!
 921:segger/rtt/src/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 922:segger/rtt/src/SEGGER_RTT.c **** *
 923:segger/rtt/src/SEGGER_RTT.c **** *  Return value
 924:segger/rtt/src/SEGGER_RTT.c **** *    1: Data has been copied
 925:segger/rtt/src/SEGGER_RTT.c **** *    0: No space, data has not been copied
 926:segger/rtt/src/SEGGER_RTT.c **** *
 927:segger/rtt/src/SEGGER_RTT.c **** *  Notes
 928:segger/rtt/src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 929:segger/rtt/src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 930:segger/rtt/src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
ARM GAS  /tmp/ccjFarMV.s 			page 45


 931:segger/rtt/src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 932:segger/rtt/src/SEGGER_RTT.c **** */
 933:segger/rtt/src/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 934:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 935:segger/rtt/src/SEGGER_RTT.c ****   const char*           pData;
 936:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 937:segger/rtt/src/SEGGER_RTT.c ****   unsigned              Avail;
 938:segger/rtt/src/SEGGER_RTT.c ****   unsigned              RdOff;
 939:segger/rtt/src/SEGGER_RTT.c ****   unsigned              WrOff;
 940:segger/rtt/src/SEGGER_RTT.c ****   unsigned              Rem;
 941:segger/rtt/src/SEGGER_RTT.c ****   volatile char*        pDst;
 942:segger/rtt/src/SEGGER_RTT.c ****   //
 943:segger/rtt/src/SEGGER_RTT.c ****   // Cases:
 944:segger/rtt/src/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 945:segger/rtt/src/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 946:segger/rtt/src/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 947:segger/rtt/src/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 948:segger/rtt/src/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 949:segger/rtt/src/SEGGER_RTT.c ****   //
 950:segger/rtt/src/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 951:segger/rtt/src/SEGGER_RTT.c ****   //
 952:segger/rtt/src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 953:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 954:segger/rtt/src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 955:segger/rtt/src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 956:segger/rtt/src/SEGGER_RTT.c ****   pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 957:segger/rtt/src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 958:segger/rtt/src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 959:segger/rtt/src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 960:segger/rtt/src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
 961:segger/rtt/src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 962:segger/rtt/src/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 963:segger/rtt/src/SEGGER_RTT.c ****       return 1;
 964:segger/rtt/src/SEGGER_RTT.c ****     }
 965:segger/rtt/src/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 966:segger/rtt/src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 967:segger/rtt/src/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 968:segger/rtt/src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 969:segger/rtt/src/SEGGER_RTT.c ****       NumBytes -= Rem;
 970:segger/rtt/src/SEGGER_RTT.c ****       //
 971:segger/rtt/src/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 972:segger/rtt/src/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 973:segger/rtt/src/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 974:segger/rtt/src/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 975:segger/rtt/src/SEGGER_RTT.c ****       //
 976:segger/rtt/src/SEGGER_RTT.c ****       if (NumBytes) {
 977:segger/rtt/src/SEGGER_RTT.c ****         pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 978:segger/rtt/src/SEGGER_RTT.c ****         memcpy((void*)pDst, pData + Rem, NumBytes);
 979:segger/rtt/src/SEGGER_RTT.c ****       }
 980:segger/rtt/src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 981:segger/rtt/src/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 982:segger/rtt/src/SEGGER_RTT.c ****       return 1;
 983:segger/rtt/src/SEGGER_RTT.c ****     }
 984:segger/rtt/src/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 985:segger/rtt/src/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 986:segger/rtt/src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 987:segger/rtt/src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
ARM GAS  /tmp/ccjFarMV.s 			page 46


 988:segger/rtt/src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 989:segger/rtt/src/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 990:segger/rtt/src/SEGGER_RTT.c ****       return 1;
 991:segger/rtt/src/SEGGER_RTT.c ****     }
 992:segger/rtt/src/SEGGER_RTT.c ****   }
 993:segger/rtt/src/SEGGER_RTT.c ****   return 0;     // No space in buffer
 994:segger/rtt/src/SEGGER_RTT.c **** }
 995:segger/rtt/src/SEGGER_RTT.c **** #endif
 996:segger/rtt/src/SEGGER_RTT.c **** 
 997:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
 998:segger/rtt/src/SEGGER_RTT.c **** *
 999:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBufferNoLock
1000:segger/rtt/src/SEGGER_RTT.c **** *
1001:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1002:segger/rtt/src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1003:segger/rtt/src/SEGGER_RTT.c **** *    control block inside a <Down> buffer.
1004:segger/rtt/src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteDownBufferNoLock does not lock the application.
1005:segger/rtt/src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer
1006:segger/rtt/src/SEGGER_RTT.c **** *    RTT data from other channels, such as TCP/IP or UART.
1007:segger/rtt/src/SEGGER_RTT.c **** *
1008:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1009:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of "Down"-buffer to be used.
1010:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1011:segger/rtt/src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1012:segger/rtt/src/SEGGER_RTT.c **** *
1013:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1014:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1015:segger/rtt/src/SEGGER_RTT.c **** *
1016:segger/rtt/src/SEGGER_RTT.c **** *  Notes
1017:segger/rtt/src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1018:segger/rtt/src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1019:segger/rtt/src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1020:segger/rtt/src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1021:segger/rtt/src/SEGGER_RTT.c **** *
1022:segger/rtt/src/SEGGER_RTT.c **** *  Additional information
1023:segger/rtt/src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1024:segger/rtt/src/SEGGER_RTT.c **** */
1025:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBy
 1348              		.loc 1 1025 105 is_stmt 1 view -0
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 0
 1351              		@ frame_needed = 0, uses_anonymous_args = 0
 1352              		.loc 1 1025 105 is_stmt 0 view .LVU430
 1353 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1354              	.LCFI11:
 1355              		.cfi_def_cfa_offset 24
 1356              		.cfi_offset 3, -24
 1357              		.cfi_offset 4, -20
 1358              		.cfi_offset 5, -16
 1359              		.cfi_offset 6, -12
 1360              		.cfi_offset 7, -8
 1361              		.cfi_offset 14, -4
 1362 0002 0F46     		mov	r7, r1
 1363 0004 1646     		mov	r6, r2
1026:segger/rtt/src/SEGGER_RTT.c ****   unsigned                Status;
 1364              		.loc 1 1026 3 is_stmt 1 view .LVU431
1027:segger/rtt/src/SEGGER_RTT.c ****   unsigned                Avail;
ARM GAS  /tmp/ccjFarMV.s 			page 47


 1365              		.loc 1 1027 3 view .LVU432
1028:segger/rtt/src/SEGGER_RTT.c ****   const char*             pData;
 1366              		.loc 1 1028 3 view .LVU433
1029:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 1367              		.loc 1 1029 3 view .LVU434
1030:segger/rtt/src/SEGGER_RTT.c ****   //
1031:segger/rtt/src/SEGGER_RTT.c ****   // Get "to-target" ring buffer.
1032:segger/rtt/src/SEGGER_RTT.c ****   // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offs
1033:segger/rtt/src/SEGGER_RTT.c ****   //
1034:segger/rtt/src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1368              		.loc 1 1034 3 view .LVU435
 1369              	.LVL146:
1035:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_
 1370              		.loc 1 1035 3 view .LVU436
 1371              		.loc 1 1035 9 is_stmt 0 view .LVU437
 1372 0006 00EB4000 		add	r0, r0, r0, lsl #1
 1373              	.LVL147:
 1374              		.loc 1 1035 9 view .LVU438
 1375 000a C400     		lsls	r4, r0, #3
 1376 000c 6034     		adds	r4, r4, #96
 1377 000e 144B     		ldr	r3, .L79
 1378 0010 1C44     		add	r4, r4, r3
 1379              	.LVL148:
1036:segger/rtt/src/SEGGER_RTT.c ****   //
1037:segger/rtt/src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1038:segger/rtt/src/SEGGER_RTT.c ****   //
1039:segger/rtt/src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1380              		.loc 1 1039 3 is_stmt 1 view .LVU439
 1381              		.loc 1 1039 16 is_stmt 0 view .LVU440
 1382 0012 6569     		ldr	r5, [r4, #20]
 1383              		.loc 1 1039 3 view .LVU441
 1384 0014 012D     		cmp	r5, #1
 1385 0016 0ED0     		beq	.L74
 1386 0018 022D     		cmp	r5, #2
 1387 001a 1AD0     		beq	.L75
 1388 001c F5B9     		cbnz	r5, .L77
1040:segger/rtt/src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1041:segger/rtt/src/SEGGER_RTT.c ****     //
1042:segger/rtt/src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1043:segger/rtt/src/SEGGER_RTT.c ****     // of this output, don't bother.
1044:segger/rtt/src/SEGGER_RTT.c ****     //
1045:segger/rtt/src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1389              		.loc 1 1045 5 is_stmt 1 view .LVU442
 1390              		.loc 1 1045 13 is_stmt 0 view .LVU443
 1391 001e 2046     		mov	r0, r4
 1392 0020 FFF7FEFF 		bl	_GetAvailWriteSpace
 1393              	.LVL149:
1046:segger/rtt/src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1394              		.loc 1 1046 5 is_stmt 1 view .LVU444
 1395              		.loc 1 1046 8 is_stmt 0 view .LVU445
 1396 0024 8642     		cmp	r6, r0
 1397 0026 12D8     		bhi	.L73
1047:segger/rtt/src/SEGGER_RTT.c ****       Status = 0u;
1048:segger/rtt/src/SEGGER_RTT.c ****     } else {
1049:segger/rtt/src/SEGGER_RTT.c ****       Status = NumBytes;
 1398              		.loc 1 1049 7 is_stmt 1 view .LVU446
 1399              	.LVL150:
ARM GAS  /tmp/ccjFarMV.s 			page 48


1050:segger/rtt/src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1400              		.loc 1 1050 7 view .LVU447
 1401 0028 3246     		mov	r2, r6
 1402 002a 3946     		mov	r1, r7
 1403 002c 2046     		mov	r0, r4
 1404              	.LVL151:
 1405              		.loc 1 1050 7 is_stmt 0 view .LVU448
 1406 002e FFF7FEFF 		bl	_WriteNoCheck
 1407              	.LVL152:
1049:segger/rtt/src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1408              		.loc 1 1049 14 view .LVU449
 1409 0032 3546     		mov	r5, r6
 1410 0034 0BE0     		b	.L73
 1411              	.LVL153:
 1412              	.L74:
1051:segger/rtt/src/SEGGER_RTT.c ****     }
1052:segger/rtt/src/SEGGER_RTT.c ****     break;
1053:segger/rtt/src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1054:segger/rtt/src/SEGGER_RTT.c ****     //
1055:segger/rtt/src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1056:segger/rtt/src/SEGGER_RTT.c ****     //
1057:segger/rtt/src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1413              		.loc 1 1057 5 is_stmt 1 view .LVU450
 1414              		.loc 1 1057 13 is_stmt 0 view .LVU451
 1415 0036 2046     		mov	r0, r4
 1416 0038 FFF7FEFF 		bl	_GetAvailWriteSpace
 1417              	.LVL154:
1058:segger/rtt/src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1418              		.loc 1 1058 5 is_stmt 1 view .LVU452
 1419              		.loc 1 1058 12 is_stmt 0 view .LVU453
 1420 003c 3546     		mov	r5, r6
 1421 003e 8642     		cmp	r6, r0
 1422 0040 28BF     		it	cs
 1423 0042 0546     		movcs	r5, r0
 1424              	.LVL155:
1059:segger/rtt/src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1425              		.loc 1 1059 5 is_stmt 1 view .LVU454
 1426 0044 2A46     		mov	r2, r5
 1427 0046 3946     		mov	r1, r7
 1428 0048 2046     		mov	r0, r4
 1429              	.LVL156:
 1430              		.loc 1 1059 5 is_stmt 0 view .LVU455
 1431 004a FFF7FEFF 		bl	_WriteNoCheck
 1432              	.LVL157:
1060:segger/rtt/src/SEGGER_RTT.c ****     break;
 1433              		.loc 1 1060 5 is_stmt 1 view .LVU456
 1434              	.L73:
1061:segger/rtt/src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1062:segger/rtt/src/SEGGER_RTT.c ****     //
1063:segger/rtt/src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1064:segger/rtt/src/SEGGER_RTT.c ****     //
1065:segger/rtt/src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1066:segger/rtt/src/SEGGER_RTT.c ****     break;
1067:segger/rtt/src/SEGGER_RTT.c ****   default:
1068:segger/rtt/src/SEGGER_RTT.c ****     Status = 0u;
1069:segger/rtt/src/SEGGER_RTT.c ****     break;
1070:segger/rtt/src/SEGGER_RTT.c ****   }
ARM GAS  /tmp/ccjFarMV.s 			page 49


1071:segger/rtt/src/SEGGER_RTT.c ****   //
1072:segger/rtt/src/SEGGER_RTT.c ****   // Finish up.
1073:segger/rtt/src/SEGGER_RTT.c ****   //
1074:segger/rtt/src/SEGGER_RTT.c ****   return Status;
1075:segger/rtt/src/SEGGER_RTT.c **** }
 1435              		.loc 1 1075 1 is_stmt 0 view .LVU457
 1436 004e 2846     		mov	r0, r5
 1437 0050 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1438              	.LVL158:
 1439              	.L75:
1065:segger/rtt/src/SEGGER_RTT.c ****     break;
 1440              		.loc 1 1065 5 is_stmt 1 view .LVU458
1065:segger/rtt/src/SEGGER_RTT.c ****     break;
 1441              		.loc 1 1065 14 is_stmt 0 view .LVU459
 1442 0052 2046     		mov	r0, r4
 1443 0054 FFF7FEFF 		bl	_WriteBlocking
 1444              	.LVL159:
1065:segger/rtt/src/SEGGER_RTT.c ****     break;
 1445              		.loc 1 1065 14 view .LVU460
 1446 0058 0546     		mov	r5, r0
 1447              	.LVL160:
1066:segger/rtt/src/SEGGER_RTT.c ****   default:
 1448              		.loc 1 1066 5 is_stmt 1 view .LVU461
 1449 005a F8E7     		b	.L73
 1450              	.LVL161:
 1451              	.L77:
1039:segger/rtt/src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
 1452              		.loc 1 1039 3 is_stmt 0 view .LVU462
 1453 005c 0025     		movs	r5, #0
 1454              	.LVL162:
1074:segger/rtt/src/SEGGER_RTT.c **** }
 1455              		.loc 1 1074 3 is_stmt 1 view .LVU463
1074:segger/rtt/src/SEGGER_RTT.c **** }
 1456              		.loc 1 1074 10 is_stmt 0 view .LVU464
 1457 005e F6E7     		b	.L73
 1458              	.L80:
 1459              		.align	2
 1460              	.L79:
 1461 0060 00000000 		.word	_SEGGER_RTT
 1462              		.cfi_endproc
 1463              	.LFE10:
 1465              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1466              		.align	1
 1467              		.global	SEGGER_RTT_WriteNoLock
 1468              		.syntax unified
 1469              		.thumb
 1470              		.thumb_func
 1472              	SEGGER_RTT_WriteNoLock:
 1473              	.LVL163:
 1474              	.LFB11:
1076:segger/rtt/src/SEGGER_RTT.c **** 
1077:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1078:segger/rtt/src/SEGGER_RTT.c **** *
1079:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
1080:segger/rtt/src/SEGGER_RTT.c **** *
1081:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1082:segger/rtt/src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
ARM GAS  /tmp/ccjFarMV.s 			page 50


1083:segger/rtt/src/SEGGER_RTT.c **** *    control block which is then read by the host.
1084:segger/rtt/src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
1085:segger/rtt/src/SEGGER_RTT.c **** *
1086:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1087:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1088:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1089:segger/rtt/src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1090:segger/rtt/src/SEGGER_RTT.c **** *
1091:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1092:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1093:segger/rtt/src/SEGGER_RTT.c **** *
1094:segger/rtt/src/SEGGER_RTT.c **** *  Notes
1095:segger/rtt/src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1096:segger/rtt/src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1097:segger/rtt/src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1098:segger/rtt/src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1099:segger/rtt/src/SEGGER_RTT.c **** */
1100:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1475              		.loc 1 1100 95 is_stmt 1 view -0
 1476              		.cfi_startproc
 1477              		@ args = 0, pretend = 0, frame = 0
 1478              		@ frame_needed = 0, uses_anonymous_args = 0
 1479              		.loc 1 1100 95 is_stmt 0 view .LVU466
 1480 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1481              	.LCFI12:
 1482              		.cfi_def_cfa_offset 24
 1483              		.cfi_offset 3, -24
 1484              		.cfi_offset 4, -20
 1485              		.cfi_offset 5, -16
 1486              		.cfi_offset 6, -12
 1487              		.cfi_offset 7, -8
 1488              		.cfi_offset 14, -4
 1489 0002 0F46     		mov	r7, r1
 1490 0004 1646     		mov	r6, r2
1101:segger/rtt/src/SEGGER_RTT.c ****   unsigned              Status;
 1491              		.loc 1 1101 3 is_stmt 1 view .LVU467
1102:segger/rtt/src/SEGGER_RTT.c ****   unsigned              Avail;
 1492              		.loc 1 1102 3 view .LVU468
1103:segger/rtt/src/SEGGER_RTT.c ****   const char*           pData;
 1493              		.loc 1 1103 3 view .LVU469
1104:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1494              		.loc 1 1104 3 view .LVU470
1105:segger/rtt/src/SEGGER_RTT.c ****   //
1106:segger/rtt/src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1107:segger/rtt/src/SEGGER_RTT.c ****   //
1108:segger/rtt/src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1495              		.loc 1 1108 3 view .LVU471
 1496              	.LVL164:
1109:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 1497              		.loc 1 1109 3 view .LVU472
 1498              		.loc 1 1109 9 is_stmt 0 view .LVU473
 1499 0006 441C     		adds	r4, r0, #1
 1500 0008 04EB4404 		add	r4, r4, r4, lsl #1
 1501 000c 164B     		ldr	r3, .L87
 1502 000e 03EBC404 		add	r4, r3, r4, lsl #3
 1503              	.LVL165:
1110:segger/rtt/src/SEGGER_RTT.c ****   //
ARM GAS  /tmp/ccjFarMV.s 			page 51


1111:segger/rtt/src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1112:segger/rtt/src/SEGGER_RTT.c ****   //
1113:segger/rtt/src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1504              		.loc 1 1113 3 is_stmt 1 view .LVU474
 1505              		.loc 1 1113 16 is_stmt 0 view .LVU475
 1506 0012 00EB4000 		add	r0, r0, r0, lsl #1
 1507              	.LVL166:
 1508              		.loc 1 1113 16 view .LVU476
 1509 0016 03EBC003 		add	r3, r3, r0, lsl #3
 1510 001a DD6A     		ldr	r5, [r3, #44]
 1511              		.loc 1 1113 3 view .LVU477
 1512 001c 012D     		cmp	r5, #1
 1513 001e 0ED0     		beq	.L82
 1514 0020 022D     		cmp	r5, #2
 1515 0022 1AD0     		beq	.L83
 1516 0024 F5B9     		cbnz	r5, .L85
1114:segger/rtt/src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1115:segger/rtt/src/SEGGER_RTT.c ****     //
1116:segger/rtt/src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1117:segger/rtt/src/SEGGER_RTT.c ****     // of this output, don't bother.
1118:segger/rtt/src/SEGGER_RTT.c ****     //
1119:segger/rtt/src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1517              		.loc 1 1119 5 is_stmt 1 view .LVU478
 1518              		.loc 1 1119 13 is_stmt 0 view .LVU479
 1519 0026 2046     		mov	r0, r4
 1520 0028 FFF7FEFF 		bl	_GetAvailWriteSpace
 1521              	.LVL167:
1120:segger/rtt/src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1522              		.loc 1 1120 5 is_stmt 1 view .LVU480
 1523              		.loc 1 1120 8 is_stmt 0 view .LVU481
 1524 002c 8642     		cmp	r6, r0
 1525 002e 12D8     		bhi	.L81
1121:segger/rtt/src/SEGGER_RTT.c ****       Status = 0u;
1122:segger/rtt/src/SEGGER_RTT.c ****     } else {
1123:segger/rtt/src/SEGGER_RTT.c ****       Status = NumBytes;
 1526              		.loc 1 1123 7 is_stmt 1 view .LVU482
 1527              	.LVL168:
1124:segger/rtt/src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1528              		.loc 1 1124 7 view .LVU483
 1529 0030 3246     		mov	r2, r6
 1530 0032 3946     		mov	r1, r7
 1531 0034 2046     		mov	r0, r4
 1532              	.LVL169:
 1533              		.loc 1 1124 7 is_stmt 0 view .LVU484
 1534 0036 FFF7FEFF 		bl	_WriteNoCheck
 1535              	.LVL170:
1123:segger/rtt/src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1536              		.loc 1 1123 14 view .LVU485
 1537 003a 3546     		mov	r5, r6
 1538 003c 0BE0     		b	.L81
 1539              	.LVL171:
 1540              	.L82:
1125:segger/rtt/src/SEGGER_RTT.c ****     }
1126:segger/rtt/src/SEGGER_RTT.c ****     break;
1127:segger/rtt/src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1128:segger/rtt/src/SEGGER_RTT.c ****     //
1129:segger/rtt/src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
ARM GAS  /tmp/ccjFarMV.s 			page 52


1130:segger/rtt/src/SEGGER_RTT.c ****     //
1131:segger/rtt/src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1541              		.loc 1 1131 5 is_stmt 1 view .LVU486
 1542              		.loc 1 1131 13 is_stmt 0 view .LVU487
 1543 003e 2046     		mov	r0, r4
 1544 0040 FFF7FEFF 		bl	_GetAvailWriteSpace
 1545              	.LVL172:
1132:segger/rtt/src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1546              		.loc 1 1132 5 is_stmt 1 view .LVU488
 1547              		.loc 1 1132 12 is_stmt 0 view .LVU489
 1548 0044 3546     		mov	r5, r6
 1549 0046 8642     		cmp	r6, r0
 1550 0048 28BF     		it	cs
 1551 004a 0546     		movcs	r5, r0
 1552              	.LVL173:
1133:segger/rtt/src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1553              		.loc 1 1133 5 is_stmt 1 view .LVU490
 1554 004c 2A46     		mov	r2, r5
 1555 004e 3946     		mov	r1, r7
 1556 0050 2046     		mov	r0, r4
 1557              	.LVL174:
 1558              		.loc 1 1133 5 is_stmt 0 view .LVU491
 1559 0052 FFF7FEFF 		bl	_WriteNoCheck
 1560              	.LVL175:
1134:segger/rtt/src/SEGGER_RTT.c ****     break;
 1561              		.loc 1 1134 5 is_stmt 1 view .LVU492
 1562              	.L81:
1135:segger/rtt/src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1136:segger/rtt/src/SEGGER_RTT.c ****     //
1137:segger/rtt/src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1138:segger/rtt/src/SEGGER_RTT.c ****     //
1139:segger/rtt/src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1140:segger/rtt/src/SEGGER_RTT.c ****     break;
1141:segger/rtt/src/SEGGER_RTT.c ****   default:
1142:segger/rtt/src/SEGGER_RTT.c ****     Status = 0u;
1143:segger/rtt/src/SEGGER_RTT.c ****     break;
1144:segger/rtt/src/SEGGER_RTT.c ****   }
1145:segger/rtt/src/SEGGER_RTT.c ****   //
1146:segger/rtt/src/SEGGER_RTT.c ****   // Finish up.
1147:segger/rtt/src/SEGGER_RTT.c ****   //
1148:segger/rtt/src/SEGGER_RTT.c ****   return Status;
1149:segger/rtt/src/SEGGER_RTT.c **** }
 1563              		.loc 1 1149 1 is_stmt 0 view .LVU493
 1564 0056 2846     		mov	r0, r5
 1565 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1566              	.LVL176:
 1567              	.L83:
1139:segger/rtt/src/SEGGER_RTT.c ****     break;
 1568              		.loc 1 1139 5 is_stmt 1 view .LVU494
1139:segger/rtt/src/SEGGER_RTT.c ****     break;
 1569              		.loc 1 1139 14 is_stmt 0 view .LVU495
 1570 005a 2046     		mov	r0, r4
 1571 005c FFF7FEFF 		bl	_WriteBlocking
 1572              	.LVL177:
1139:segger/rtt/src/SEGGER_RTT.c ****     break;
 1573              		.loc 1 1139 14 view .LVU496
 1574 0060 0546     		mov	r5, r0
ARM GAS  /tmp/ccjFarMV.s 			page 53


 1575              	.LVL178:
1140:segger/rtt/src/SEGGER_RTT.c ****   default:
 1576              		.loc 1 1140 5 is_stmt 1 view .LVU497
 1577 0062 F8E7     		b	.L81
 1578              	.LVL179:
 1579              	.L85:
1113:segger/rtt/src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
 1580              		.loc 1 1113 3 is_stmt 0 view .LVU498
 1581 0064 0025     		movs	r5, #0
 1582              	.LVL180:
1148:segger/rtt/src/SEGGER_RTT.c **** }
 1583              		.loc 1 1148 3 is_stmt 1 view .LVU499
1148:segger/rtt/src/SEGGER_RTT.c **** }
 1584              		.loc 1 1148 10 is_stmt 0 view .LVU500
 1585 0066 F6E7     		b	.L81
 1586              	.L88:
 1587              		.align	2
 1588              	.L87:
 1589 0068 00000000 		.word	_SEGGER_RTT
 1590              		.cfi_endproc
 1591              	.LFE11:
 1593              		.section	.text.SEGGER_RTT_WriteDownBuffer,"ax",%progbits
 1594              		.align	1
 1595              		.global	SEGGER_RTT_WriteDownBuffer
 1596              		.syntax unified
 1597              		.thumb
 1598              		.thumb_func
 1600              	SEGGER_RTT_WriteDownBuffer:
 1601              	.LVL181:
 1602              	.LFB12:
1150:segger/rtt/src/SEGGER_RTT.c **** 
1151:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1152:segger/rtt/src/SEGGER_RTT.c **** *
1153:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBuffer
1154:segger/rtt/src/SEGGER_RTT.c **** *
1155:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1156:segger/rtt/src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT control block in a <Down> buffer.
1157:segger/rtt/src/SEGGER_RTT.c **** *
1158:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1159:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1160:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1161:segger/rtt/src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1162:segger/rtt/src/SEGGER_RTT.c **** *
1163:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1164:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1165:segger/rtt/src/SEGGER_RTT.c **** *
1166:segger/rtt/src/SEGGER_RTT.c **** *  Notes
1167:segger/rtt/src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1168:segger/rtt/src/SEGGER_RTT.c **** *
1169:segger/rtt/src/SEGGER_RTT.c **** *  Additional information
1170:segger/rtt/src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1171:segger/rtt/src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
1172:segger/rtt/src/SEGGER_RTT.c **** *    the write operation, writing from the application is also locked.
1173:segger/rtt/src/SEGGER_RTT.c **** *    If only one consumer writes to the down buffer,
1174:segger/rtt/src/SEGGER_RTT.c **** *    call SEGGER_RTT_WriteDownBufferNoLock() instead.
1175:segger/rtt/src/SEGGER_RTT.c **** */
1176:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
ARM GAS  /tmp/ccjFarMV.s 			page 54


 1603              		.loc 1 1176 99 is_stmt 1 view -0
 1604              		.cfi_startproc
 1605              		@ args = 0, pretend = 0, frame = 0
 1606              		@ frame_needed = 0, uses_anonymous_args = 0
 1607              		.loc 1 1176 99 is_stmt 0 view .LVU502
 1608 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1609              	.LCFI13:
 1610              		.cfi_def_cfa_offset 24
 1611              		.cfi_offset 3, -24
 1612              		.cfi_offset 4, -20
 1613              		.cfi_offset 5, -16
 1614              		.cfi_offset 6, -12
 1615              		.cfi_offset 7, -8
 1616              		.cfi_offset 14, -4
 1617 0002 0446     		mov	r4, r0
 1618 0004 0D46     		mov	r5, r1
 1619 0006 1646     		mov	r6, r2
1177:segger/rtt/src/SEGGER_RTT.c ****   unsigned Status;
 1620              		.loc 1 1177 3 is_stmt 1 view .LVU503
1178:segger/rtt/src/SEGGER_RTT.c **** 
1179:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 1621              		.loc 1 1179 3 view .LVU504
 1622              	.LBB8:
 1623              		.loc 1 1179 3 view .LVU505
 1624              		.loc 1 1179 3 view .LVU506
 1625              	.LVL182:
 1626              		.loc 1 1179 3 view .LVU507
 1627 0008 0A4B     		ldr	r3, .L93
 1628 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1629 000c DBB2     		uxtb	r3, r3
 1630 000e 532B     		cmp	r3, #83
 1631 0010 0DD1     		bne	.L92
 1632              	.LVL183:
 1633              	.L90:
 1634              		.loc 1 1179 3 is_stmt 0 view .LVU508
 1635              	.LBE8:
 1636              		.loc 1 1179 3 is_stmt 1 discriminator 3 view .LVU509
 1637              	.LBB9:
1180:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1638              		.loc 1 1180 3 view .LVU510
 1639              		.loc 1 1180 3 view .LVU511
 1640              		.syntax unified
 1641              	@ 1180 "segger/rtt/src/SEGGER_RTT.c" 1
 1642 0012 EFF31187 		mrs   r7, basepri  
 1643 0016 4FF02001 		mov   r1, #32       
 1644 001a 81F31188 		msr   basepri, r1  
 1645              		
 1646              	@ 0 "" 2
 1647              	.LVL184:
 1648              		.loc 1 1180 20 view .LVU512
1181:segger/rtt/src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locki
 1649              		.loc 1 1181 3 view .LVU513
 1650              		.loc 1 1181 12 is_stmt 0 view .LVU514
 1651              		.thumb
 1652              		.syntax unified
 1653 001e 3246     		mov	r2, r6
 1654 0020 2946     		mov	r1, r5
ARM GAS  /tmp/ccjFarMV.s 			page 55


 1655 0022 2046     		mov	r0, r4
 1656 0024 FFF7FEFF 		bl	SEGGER_RTT_WriteDownBufferNoLock
 1657              	.LVL185:
1182:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1658              		.loc 1 1182 3 is_stmt 1 view .LVU515
 1659              		.syntax unified
 1660              	@ 1182 "segger/rtt/src/SEGGER_RTT.c" 1
 1661 0028 87F31188 		msr   basepri, r7  
 1662              		
 1663              	@ 0 "" 2
 1664              		.thumb
 1665              		.syntax unified
 1666              	.LBE9:
 1667              		.loc 1 1182 22 view .LVU516
1183:segger/rtt/src/SEGGER_RTT.c ****   return Status;
 1668              		.loc 1 1183 3 view .LVU517
1184:segger/rtt/src/SEGGER_RTT.c **** }
 1669              		.loc 1 1184 1 is_stmt 0 view .LVU518
 1670 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1671              	.LVL186:
 1672              	.L92:
 1673              	.LBB10:
1179:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1674              		.loc 1 1179 3 is_stmt 1 discriminator 1 view .LVU519
 1675 002e FFF7FEFF 		bl	_DoInit
 1676              	.LVL187:
1179:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1677              		.loc 1 1179 3 is_stmt 0 discriminator 1 view .LVU520
 1678 0032 EEE7     		b	.L90
 1679              	.L94:
 1680              		.align	2
 1681              	.L93:
 1682 0034 00000000 		.word	_SEGGER_RTT
 1683              	.LBE10:
 1684              		.cfi_endproc
 1685              	.LFE12:
 1687              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1688              		.align	1
 1689              		.global	SEGGER_RTT_Write
 1690              		.syntax unified
 1691              		.thumb
 1692              		.thumb_func
 1694              	SEGGER_RTT_Write:
 1695              	.LVL188:
 1696              	.LFB13:
1185:segger/rtt/src/SEGGER_RTT.c **** 
1186:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1187:segger/rtt/src/SEGGER_RTT.c **** *
1188:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_Write
1189:segger/rtt/src/SEGGER_RTT.c **** *
1190:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1191:segger/rtt/src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1192:segger/rtt/src/SEGGER_RTT.c **** *    control block which is then read by the host.
1193:segger/rtt/src/SEGGER_RTT.c **** *
1194:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1195:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1196:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
ARM GAS  /tmp/ccjFarMV.s 			page 56


1197:segger/rtt/src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1198:segger/rtt/src/SEGGER_RTT.c **** *
1199:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1200:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1201:segger/rtt/src/SEGGER_RTT.c **** *
1202:segger/rtt/src/SEGGER_RTT.c **** *  Notes
1203:segger/rtt/src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1204:segger/rtt/src/SEGGER_RTT.c **** */
1205:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1697              		.loc 1 1205 89 is_stmt 1 view -0
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 0
 1700              		@ frame_needed = 0, uses_anonymous_args = 0
 1701              		.loc 1 1205 89 is_stmt 0 view .LVU522
 1702 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1703              	.LCFI14:
 1704              		.cfi_def_cfa_offset 24
 1705              		.cfi_offset 3, -24
 1706              		.cfi_offset 4, -20
 1707              		.cfi_offset 5, -16
 1708              		.cfi_offset 6, -12
 1709              		.cfi_offset 7, -8
 1710              		.cfi_offset 14, -4
 1711 0002 0446     		mov	r4, r0
 1712 0004 0D46     		mov	r5, r1
 1713 0006 1646     		mov	r6, r2
1206:segger/rtt/src/SEGGER_RTT.c ****   unsigned Status;
 1714              		.loc 1 1206 3 is_stmt 1 view .LVU523
1207:segger/rtt/src/SEGGER_RTT.c **** 
1208:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 1715              		.loc 1 1208 3 view .LVU524
 1716              	.LBB11:
 1717              		.loc 1 1208 3 view .LVU525
 1718              		.loc 1 1208 3 view .LVU526
 1719              	.LVL189:
 1720              		.loc 1 1208 3 view .LVU527
 1721 0008 0A4B     		ldr	r3, .L99
 1722 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1723 000c DBB2     		uxtb	r3, r3
 1724 000e 532B     		cmp	r3, #83
 1725 0010 0DD1     		bne	.L98
 1726              	.LVL190:
 1727              	.L96:
 1728              		.loc 1 1208 3 is_stmt 0 view .LVU528
 1729              	.LBE11:
 1730              		.loc 1 1208 3 is_stmt 1 discriminator 3 view .LVU529
 1731              	.LBB12:
1209:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1732              		.loc 1 1209 3 view .LVU530
 1733              		.loc 1 1209 3 view .LVU531
 1734              		.syntax unified
 1735              	@ 1209 "segger/rtt/src/SEGGER_RTT.c" 1
 1736 0012 EFF31187 		mrs   r7, basepri  
 1737 0016 4FF02001 		mov   r1, #32       
 1738 001a 81F31188 		msr   basepri, r1  
 1739              		
 1740              	@ 0 "" 2
ARM GAS  /tmp/ccjFarMV.s 			page 57


 1741              	.LVL191:
 1742              		.loc 1 1209 20 view .LVU532
1210:segger/rtt/src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1743              		.loc 1 1210 3 view .LVU533
 1744              		.loc 1 1210 12 is_stmt 0 view .LVU534
 1745              		.thumb
 1746              		.syntax unified
 1747 001e 3246     		mov	r2, r6
 1748 0020 2946     		mov	r1, r5
 1749 0022 2046     		mov	r0, r4
 1750 0024 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1751              	.LVL192:
1211:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1752              		.loc 1 1211 3 is_stmt 1 view .LVU535
 1753              		.syntax unified
 1754              	@ 1211 "segger/rtt/src/SEGGER_RTT.c" 1
 1755 0028 87F31188 		msr   basepri, r7  
 1756              		
 1757              	@ 0 "" 2
 1758              		.thumb
 1759              		.syntax unified
 1760              	.LBE12:
 1761              		.loc 1 1211 22 view .LVU536
1212:segger/rtt/src/SEGGER_RTT.c ****   return Status;
 1762              		.loc 1 1212 3 view .LVU537
1213:segger/rtt/src/SEGGER_RTT.c **** }
 1763              		.loc 1 1213 1 is_stmt 0 view .LVU538
 1764 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1765              	.LVL193:
 1766              	.L98:
 1767              	.LBB13:
1208:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1768              		.loc 1 1208 3 is_stmt 1 discriminator 1 view .LVU539
 1769 002e FFF7FEFF 		bl	_DoInit
 1770              	.LVL194:
1208:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1771              		.loc 1 1208 3 is_stmt 0 discriminator 1 view .LVU540
 1772 0032 EEE7     		b	.L96
 1773              	.L100:
 1774              		.align	2
 1775              	.L99:
 1776 0034 00000000 		.word	_SEGGER_RTT
 1777              	.LBE13:
 1778              		.cfi_endproc
 1779              	.LFE13:
 1781              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1782              		.align	1
 1783              		.global	SEGGER_RTT_WriteString
 1784              		.syntax unified
 1785              		.thumb
 1786              		.thumb_func
 1788              	SEGGER_RTT_WriteString:
 1789              	.LVL195:
 1790              	.LFB14:
1214:segger/rtt/src/SEGGER_RTT.c **** 
1215:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1216:segger/rtt/src/SEGGER_RTT.c **** *
ARM GAS  /tmp/ccjFarMV.s 			page 58


1217:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
1218:segger/rtt/src/SEGGER_RTT.c **** *
1219:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1220:segger/rtt/src/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
1221:segger/rtt/src/SEGGER_RTT.c **** *    This data is read by the host.
1222:segger/rtt/src/SEGGER_RTT.c **** *
1223:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1224:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1225:segger/rtt/src/SEGGER_RTT.c **** *    s            Pointer to string.
1226:segger/rtt/src/SEGGER_RTT.c **** *
1227:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1228:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1229:segger/rtt/src/SEGGER_RTT.c **** *
1230:segger/rtt/src/SEGGER_RTT.c **** *  Notes
1231:segger/rtt/src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1232:segger/rtt/src/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1233:segger/rtt/src/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1234:segger/rtt/src/SEGGER_RTT.c **** */
1235:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1791              		.loc 1 1235 70 is_stmt 1 view -0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 0
 1794              		@ frame_needed = 0, uses_anonymous_args = 0
 1795              		.loc 1 1235 70 is_stmt 0 view .LVU542
 1796 0000 38B5     		push	{r3, r4, r5, lr}
 1797              	.LCFI15:
 1798              		.cfi_def_cfa_offset 16
 1799              		.cfi_offset 3, -16
 1800              		.cfi_offset 4, -12
 1801              		.cfi_offset 5, -8
 1802              		.cfi_offset 14, -4
 1803 0002 0546     		mov	r5, r0
 1804 0004 0C46     		mov	r4, r1
1236:segger/rtt/src/SEGGER_RTT.c ****   unsigned Len;
 1805              		.loc 1 1236 3 is_stmt 1 view .LVU543
1237:segger/rtt/src/SEGGER_RTT.c **** 
1238:segger/rtt/src/SEGGER_RTT.c ****   Len = STRLEN(s);
 1806              		.loc 1 1238 3 view .LVU544
 1807              		.loc 1 1238 9 is_stmt 0 view .LVU545
 1808 0006 0846     		mov	r0, r1
 1809              	.LVL196:
 1810              		.loc 1 1238 9 view .LVU546
 1811 0008 FFF7FEFF 		bl	strlen
 1812              	.LVL197:
 1813              		.loc 1 1238 9 view .LVU547
 1814 000c 0246     		mov	r2, r0
 1815              	.LVL198:
1239:segger/rtt/src/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1816              		.loc 1 1239 3 is_stmt 1 view .LVU548
 1817              		.loc 1 1239 10 is_stmt 0 view .LVU549
 1818 000e 2146     		mov	r1, r4
 1819 0010 2846     		mov	r0, r5
 1820              	.LVL199:
 1821              		.loc 1 1239 10 view .LVU550
 1822 0012 FFF7FEFF 		bl	SEGGER_RTT_Write
 1823              	.LVL200:
1240:segger/rtt/src/SEGGER_RTT.c **** }
ARM GAS  /tmp/ccjFarMV.s 			page 59


 1824              		.loc 1 1240 1 view .LVU551
 1825 0016 38BD     		pop	{r3, r4, r5, pc}
 1826              		.loc 1 1240 1 view .LVU552
 1827              		.cfi_endproc
 1828              	.LFE14:
 1830              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1831              		.align	1
 1832              		.global	SEGGER_RTT_PutCharSkipNoLock
 1833              		.syntax unified
 1834              		.thumb
 1835              		.thumb_func
 1837              	SEGGER_RTT_PutCharSkipNoLock:
 1838              	.LVL201:
 1839              	.LFB15:
1241:segger/rtt/src/SEGGER_RTT.c **** 
1242:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1243:segger/rtt/src/SEGGER_RTT.c **** *
1244:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1245:segger/rtt/src/SEGGER_RTT.c **** *
1246:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1247:segger/rtt/src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1248:segger/rtt/src/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1249:segger/rtt/src/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1250:segger/rtt/src/SEGGER_RTT.c **** *
1251:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1252:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1253:segger/rtt/src/SEGGER_RTT.c **** *    c            Byte to be stored.
1254:segger/rtt/src/SEGGER_RTT.c **** *
1255:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1256:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1257:segger/rtt/src/SEGGER_RTT.c **** *
1258:segger/rtt/src/SEGGER_RTT.c **** *  Notes
1259:segger/rtt/src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1260:segger/rtt/src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1261:segger/rtt/src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1262:segger/rtt/src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1263:segger/rtt/src/SEGGER_RTT.c **** */
1264:segger/rtt/src/SEGGER_RTT.c **** 
1265:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1840              		.loc 1 1265 69 is_stmt 1 view -0
 1841              		.cfi_startproc
 1842              		@ args = 0, pretend = 0, frame = 0
 1843              		@ frame_needed = 0, uses_anonymous_args = 0
 1844              		@ link register save eliminated.
 1845              		.loc 1 1265 69 is_stmt 0 view .LVU554
 1846 0000 30B4     		push	{r4, r5}
 1847              	.LCFI16:
 1848              		.cfi_def_cfa_offset 8
 1849              		.cfi_offset 4, -8
 1850              		.cfi_offset 5, -4
1266:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1851              		.loc 1 1266 3 is_stmt 1 view .LVU555
1267:segger/rtt/src/SEGGER_RTT.c ****   unsigned              WrOff;
 1852              		.loc 1 1267 3 view .LVU556
1268:segger/rtt/src/SEGGER_RTT.c ****   unsigned              Status;
 1853              		.loc 1 1268 3 view .LVU557
1269:segger/rtt/src/SEGGER_RTT.c ****   volatile char*        pDst;
ARM GAS  /tmp/ccjFarMV.s 			page 60


 1854              		.loc 1 1269 3 view .LVU558
1270:segger/rtt/src/SEGGER_RTT.c ****   //
1271:segger/rtt/src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1272:segger/rtt/src/SEGGER_RTT.c ****   //
1273:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 1855              		.loc 1 1273 3 view .LVU559
 1856              	.LVL202:
1274:segger/rtt/src/SEGGER_RTT.c ****   //
1275:segger/rtt/src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1276:segger/rtt/src/SEGGER_RTT.c ****   //
1277:segger/rtt/src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1857              		.loc 1 1277 3 view .LVU560
 1858              		.loc 1 1277 16 is_stmt 0 view .LVU561
 1859 0002 00EB4002 		add	r2, r0, r0, lsl #1
 1860 0006 124B     		ldr	r3, .L110
 1861 0008 03EBC203 		add	r3, r3, r2, lsl #3
 1862 000c 5D6A     		ldr	r5, [r3, #36]
 1863              		.loc 1 1277 9 view .LVU562
 1864 000e 6A1C     		adds	r2, r5, #1
 1865              	.LVL203:
1278:segger/rtt/src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1866              		.loc 1 1278 3 is_stmt 1 view .LVU563
 1867              		.loc 1 1278 21 is_stmt 0 view .LVU564
 1868 0010 1B6A     		ldr	r3, [r3, #32]
 1869              		.loc 1 1278 6 view .LVU565
 1870 0012 9342     		cmp	r3, r2
 1871 0014 17D0     		beq	.L109
 1872              	.LVL204:
 1873              	.L104:
1279:segger/rtt/src/SEGGER_RTT.c ****     WrOff = 0;
1280:segger/rtt/src/SEGGER_RTT.c ****   }
1281:segger/rtt/src/SEGGER_RTT.c ****   //
1282:segger/rtt/src/SEGGER_RTT.c ****   // Output byte if free space is available
1283:segger/rtt/src/SEGGER_RTT.c ****   //
1284:segger/rtt/src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1874              		.loc 1 1284 3 is_stmt 1 view .LVU566
 1875              		.loc 1 1284 21 is_stmt 0 view .LVU567
 1876 0016 00EB400C 		add	ip, r0, r0, lsl #1
 1877 001a 0D4B     		ldr	r3, .L110
 1878 001c 03EBCC03 		add	r3, r3, ip, lsl #3
 1879 0020 9B6A     		ldr	r3, [r3, #40]
 1880              		.loc 1 1284 6 view .LVU568
 1881 0022 9342     		cmp	r3, r2
 1882 0024 11D0     		beq	.L107
1285:segger/rtt/src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1883              		.loc 1 1285 5 is_stmt 1 view .LVU569
 1884              		.loc 1 1285 18 is_stmt 0 view .LVU570
 1885 0026 0A4C     		ldr	r4, .L110
 1886 0028 431C     		adds	r3, r0, #1
 1887 002a 03EB4303 		add	r3, r3, r3, lsl #1
 1888 002e 04EBC303 		add	r3, r4, r3, lsl #3
 1889 0032 5B68     		ldr	r3, [r3, #4]
 1890              	.LVL205:
1286:segger/rtt/src/SEGGER_RTT.c ****     *pDst = c;
 1891              		.loc 1 1286 5 is_stmt 1 view .LVU571
 1892              		.loc 1 1286 11 is_stmt 0 view .LVU572
 1893 0034 5955     		strb	r1, [r3, r5]
ARM GAS  /tmp/ccjFarMV.s 			page 61


1287:segger/rtt/src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 1894              		.loc 1 1287 5 is_stmt 1 view .LVU573
 1895              		.syntax unified
 1896              	@ 1287 "segger/rtt/src/SEGGER_RTT.c" 1
 1897 0036 BFF35F8F 		dmb
 1898              	
 1899              	@ 0 "" 2
 1900              		.loc 1 1287 15 view .LVU574
1288:segger/rtt/src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1901              		.loc 1 1288 5 view .LVU575
 1902              		.loc 1 1288 18 is_stmt 0 view .LVU576
 1903              		.thumb
 1904              		.syntax unified
 1905 003a 04EBCC04 		add	r4, r4, ip, lsl #3
 1906 003e 6262     		str	r2, [r4, #36]
1289:segger/rtt/src/SEGGER_RTT.c ****     Status = 1;
 1907              		.loc 1 1289 5 is_stmt 1 view .LVU577
 1908              	.LVL206:
 1909              		.loc 1 1289 12 is_stmt 0 view .LVU578
 1910 0040 0120     		movs	r0, #1
 1911              	.LVL207:
 1912              	.L103:
1290:segger/rtt/src/SEGGER_RTT.c ****   } else {
1291:segger/rtt/src/SEGGER_RTT.c ****     Status = 0;
1292:segger/rtt/src/SEGGER_RTT.c ****   }
1293:segger/rtt/src/SEGGER_RTT.c ****   //
1294:segger/rtt/src/SEGGER_RTT.c ****   return Status;
1295:segger/rtt/src/SEGGER_RTT.c **** }
 1913              		.loc 1 1295 1 view .LVU579
 1914 0042 30BC     		pop	{r4, r5}
 1915              	.LCFI17:
 1916              		.cfi_remember_state
 1917              		.cfi_restore 5
 1918              		.cfi_restore 4
 1919              		.cfi_def_cfa_offset 0
 1920 0044 7047     		bx	lr
 1921              	.LVL208:
 1922              	.L109:
 1923              	.LCFI18:
 1924              		.cfi_restore_state
1279:segger/rtt/src/SEGGER_RTT.c ****   }
 1925              		.loc 1 1279 11 view .LVU580
 1926 0046 0022     		movs	r2, #0
 1927              	.LVL209:
1279:segger/rtt/src/SEGGER_RTT.c ****   }
 1928              		.loc 1 1279 11 view .LVU581
 1929 0048 E5E7     		b	.L104
 1930              	.LVL210:
 1931              	.L107:
1291:segger/rtt/src/SEGGER_RTT.c ****   }
 1932              		.loc 1 1291 12 view .LVU582
 1933 004a 0020     		movs	r0, #0
 1934              	.LVL211:
1294:segger/rtt/src/SEGGER_RTT.c **** }
 1935              		.loc 1 1294 3 is_stmt 1 view .LVU583
1294:segger/rtt/src/SEGGER_RTT.c **** }
 1936              		.loc 1 1294 10 is_stmt 0 view .LVU584
ARM GAS  /tmp/ccjFarMV.s 			page 62


 1937 004c F9E7     		b	.L103
 1938              	.L111:
 1939 004e 00BF     		.align	2
 1940              	.L110:
 1941 0050 00000000 		.word	_SEGGER_RTT
 1942              		.cfi_endproc
 1943              	.LFE15:
 1945              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 1946              		.align	1
 1947              		.global	SEGGER_RTT_PutCharSkip
 1948              		.syntax unified
 1949              		.thumb
 1950              		.thumb_func
 1952              	SEGGER_RTT_PutCharSkip:
 1953              	.LVL212:
 1954              	.LFB16:
1296:segger/rtt/src/SEGGER_RTT.c **** 
1297:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1298:segger/rtt/src/SEGGER_RTT.c **** *
1299:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1300:segger/rtt/src/SEGGER_RTT.c **** *
1301:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1302:segger/rtt/src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1303:segger/rtt/src/SEGGER_RTT.c **** *
1304:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1305:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1306:segger/rtt/src/SEGGER_RTT.c **** *    c            Byte to be stored.
1307:segger/rtt/src/SEGGER_RTT.c **** *
1308:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1309:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1310:segger/rtt/src/SEGGER_RTT.c **** *
1311:segger/rtt/src/SEGGER_RTT.c **** *  Notes
1312:segger/rtt/src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1313:segger/rtt/src/SEGGER_RTT.c **** */
1314:segger/rtt/src/SEGGER_RTT.c **** 
1315:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 1955              		.loc 1 1315 63 is_stmt 1 view -0
 1956              		.cfi_startproc
 1957              		@ args = 0, pretend = 0, frame = 0
 1958              		@ frame_needed = 0, uses_anonymous_args = 0
 1959              		.loc 1 1315 63 is_stmt 0 view .LVU586
 1960 0000 70B5     		push	{r4, r5, r6, lr}
 1961              	.LCFI19:
 1962              		.cfi_def_cfa_offset 16
 1963              		.cfi_offset 4, -16
 1964              		.cfi_offset 5, -12
 1965              		.cfi_offset 6, -8
 1966              		.cfi_offset 14, -4
 1967 0002 0446     		mov	r4, r0
 1968 0004 0D46     		mov	r5, r1
1316:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1969              		.loc 1 1316 3 is_stmt 1 view .LVU587
1317:segger/rtt/src/SEGGER_RTT.c ****   unsigned              WrOff;
 1970              		.loc 1 1317 3 view .LVU588
1318:segger/rtt/src/SEGGER_RTT.c ****   unsigned              Status;
 1971              		.loc 1 1318 3 view .LVU589
1319:segger/rtt/src/SEGGER_RTT.c ****   volatile char*        pDst;
ARM GAS  /tmp/ccjFarMV.s 			page 63


 1972              		.loc 1 1319 3 view .LVU590
1320:segger/rtt/src/SEGGER_RTT.c ****   //
1321:segger/rtt/src/SEGGER_RTT.c ****   // Prepare
1322:segger/rtt/src/SEGGER_RTT.c ****   //
1323:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 1973              		.loc 1 1323 3 view .LVU591
 1974              	.LBB14:
 1975              		.loc 1 1323 3 view .LVU592
 1976              		.loc 1 1323 3 view .LVU593
 1977              	.LVL213:
 1978              		.loc 1 1323 3 view .LVU594
 1979 0006 1B4B     		ldr	r3, .L121
 1980 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1981 000a DBB2     		uxtb	r3, r3
 1982 000c 532B     		cmp	r3, #83
 1983 000e 2AD1     		bne	.L119
 1984              	.LVL214:
 1985              	.L113:
 1986              		.loc 1 1323 3 is_stmt 0 view .LVU595
 1987              	.LBE14:
 1988              		.loc 1 1323 3 is_stmt 1 discriminator 3 view .LVU596
 1989              	.LBB15:
1324:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1990              		.loc 1 1324 3 view .LVU597
 1991              		.loc 1 1324 3 view .LVU598
 1992              		.syntax unified
 1993              	@ 1324 "segger/rtt/src/SEGGER_RTT.c" 1
 1994 0010 EFF31182 		mrs   r2, basepri  
 1995 0014 4FF02001 		mov   r1, #32       
 1996 0018 81F31188 		msr   basepri, r1  
 1997              		
 1998              	@ 0 "" 2
 1999              	.LVL215:
 2000              		.loc 1 1324 20 view .LVU599
1325:segger/rtt/src/SEGGER_RTT.c ****   //
1326:segger/rtt/src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1327:segger/rtt/src/SEGGER_RTT.c ****   //
1328:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2001              		.loc 1 1328 3 view .LVU600
1329:segger/rtt/src/SEGGER_RTT.c ****   //
1330:segger/rtt/src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1331:segger/rtt/src/SEGGER_RTT.c ****   //
1332:segger/rtt/src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2002              		.loc 1 1332 3 view .LVU601
 2003              		.loc 1 1332 16 is_stmt 0 view .LVU602
 2004              		.thumb
 2005              		.syntax unified
 2006 001c 04EB4401 		add	r1, r4, r4, lsl #1
 2007 0020 144B     		ldr	r3, .L121
 2008 0022 03EBC103 		add	r3, r3, r1, lsl #3
 2009 0026 5E6A     		ldr	r6, [r3, #36]
 2010              		.loc 1 1332 9 view .LVU603
 2011 0028 711C     		adds	r1, r6, #1
 2012              	.LVL216:
1333:segger/rtt/src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2013              		.loc 1 1333 3 is_stmt 1 view .LVU604
 2014              		.loc 1 1333 21 is_stmt 0 view .LVU605
ARM GAS  /tmp/ccjFarMV.s 			page 64


 2015 002a 1B6A     		ldr	r3, [r3, #32]
 2016              		.loc 1 1333 6 view .LVU606
 2017 002c 8B42     		cmp	r3, r1
 2018 002e 1DD0     		beq	.L120
 2019              	.LVL217:
 2020              	.L114:
1334:segger/rtt/src/SEGGER_RTT.c ****     WrOff = 0;
1335:segger/rtt/src/SEGGER_RTT.c ****   }
1336:segger/rtt/src/SEGGER_RTT.c ****   //
1337:segger/rtt/src/SEGGER_RTT.c ****   // Output byte if free space is available
1338:segger/rtt/src/SEGGER_RTT.c ****   //
1339:segger/rtt/src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2021              		.loc 1 1339 3 is_stmt 1 view .LVU607
 2022              		.loc 1 1339 21 is_stmt 0 view .LVU608
 2023 0030 04EB4400 		add	r0, r4, r4, lsl #1
 2024 0034 0F4B     		ldr	r3, .L121
 2025 0036 03EBC003 		add	r3, r3, r0, lsl #3
 2026 003a 9B6A     		ldr	r3, [r3, #40]
 2027              		.loc 1 1339 6 view .LVU609
 2028 003c 8B42     		cmp	r3, r1
 2029 003e 17D0     		beq	.L117
1340:segger/rtt/src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2030              		.loc 1 1340 5 is_stmt 1 view .LVU610
 2031              		.loc 1 1340 19 is_stmt 0 view .LVU611
 2032 0040 0C48     		ldr	r0, .L121
 2033 0042 631C     		adds	r3, r4, #1
 2034 0044 03EB4303 		add	r3, r3, r3, lsl #1
 2035 0048 00EBC303 		add	r3, r0, r3, lsl #3
 2036 004c 5B68     		ldr	r3, [r3, #4]
 2037              	.LVL218:
1341:segger/rtt/src/SEGGER_RTT.c ****     *pDst = c;
 2038              		.loc 1 1341 5 is_stmt 1 view .LVU612
 2039              		.loc 1 1341 11 is_stmt 0 view .LVU613
 2040 004e 9D55     		strb	r5, [r3, r6]
1342:segger/rtt/src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2041              		.loc 1 1342 5 is_stmt 1 view .LVU614
 2042              		.syntax unified
 2043              	@ 1342 "segger/rtt/src/SEGGER_RTT.c" 1
 2044 0050 BFF35F8F 		dmb
 2045              	
 2046              	@ 0 "" 2
 2047              		.loc 1 1342 15 view .LVU615
1343:segger/rtt/src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2048              		.loc 1 1343 5 view .LVU616
 2049              		.loc 1 1343 18 is_stmt 0 view .LVU617
 2050              		.thumb
 2051              		.syntax unified
 2052 0054 04EB4404 		add	r4, r4, r4, lsl #1
 2053              	.LVL219:
 2054              		.loc 1 1343 18 view .LVU618
 2055 0058 00EBC400 		add	r0, r0, r4, lsl #3
 2056 005c 4162     		str	r1, [r0, #36]
1344:segger/rtt/src/SEGGER_RTT.c ****     Status = 1;
 2057              		.loc 1 1344 5 is_stmt 1 view .LVU619
 2058              	.LVL220:
 2059              		.loc 1 1344 12 is_stmt 0 view .LVU620
 2060 005e 0120     		movs	r0, #1
ARM GAS  /tmp/ccjFarMV.s 			page 65


 2061              	.LVL221:
 2062              	.L115:
1345:segger/rtt/src/SEGGER_RTT.c ****   } else {
1346:segger/rtt/src/SEGGER_RTT.c ****     Status = 0;
1347:segger/rtt/src/SEGGER_RTT.c ****   }
1348:segger/rtt/src/SEGGER_RTT.c ****   //
1349:segger/rtt/src/SEGGER_RTT.c ****   // Finish up.
1350:segger/rtt/src/SEGGER_RTT.c ****   //
1351:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2063              		.loc 1 1351 3 is_stmt 1 view .LVU621
 2064              		.syntax unified
 2065              	@ 1351 "segger/rtt/src/SEGGER_RTT.c" 1
 2066 0060 82F31188 		msr   basepri, r2  
 2067              		
 2068              	@ 0 "" 2
 2069              		.thumb
 2070              		.syntax unified
 2071              	.LBE15:
 2072              		.loc 1 1351 22 view .LVU622
1352:segger/rtt/src/SEGGER_RTT.c ****   //
1353:segger/rtt/src/SEGGER_RTT.c ****   return Status;
 2073              		.loc 1 1353 3 view .LVU623
1354:segger/rtt/src/SEGGER_RTT.c **** }
 2074              		.loc 1 1354 1 is_stmt 0 view .LVU624
 2075 0064 70BD     		pop	{r4, r5, r6, pc}
 2076              	.LVL222:
 2077              	.L119:
 2078              	.LBB16:
1323:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2079              		.loc 1 1323 3 is_stmt 1 discriminator 1 view .LVU625
 2080 0066 FFF7FEFF 		bl	_DoInit
 2081              	.LVL223:
1323:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2082              		.loc 1 1323 3 is_stmt 0 discriminator 1 view .LVU626
 2083 006a D1E7     		b	.L113
 2084              	.LVL224:
 2085              	.L120:
1323:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2086              		.loc 1 1323 3 discriminator 1 view .LVU627
 2087              	.LBE16:
 2088              	.LBB17:
1334:segger/rtt/src/SEGGER_RTT.c ****   }
 2089              		.loc 1 1334 11 view .LVU628
 2090 006c 0021     		movs	r1, #0
 2091              	.LVL225:
1334:segger/rtt/src/SEGGER_RTT.c ****   }
 2092              		.loc 1 1334 11 view .LVU629
 2093 006e DFE7     		b	.L114
 2094              	.LVL226:
 2095              	.L117:
1346:segger/rtt/src/SEGGER_RTT.c ****   }
 2096              		.loc 1 1346 12 view .LVU630
 2097 0070 0020     		movs	r0, #0
 2098 0072 F5E7     		b	.L115
 2099              	.L122:
 2100              		.align	2
 2101              	.L121:
ARM GAS  /tmp/ccjFarMV.s 			page 66


 2102 0074 00000000 		.word	_SEGGER_RTT
 2103              	.LBE17:
 2104              		.cfi_endproc
 2105              	.LFE16:
 2107              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 2108              		.align	1
 2109              		.global	SEGGER_RTT_PutChar
 2110              		.syntax unified
 2111              		.thumb
 2112              		.thumb_func
 2114              	SEGGER_RTT_PutChar:
 2115              	.LVL227:
 2116              	.LFB17:
1355:segger/rtt/src/SEGGER_RTT.c **** 
1356:segger/rtt/src/SEGGER_RTT.c ****  /*********************************************************************
1357:segger/rtt/src/SEGGER_RTT.c **** *
1358:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1359:segger/rtt/src/SEGGER_RTT.c **** *
1360:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1361:segger/rtt/src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1362:segger/rtt/src/SEGGER_RTT.c **** *
1363:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1364:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1365:segger/rtt/src/SEGGER_RTT.c **** *    c            Byte to be stored.
1366:segger/rtt/src/SEGGER_RTT.c **** *
1367:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1368:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1369:segger/rtt/src/SEGGER_RTT.c **** *
1370:segger/rtt/src/SEGGER_RTT.c **** *  Notes
1371:segger/rtt/src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1372:segger/rtt/src/SEGGER_RTT.c **** */
1373:segger/rtt/src/SEGGER_RTT.c **** 
1374:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 2117              		.loc 1 1374 59 is_stmt 1 view -0
 2118              		.cfi_startproc
 2119              		@ args = 0, pretend = 0, frame = 0
 2120              		@ frame_needed = 0, uses_anonymous_args = 0
 2121              		.loc 1 1374 59 is_stmt 0 view .LVU632
 2122 0000 70B5     		push	{r4, r5, r6, lr}
 2123              	.LCFI20:
 2124              		.cfi_def_cfa_offset 16
 2125              		.cfi_offset 4, -16
 2126              		.cfi_offset 5, -12
 2127              		.cfi_offset 6, -8
 2128              		.cfi_offset 14, -4
 2129 0002 0446     		mov	r4, r0
 2130 0004 0D46     		mov	r5, r1
1375:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2131              		.loc 1 1375 3 is_stmt 1 view .LVU633
1376:segger/rtt/src/SEGGER_RTT.c ****   unsigned              WrOff;
 2132              		.loc 1 1376 3 view .LVU634
1377:segger/rtt/src/SEGGER_RTT.c ****   unsigned              Status;
 2133              		.loc 1 1377 3 view .LVU635
1378:segger/rtt/src/SEGGER_RTT.c ****   volatile char*        pDst;
 2134              		.loc 1 1378 3 view .LVU636
1379:segger/rtt/src/SEGGER_RTT.c ****   //
1380:segger/rtt/src/SEGGER_RTT.c ****   // Prepare
ARM GAS  /tmp/ccjFarMV.s 			page 67


1381:segger/rtt/src/SEGGER_RTT.c ****   //
1382:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 2135              		.loc 1 1382 3 view .LVU637
 2136              	.LBB18:
 2137              		.loc 1 1382 3 view .LVU638
 2138              		.loc 1 1382 3 view .LVU639
 2139              	.LVL228:
 2140              		.loc 1 1382 3 view .LVU640
 2141 0006 244B     		ldr	r3, .L134
 2142 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2143 000a DBB2     		uxtb	r3, r3
 2144 000c 532B     		cmp	r3, #83
 2145 000e 33D1     		bne	.L132
 2146              	.LVL229:
 2147              	.L124:
 2148              		.loc 1 1382 3 is_stmt 0 view .LVU641
 2149              	.LBE18:
 2150              		.loc 1 1382 3 is_stmt 1 discriminator 3 view .LVU642
 2151              	.LBB19:
1383:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2152              		.loc 1 1383 3 view .LVU643
 2153              		.loc 1 1383 3 view .LVU644
 2154              		.syntax unified
 2155              	@ 1383 "segger/rtt/src/SEGGER_RTT.c" 1
 2156 0010 EFF31183 		mrs   r3, basepri  
 2157 0014 4FF02001 		mov   r1, #32       
 2158 0018 81F31188 		msr   basepri, r1  
 2159              		
 2160              	@ 0 "" 2
 2161              		.thumb
 2162              		.syntax unified
 2163 001c 1946     		mov	r1, r3
 2164              	.LVL230:
 2165              		.loc 1 1383 20 view .LVU645
1384:segger/rtt/src/SEGGER_RTT.c ****   //
1385:segger/rtt/src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1386:segger/rtt/src/SEGGER_RTT.c ****   //
1387:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2166              		.loc 1 1387 3 view .LVU646
1388:segger/rtt/src/SEGGER_RTT.c ****   //
1389:segger/rtt/src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1390:segger/rtt/src/SEGGER_RTT.c ****   //
1391:segger/rtt/src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2167              		.loc 1 1391 3 view .LVU647
 2168              		.loc 1 1391 16 is_stmt 0 view .LVU648
 2169 001e 04EB4402 		add	r2, r4, r4, lsl #1
 2170 0022 1D4B     		ldr	r3, .L134
 2171 0024 03EBC203 		add	r3, r3, r2, lsl #3
 2172 0028 5E6A     		ldr	r6, [r3, #36]
 2173              		.loc 1 1391 9 view .LVU649
 2174 002a 701C     		adds	r0, r6, #1
 2175              	.LVL231:
1392:segger/rtt/src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2176              		.loc 1 1392 3 is_stmt 1 view .LVU650
 2177              		.loc 1 1392 21 is_stmt 0 view .LVU651
 2178 002c 1B6A     		ldr	r3, [r3, #32]
 2179              		.loc 1 1392 6 view .LVU652
ARM GAS  /tmp/ccjFarMV.s 			page 68


 2180 002e 8342     		cmp	r3, r0
 2181 0030 25D0     		beq	.L133
 2182              	.LVL232:
 2183              	.L125:
1393:segger/rtt/src/SEGGER_RTT.c ****     WrOff = 0;
1394:segger/rtt/src/SEGGER_RTT.c ****   }
1395:segger/rtt/src/SEGGER_RTT.c ****   //
1396:segger/rtt/src/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1397:segger/rtt/src/SEGGER_RTT.c ****   //
1398:segger/rtt/src/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2184              		.loc 1 1398 3 is_stmt 1 view .LVU653
 2185              		.loc 1 1398 12 is_stmt 0 view .LVU654
 2186 0032 04EB4402 		add	r2, r4, r4, lsl #1
 2187 0036 184B     		ldr	r3, .L134
 2188 0038 03EBC203 		add	r3, r3, r2, lsl #3
 2189 003c DB6A     		ldr	r3, [r3, #44]
 2190              		.loc 1 1398 6 view .LVU655
 2191 003e 022B     		cmp	r3, #2
 2192 0040 1FD0     		beq	.L127
 2193              	.L126:
1399:segger/rtt/src/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
1400:segger/rtt/src/SEGGER_RTT.c ****       ;
1401:segger/rtt/src/SEGGER_RTT.c ****     }
1402:segger/rtt/src/SEGGER_RTT.c ****   }
1403:segger/rtt/src/SEGGER_RTT.c ****   //
1404:segger/rtt/src/SEGGER_RTT.c ****   // Output byte if free space is available
1405:segger/rtt/src/SEGGER_RTT.c ****   //
1406:segger/rtt/src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2194              		.loc 1 1406 3 is_stmt 1 view .LVU656
 2195              		.loc 1 1406 21 is_stmt 0 view .LVU657
 2196 0042 04EB4402 		add	r2, r4, r4, lsl #1
 2197 0046 144B     		ldr	r3, .L134
 2198 0048 03EBC203 		add	r3, r3, r2, lsl #3
 2199 004c 9B6A     		ldr	r3, [r3, #40]
 2200              		.loc 1 1406 6 view .LVU658
 2201 004e 8342     		cmp	r3, r0
 2202 0050 20D0     		beq	.L130
1407:segger/rtt/src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2203              		.loc 1 1407 5 is_stmt 1 view .LVU659
 2204              		.loc 1 1407 19 is_stmt 0 view .LVU660
 2205 0052 114A     		ldr	r2, .L134
 2206 0054 631C     		adds	r3, r4, #1
 2207 0056 03EB4303 		add	r3, r3, r3, lsl #1
 2208 005a 02EBC303 		add	r3, r2, r3, lsl #3
 2209 005e 5B68     		ldr	r3, [r3, #4]
 2210              	.LVL233:
1408:segger/rtt/src/SEGGER_RTT.c ****     *pDst = c;
 2211              		.loc 1 1408 5 is_stmt 1 view .LVU661
 2212              		.loc 1 1408 11 is_stmt 0 view .LVU662
 2213 0060 9D55     		strb	r5, [r3, r6]
1409:segger/rtt/src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2214              		.loc 1 1409 5 is_stmt 1 view .LVU663
 2215              		.syntax unified
 2216              	@ 1409 "segger/rtt/src/SEGGER_RTT.c" 1
 2217 0062 BFF35F8F 		dmb
 2218              	
 2219              	@ 0 "" 2
ARM GAS  /tmp/ccjFarMV.s 			page 69


 2220              		.loc 1 1409 15 view .LVU664
1410:segger/rtt/src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2221              		.loc 1 1410 5 view .LVU665
 2222              		.loc 1 1410 18 is_stmt 0 view .LVU666
 2223              		.thumb
 2224              		.syntax unified
 2225 0066 04EB4404 		add	r4, r4, r4, lsl #1
 2226              	.LVL234:
 2227              		.loc 1 1410 18 view .LVU667
 2228 006a 02EBC402 		add	r2, r2, r4, lsl #3
 2229 006e 5062     		str	r0, [r2, #36]
1411:segger/rtt/src/SEGGER_RTT.c ****     Status = 1;
 2230              		.loc 1 1411 5 is_stmt 1 view .LVU668
 2231              	.LVL235:
 2232              		.loc 1 1411 12 is_stmt 0 view .LVU669
 2233 0070 0120     		movs	r0, #1
 2234              	.LVL236:
 2235              	.L128:
1412:segger/rtt/src/SEGGER_RTT.c ****   } else {
1413:segger/rtt/src/SEGGER_RTT.c ****     Status = 0;
1414:segger/rtt/src/SEGGER_RTT.c ****   }
1415:segger/rtt/src/SEGGER_RTT.c ****   //
1416:segger/rtt/src/SEGGER_RTT.c ****   // Finish up.
1417:segger/rtt/src/SEGGER_RTT.c ****   //
1418:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2236              		.loc 1 1418 3 is_stmt 1 view .LVU670
 2237              		.syntax unified
 2238              	@ 1418 "segger/rtt/src/SEGGER_RTT.c" 1
 2239 0072 81F31188 		msr   basepri, r1  
 2240              		
 2241              	@ 0 "" 2
 2242              		.thumb
 2243              		.syntax unified
 2244              	.LBE19:
 2245              		.loc 1 1418 22 view .LVU671
1419:segger/rtt/src/SEGGER_RTT.c ****   return Status;
 2246              		.loc 1 1419 3 view .LVU672
1420:segger/rtt/src/SEGGER_RTT.c **** }
 2247              		.loc 1 1420 1 is_stmt 0 view .LVU673
 2248 0076 70BD     		pop	{r4, r5, r6, pc}
 2249              	.LVL237:
 2250              	.L132:
 2251              	.LBB20:
1382:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2252              		.loc 1 1382 3 is_stmt 1 discriminator 1 view .LVU674
 2253 0078 FFF7FEFF 		bl	_DoInit
 2254              	.LVL238:
1382:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2255              		.loc 1 1382 3 is_stmt 0 discriminator 1 view .LVU675
 2256 007c C8E7     		b	.L124
 2257              	.LVL239:
 2258              	.L133:
1382:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2259              		.loc 1 1382 3 discriminator 1 view .LVU676
 2260              	.LBE20:
 2261              	.LBB21:
1393:segger/rtt/src/SEGGER_RTT.c ****   }
ARM GAS  /tmp/ccjFarMV.s 			page 70


 2262              		.loc 1 1393 11 view .LVU677
 2263 007e 0020     		movs	r0, #0
 2264              	.LVL240:
1393:segger/rtt/src/SEGGER_RTT.c ****   }
 2265              		.loc 1 1393 11 view .LVU678
 2266 0080 D7E7     		b	.L125
 2267              	.LVL241:
 2268              	.L127:
1400:segger/rtt/src/SEGGER_RTT.c ****     }
 2269              		.loc 1 1400 7 is_stmt 1 view .LVU679
1399:segger/rtt/src/SEGGER_RTT.c ****       ;
 2270              		.loc 1 1399 18 discriminator 1 view .LVU680
1399:segger/rtt/src/SEGGER_RTT.c ****       ;
 2271              		.loc 1 1399 26 is_stmt 0 discriminator 1 view .LVU681
 2272 0082 04EB4402 		add	r2, r4, r4, lsl #1
 2273 0086 044B     		ldr	r3, .L134
 2274 0088 03EBC203 		add	r3, r3, r2, lsl #3
 2275 008c 9B6A     		ldr	r3, [r3, #40]
1399:segger/rtt/src/SEGGER_RTT.c ****       ;
 2276              		.loc 1 1399 18 discriminator 1 view .LVU682
 2277 008e 8342     		cmp	r3, r0
 2278 0090 F7D0     		beq	.L127
 2279 0092 D6E7     		b	.L126
 2280              	.L130:
1413:segger/rtt/src/SEGGER_RTT.c ****   }
 2281              		.loc 1 1413 12 view .LVU683
 2282 0094 0020     		movs	r0, #0
 2283              	.LVL242:
1413:segger/rtt/src/SEGGER_RTT.c ****   }
 2284              		.loc 1 1413 12 view .LVU684
 2285 0096 ECE7     		b	.L128
 2286              	.L135:
 2287              		.align	2
 2288              	.L134:
 2289 0098 00000000 		.word	_SEGGER_RTT
 2290              	.LBE21:
 2291              		.cfi_endproc
 2292              	.LFE17:
 2294              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 2295              		.align	1
 2296              		.global	SEGGER_RTT_GetKey
 2297              		.syntax unified
 2298              		.thumb
 2299              		.thumb_func
 2301              	SEGGER_RTT_GetKey:
 2302              	.LFB18:
1421:segger/rtt/src/SEGGER_RTT.c **** 
1422:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1423:segger/rtt/src/SEGGER_RTT.c **** *
1424:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1425:segger/rtt/src/SEGGER_RTT.c **** *
1426:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1427:segger/rtt/src/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1428:segger/rtt/src/SEGGER_RTT.c **** *    Host has previously stored data there.
1429:segger/rtt/src/SEGGER_RTT.c **** *
1430:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1431:segger/rtt/src/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
ARM GAS  /tmp/ccjFarMV.s 			page 71


1432:segger/rtt/src/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1433:segger/rtt/src/SEGGER_RTT.c **** *
1434:segger/rtt/src/SEGGER_RTT.c **** *  Notes
1435:segger/rtt/src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1436:segger/rtt/src/SEGGER_RTT.c **** */
1437:segger/rtt/src/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 2303              		.loc 1 1437 29 is_stmt 1 view -0
 2304              		.cfi_startproc
 2305              		@ args = 0, pretend = 0, frame = 8
 2306              		@ frame_needed = 0, uses_anonymous_args = 0
 2307 0000 00B5     		push	{lr}
 2308              	.LCFI21:
 2309              		.cfi_def_cfa_offset 4
 2310              		.cfi_offset 14, -4
 2311 0002 83B0     		sub	sp, sp, #12
 2312              	.LCFI22:
 2313              		.cfi_def_cfa_offset 16
1438:segger/rtt/src/SEGGER_RTT.c ****   char c;
 2314              		.loc 1 1438 3 view .LVU686
1439:segger/rtt/src/SEGGER_RTT.c ****   int r;
 2315              		.loc 1 1439 3 view .LVU687
1440:segger/rtt/src/SEGGER_RTT.c **** 
1441:segger/rtt/src/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 2316              		.loc 1 1441 3 view .LVU688
 2317              		.loc 1 1441 12 is_stmt 0 view .LVU689
 2318 0004 0122     		movs	r2, #1
 2319 0006 0DF10701 		add	r1, sp, #7
 2320 000a 0020     		movs	r0, #0
 2321 000c FFF7FEFF 		bl	SEGGER_RTT_Read
 2322              	.LVL243:
1442:segger/rtt/src/SEGGER_RTT.c ****   if (r == 1) {
 2323              		.loc 1 1442 3 is_stmt 1 view .LVU690
 2324              		.loc 1 1442 6 is_stmt 0 view .LVU691
 2325 0010 0128     		cmp	r0, #1
 2326 0012 04D1     		bne	.L138
1443:segger/rtt/src/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2327              		.loc 1 1443 5 is_stmt 1 view .LVU692
 2328              		.loc 1 1443 9 is_stmt 0 view .LVU693
 2329 0014 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2330              	.LVL244:
 2331              	.L136:
1444:segger/rtt/src/SEGGER_RTT.c ****   } else {
1445:segger/rtt/src/SEGGER_RTT.c ****     r = -1;
1446:segger/rtt/src/SEGGER_RTT.c ****   }
1447:segger/rtt/src/SEGGER_RTT.c ****   return r;
1448:segger/rtt/src/SEGGER_RTT.c **** }
 2332              		.loc 1 1448 1 view .LVU694
 2333 0018 03B0     		add	sp, sp, #12
 2334              	.LCFI23:
 2335              		.cfi_remember_state
 2336              		.cfi_def_cfa_offset 4
 2337              		@ sp needed
 2338 001a 5DF804FB 		ldr	pc, [sp], #4
 2339              	.LVL245:
 2340              	.L138:
 2341              	.LCFI24:
 2342              		.cfi_restore_state
ARM GAS  /tmp/ccjFarMV.s 			page 72


1445:segger/rtt/src/SEGGER_RTT.c ****   }
 2343              		.loc 1 1445 7 view .LVU695
 2344 001e 4FF0FF30 		mov	r0, #-1
 2345              	.LVL246:
1447:segger/rtt/src/SEGGER_RTT.c **** }
 2346              		.loc 1 1447 3 is_stmt 1 view .LVU696
1447:segger/rtt/src/SEGGER_RTT.c **** }
 2347              		.loc 1 1447 10 is_stmt 0 view .LVU697
 2348 0022 F9E7     		b	.L136
 2349              		.cfi_endproc
 2350              	.LFE18:
 2352              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 2353              		.align	1
 2354              		.global	SEGGER_RTT_WaitKey
 2355              		.syntax unified
 2356              		.thumb
 2357              		.thumb_func
 2359              	SEGGER_RTT_WaitKey:
 2360              	.LFB19:
1449:segger/rtt/src/SEGGER_RTT.c **** 
1450:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1451:segger/rtt/src/SEGGER_RTT.c **** *
1452:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1453:segger/rtt/src/SEGGER_RTT.c **** *
1454:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1455:segger/rtt/src/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1456:segger/rtt/src/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1457:segger/rtt/src/SEGGER_RTT.c **** *
1458:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1459:segger/rtt/src/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1460:segger/rtt/src/SEGGER_RTT.c **** *
1461:segger/rtt/src/SEGGER_RTT.c **** *  Notes
1462:segger/rtt/src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1463:segger/rtt/src/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1464:segger/rtt/src/SEGGER_RTT.c **** */
1465:segger/rtt/src/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 2361              		.loc 1 1465 30 is_stmt 1 view -0
 2362              		.cfi_startproc
 2363              		@ args = 0, pretend = 0, frame = 0
 2364              		@ frame_needed = 0, uses_anonymous_args = 0
 2365 0000 08B5     		push	{r3, lr}
 2366              	.LCFI25:
 2367              		.cfi_def_cfa_offset 8
 2368              		.cfi_offset 3, -8
 2369              		.cfi_offset 14, -4
 2370              	.L141:
1466:segger/rtt/src/SEGGER_RTT.c ****   int r;
 2371              		.loc 1 1466 3 view .LVU699
1467:segger/rtt/src/SEGGER_RTT.c **** 
1468:segger/rtt/src/SEGGER_RTT.c ****   do {
 2372              		.loc 1 1468 3 view .LVU700
1469:segger/rtt/src/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 2373              		.loc 1 1469 5 view .LVU701
 2374              		.loc 1 1469 9 is_stmt 0 view .LVU702
 2375 0002 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 2376              	.LVL247:
1470:segger/rtt/src/SEGGER_RTT.c ****   } while (r < 0);
ARM GAS  /tmp/ccjFarMV.s 			page 73


 2377              		.loc 1 1470 14 is_stmt 1 discriminator 1 view .LVU703
 2378 0006 0028     		cmp	r0, #0
 2379              		.loc 1 1470 14 is_stmt 0 discriminator 1 view .LVU704
 2380 0008 FBDB     		blt	.L141
1471:segger/rtt/src/SEGGER_RTT.c ****   return r;
 2381              		.loc 1 1471 3 is_stmt 1 view .LVU705
1472:segger/rtt/src/SEGGER_RTT.c **** }
 2382              		.loc 1 1472 1 is_stmt 0 view .LVU706
 2383 000a 08BD     		pop	{r3, pc}
 2384              		.cfi_endproc
 2385              	.LFE19:
 2387              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 2388              		.align	1
 2389              		.global	SEGGER_RTT_HasKey
 2390              		.syntax unified
 2391              		.thumb
 2392              		.thumb_func
 2394              	SEGGER_RTT_HasKey:
 2395              	.LFB20:
1473:segger/rtt/src/SEGGER_RTT.c **** 
1474:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1475:segger/rtt/src/SEGGER_RTT.c **** *
1476:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1477:segger/rtt/src/SEGGER_RTT.c **** *
1478:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1479:segger/rtt/src/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1480:segger/rtt/src/SEGGER_RTT.c **** *
1481:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1482:segger/rtt/src/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1483:segger/rtt/src/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1484:segger/rtt/src/SEGGER_RTT.c **** *
1485:segger/rtt/src/SEGGER_RTT.c **** *  Notes
1486:segger/rtt/src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1487:segger/rtt/src/SEGGER_RTT.c **** */
1488:segger/rtt/src/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 2396              		.loc 1 1488 29 is_stmt 1 view -0
 2397              		.cfi_startproc
 2398              		@ args = 0, pretend = 0, frame = 0
 2399              		@ frame_needed = 0, uses_anonymous_args = 0
 2400 0000 08B5     		push	{r3, lr}
 2401              	.LCFI26:
 2402              		.cfi_def_cfa_offset 8
 2403              		.cfi_offset 3, -8
 2404              		.cfi_offset 14, -4
1489:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2405              		.loc 1 1489 3 view .LVU708
1490:segger/rtt/src/SEGGER_RTT.c ****   unsigned RdOff;
 2406              		.loc 1 1490 3 view .LVU709
1491:segger/rtt/src/SEGGER_RTT.c ****   int r;
 2407              		.loc 1 1491 3 view .LVU710
1492:segger/rtt/src/SEGGER_RTT.c **** 
1493:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 2408              		.loc 1 1493 3 view .LVU711
 2409              	.LBB22:
 2410              		.loc 1 1493 3 view .LVU712
 2411              		.loc 1 1493 3 view .LVU713
 2412              	.LVL248:
ARM GAS  /tmp/ccjFarMV.s 			page 74


 2413              		.loc 1 1493 3 view .LVU714
 2414 0002 084B     		ldr	r3, .L149
 2415 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2416 0006 DBB2     		uxtb	r3, r3
 2417 0008 532B     		cmp	r3, #83
 2418 000a 06D1     		bne	.L148
 2419              	.L144:
 2420              	.LBE22:
 2421              		.loc 1 1493 3 discriminator 3 view .LVU715
1494:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  /
 2422              		.loc 1 1494 3 view .LVU716
 2423              	.LVL249:
1495:segger/rtt/src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 2424              		.loc 1 1495 3 view .LVU717
 2425              		.loc 1 1495 9 is_stmt 0 view .LVU718
 2426 000c 054B     		ldr	r3, .L149
 2427 000e 1A6F     		ldr	r2, [r3, #112]
 2428              	.LVL250:
1496:segger/rtt/src/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
 2429              		.loc 1 1496 3 is_stmt 1 view .LVU719
 2430              		.loc 1 1496 21 is_stmt 0 view .LVU720
 2431 0010 DB6E     		ldr	r3, [r3, #108]
 2432              		.loc 1 1496 6 view .LVU721
 2433 0012 9342     		cmp	r3, r2
 2434 0014 04D0     		beq	.L146
1497:segger/rtt/src/SEGGER_RTT.c ****     r = 1;
 2435              		.loc 1 1497 7 view .LVU722
 2436 0016 0120     		movs	r0, #1
 2437              	.L143:
1498:segger/rtt/src/SEGGER_RTT.c ****   } else {
1499:segger/rtt/src/SEGGER_RTT.c ****     r = 0;
1500:segger/rtt/src/SEGGER_RTT.c ****   }
1501:segger/rtt/src/SEGGER_RTT.c ****   return r;
1502:segger/rtt/src/SEGGER_RTT.c **** }
 2438              		.loc 1 1502 1 view .LVU723
 2439 0018 08BD     		pop	{r3, pc}
 2440              	.LVL251:
 2441              	.L148:
 2442              	.LBB23:
1493:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  /
 2443              		.loc 1 1493 3 is_stmt 1 discriminator 1 view .LVU724
 2444 001a FFF7FEFF 		bl	_DoInit
 2445              	.LVL252:
 2446 001e F5E7     		b	.L144
 2447              	.LVL253:
 2448              	.L146:
1493:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  /
 2449              		.loc 1 1493 3 is_stmt 0 discriminator 1 view .LVU725
 2450              	.LBE23:
1499:segger/rtt/src/SEGGER_RTT.c ****   }
 2451              		.loc 1 1499 7 view .LVU726
 2452 0020 0020     		movs	r0, #0
 2453              	.LVL254:
1501:segger/rtt/src/SEGGER_RTT.c **** }
 2454              		.loc 1 1501 3 is_stmt 1 view .LVU727
1501:segger/rtt/src/SEGGER_RTT.c **** }
 2455              		.loc 1 1501 10 is_stmt 0 view .LVU728
ARM GAS  /tmp/ccjFarMV.s 			page 75


 2456 0022 F9E7     		b	.L143
 2457              	.L150:
 2458              		.align	2
 2459              	.L149:
 2460 0024 00000000 		.word	_SEGGER_RTT
 2461              		.cfi_endproc
 2462              	.LFE20:
 2464              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 2465              		.align	1
 2466              		.global	SEGGER_RTT_HasData
 2467              		.syntax unified
 2468              		.thumb
 2469              		.thumb_func
 2471              	SEGGER_RTT_HasData:
 2472              	.LVL255:
 2473              	.LFB21:
1503:segger/rtt/src/SEGGER_RTT.c **** 
1504:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1505:segger/rtt/src/SEGGER_RTT.c **** *
1506:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1507:segger/rtt/src/SEGGER_RTT.c **** *
1508:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1509:segger/rtt/src/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1510:segger/rtt/src/SEGGER_RTT.c **** *
1511:segger/rtt/src/SEGGER_RTT.c **** *  Return value:
1512:segger/rtt/src/SEGGER_RTT.c **** *  ==0:  No data
1513:segger/rtt/src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1514:segger/rtt/src/SEGGER_RTT.c **** *
1515:segger/rtt/src/SEGGER_RTT.c **** */
1516:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2474              		.loc 1 1516 51 is_stmt 1 view -0
 2475              		.cfi_startproc
 2476              		@ args = 0, pretend = 0, frame = 0
 2477              		@ frame_needed = 0, uses_anonymous_args = 0
 2478              		@ link register save eliminated.
1517:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2479              		.loc 1 1517 3 view .LVU730
1518:segger/rtt/src/SEGGER_RTT.c ****   unsigned                v;
 2480              		.loc 1 1518 3 view .LVU731
1519:segger/rtt/src/SEGGER_RTT.c **** 
1520:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHE
 2481              		.loc 1 1520 3 view .LVU732
1521:segger/rtt/src/SEGGER_RTT.c ****   v = pRing->WrOff;
 2482              		.loc 1 1521 3 view .LVU733
 2483              		.loc 1 1521 5 is_stmt 0 view .LVU734
 2484 0000 064B     		ldr	r3, .L152
 2485 0002 00EB4002 		add	r2, r0, r0, lsl #1
 2486 0006 03EBC202 		add	r2, r3, r2, lsl #3
 2487 000a D26E     		ldr	r2, [r2, #108]
 2488              	.LVL256:
1522:segger/rtt/src/SEGGER_RTT.c ****   return v - pRing->RdOff;
 2489              		.loc 1 1522 3 is_stmt 1 view .LVU735
 2490              		.loc 1 1522 19 is_stmt 0 view .LVU736
 2491 000c 00EB4000 		add	r0, r0, r0, lsl #1
 2492              	.LVL257:
 2493              		.loc 1 1522 19 view .LVU737
 2494 0010 03EBC003 		add	r3, r3, r0, lsl #3
ARM GAS  /tmp/ccjFarMV.s 			page 76


 2495 0014 186F     		ldr	r0, [r3, #112]
1523:segger/rtt/src/SEGGER_RTT.c **** }
 2496              		.loc 1 1523 1 view .LVU738
 2497 0016 101A     		subs	r0, r2, r0
 2498 0018 7047     		bx	lr
 2499              	.L153:
 2500 001a 00BF     		.align	2
 2501              	.L152:
 2502 001c 00000000 		.word	_SEGGER_RTT
 2503              		.cfi_endproc
 2504              	.LFE21:
 2506              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2507              		.align	1
 2508              		.global	SEGGER_RTT_HasDataUp
 2509              		.syntax unified
 2510              		.thumb
 2511              		.thumb_func
 2513              	SEGGER_RTT_HasDataUp:
 2514              	.LVL258:
 2515              	.LFB22:
1524:segger/rtt/src/SEGGER_RTT.c **** 
1525:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1526:segger/rtt/src/SEGGER_RTT.c **** *
1527:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1528:segger/rtt/src/SEGGER_RTT.c **** *
1529:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1530:segger/rtt/src/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1531:segger/rtt/src/SEGGER_RTT.c **** *
1532:segger/rtt/src/SEGGER_RTT.c **** *  Return value:
1533:segger/rtt/src/SEGGER_RTT.c **** *  ==0:  No data
1534:segger/rtt/src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1535:segger/rtt/src/SEGGER_RTT.c **** *
1536:segger/rtt/src/SEGGER_RTT.c **** */
1537:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2516              		.loc 1 1537 53 is_stmt 1 view -0
 2517              		.cfi_startproc
 2518              		@ args = 0, pretend = 0, frame = 0
 2519              		@ frame_needed = 0, uses_anonymous_args = 0
 2520              		@ link register save eliminated.
1538:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2521              		.loc 1 1538 3 view .LVU740
1539:segger/rtt/src/SEGGER_RTT.c ****   unsigned                v;
 2522              		.loc 1 1539 3 view .LVU741
1540:segger/rtt/src/SEGGER_RTT.c **** 
1541:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2523              		.loc 1 1541 3 view .LVU742
1542:segger/rtt/src/SEGGER_RTT.c ****   v = pRing->RdOff;
 2524              		.loc 1 1542 3 view .LVU743
 2525              		.loc 1 1542 5 is_stmt 0 view .LVU744
 2526 0000 064B     		ldr	r3, .L155
 2527 0002 00EB4002 		add	r2, r0, r0, lsl #1
 2528 0006 03EBC202 		add	r2, r3, r2, lsl #3
 2529 000a 926A     		ldr	r2, [r2, #40]
 2530              	.LVL259:
1543:segger/rtt/src/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2531              		.loc 1 1543 3 is_stmt 1 view .LVU745
 2532              		.loc 1 1543 15 is_stmt 0 view .LVU746
ARM GAS  /tmp/ccjFarMV.s 			page 77


 2533 000c 00EB4000 		add	r0, r0, r0, lsl #1
 2534              	.LVL260:
 2535              		.loc 1 1543 15 view .LVU747
 2536 0010 03EBC003 		add	r3, r3, r0, lsl #3
 2537 0014 586A     		ldr	r0, [r3, #36]
1544:segger/rtt/src/SEGGER_RTT.c **** }
 2538              		.loc 1 1544 1 view .LVU748
 2539 0016 801A     		subs	r0, r0, r2
 2540 0018 7047     		bx	lr
 2541              	.L156:
 2542 001a 00BF     		.align	2
 2543              	.L155:
 2544 001c 00000000 		.word	_SEGGER_RTT
 2545              		.cfi_endproc
 2546              	.LFE22:
 2548              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2549              		.align	1
 2550              		.global	SEGGER_RTT_AllocDownBuffer
 2551              		.syntax unified
 2552              		.thumb
 2553              		.thumb_func
 2555              	SEGGER_RTT_AllocDownBuffer:
 2556              	.LVL261:
 2557              	.LFB23:
1545:segger/rtt/src/SEGGER_RTT.c **** 
1546:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1547:segger/rtt/src/SEGGER_RTT.c **** *
1548:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1549:segger/rtt/src/SEGGER_RTT.c **** *
1550:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1551:segger/rtt/src/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1552:segger/rtt/src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1553:segger/rtt/src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1554:segger/rtt/src/SEGGER_RTT.c **** *
1555:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1556:segger/rtt/src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1557:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1558:segger/rtt/src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1559:segger/rtt/src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1560:segger/rtt/src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1561:segger/rtt/src/SEGGER_RTT.c **** *
1562:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1563:segger/rtt/src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1564:segger/rtt/src/SEGGER_RTT.c **** *     < 0 - Error
1565:segger/rtt/src/SEGGER_RTT.c **** */
1566:segger/rtt/src/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 2558              		.loc 1 1566 103 is_stmt 1 view -0
 2559              		.cfi_startproc
 2560              		@ args = 0, pretend = 0, frame = 0
 2561              		@ frame_needed = 0, uses_anonymous_args = 0
 2562              		.loc 1 1566 103 is_stmt 0 view .LVU750
 2563 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2564              	.LCFI27:
 2565              		.cfi_def_cfa_offset 24
 2566              		.cfi_offset 4, -24
 2567              		.cfi_offset 5, -20
 2568              		.cfi_offset 6, -16
ARM GAS  /tmp/ccjFarMV.s 			page 78


 2569              		.cfi_offset 7, -12
 2570              		.cfi_offset 8, -8
 2571              		.cfi_offset 14, -4
 2572 0004 8046     		mov	r8, r0
 2573 0006 0F46     		mov	r7, r1
 2574 0008 1646     		mov	r6, r2
 2575 000a 1D46     		mov	r5, r3
1567:segger/rtt/src/SEGGER_RTT.c ****   int BufferIndex;
 2576              		.loc 1 1567 3 is_stmt 1 view .LVU751
1568:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2577              		.loc 1 1568 3 view .LVU752
1569:segger/rtt/src/SEGGER_RTT.c **** 
1570:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 2578              		.loc 1 1570 3 view .LVU753
 2579              	.LBB24:
 2580              		.loc 1 1570 3 view .LVU754
 2581              		.loc 1 1570 3 view .LVU755
 2582              	.LVL262:
 2583              		.loc 1 1570 3 view .LVU756
 2584 000c 1A4B     		ldr	r3, .L165
 2585              	.LVL263:
 2586              		.loc 1 1570 3 is_stmt 0 view .LVU757
 2587 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2588 0010 DBB2     		uxtb	r3, r3
 2589 0012 532B     		cmp	r3, #83
 2590 0014 29D1     		bne	.L164
 2591              	.LVL264:
 2592              	.L158:
 2593              		.loc 1 1570 3 view .LVU758
 2594              	.LBE24:
 2595              		.loc 1 1570 3 is_stmt 1 discriminator 3 view .LVU759
 2596              	.LBB25:
1571:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2597              		.loc 1 1571 3 view .LVU760
 2598              		.loc 1 1571 3 view .LVU761
 2599              		.syntax unified
 2600              	@ 1571 "segger/rtt/src/SEGGER_RTT.c" 1
 2601 0016 EFF31182 		mrs   r2, basepri  
 2602 001a 4FF02001 		mov   r1, #32       
 2603 001e 81F31188 		msr   basepri, r1  
 2604              		
 2605              	@ 0 "" 2
 2606              	.LVL265:
 2607              		.loc 1 1571 20 view .LVU762
1572:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 2608              		.loc 1 1572 3 view .LVU763
1573:segger/rtt/src/SEGGER_RTT.c ****   BufferIndex = 0;
 2609              		.loc 1 1573 3 view .LVU764
 2610              		.loc 1 1573 15 is_stmt 0 view .LVU765
 2611              		.thumb
 2612              		.syntax unified
 2613 0022 0020     		movs	r0, #0
 2614              	.LVL266:
 2615              	.L160:
1574:segger/rtt/src/SEGGER_RTT.c ****   do {
 2616              		.loc 1 1574 3 is_stmt 1 view .LVU766
1575:segger/rtt/src/SEGGER_RTT.c ****     if (pRTTCB->aDown[BufferIndex].pBuffer == NULL) {
ARM GAS  /tmp/ccjFarMV.s 			page 79


 2617              		.loc 1 1575 5 view .LVU767
 2618              		.loc 1 1575 35 is_stmt 0 view .LVU768
 2619 0024 00EB400C 		add	ip, r0, r0, lsl #1
 2620 0028 134C     		ldr	r4, .L165
 2621 002a 04EBCC0C 		add	ip, r4, ip, lsl #3
 2622 002e DCF86430 		ldr	r3, [ip, #100]
 2623              		.loc 1 1575 8 view .LVU769
 2624 0032 1BB1     		cbz	r3, .L159
1576:segger/rtt/src/SEGGER_RTT.c ****       break;
1577:segger/rtt/src/SEGGER_RTT.c ****     }
1578:segger/rtt/src/SEGGER_RTT.c ****     BufferIndex++;
 2625              		.loc 1 1578 5 is_stmt 1 view .LVU770
 2626              		.loc 1 1578 16 is_stmt 0 view .LVU771
 2627 0034 0130     		adds	r0, r0, #1
 2628              	.LVL267:
1579:segger/rtt/src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2629              		.loc 1 1579 24 is_stmt 1 view .LVU772
 2630              		.loc 1 1579 32 is_stmt 0 view .LVU773
 2631 0036 6369     		ldr	r3, [r4, #20]
 2632              		.loc 1 1579 24 view .LVU774
 2633 0038 8342     		cmp	r3, r0
 2634 003a F3DC     		bgt	.L160
 2635              	.L159:
1580:segger/rtt/src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumDownBuffers) {
 2636              		.loc 1 1580 3 is_stmt 1 view .LVU775
 2637              		.loc 1 1580 27 is_stmt 0 view .LVU776
 2638 003c 0E4B     		ldr	r3, .L165
 2639 003e 5B69     		ldr	r3, [r3, #20]
 2640              		.loc 1 1580 6 view .LVU777
 2641 0040 8342     		cmp	r3, r0
 2642 0042 15DD     		ble	.L162
1581:segger/rtt/src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
 2643              		.loc 1 1581 5 is_stmt 1 view .LVU778
 2644              		.loc 1 1581 45 is_stmt 0 view .LVU779
 2645 0044 00EB4001 		add	r1, r0, r0, lsl #1
 2646 0048 0B4B     		ldr	r3, .L165
 2647 004a 03EBC103 		add	r3, r3, r1, lsl #3
 2648 004e C3F86080 		str	r8, [r3, #96]
1582:segger/rtt/src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2649              		.loc 1 1582 5 is_stmt 1 view .LVU780
 2650              		.loc 1 1582 45 is_stmt 0 view .LVU781
 2651 0052 5F66     		str	r7, [r3, #100]
1583:segger/rtt/src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2652              		.loc 1 1583 5 is_stmt 1 view .LVU782
 2653              		.loc 1 1583 45 is_stmt 0 view .LVU783
 2654 0054 9E66     		str	r6, [r3, #104]
1584:segger/rtt/src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2655              		.loc 1 1584 5 is_stmt 1 view .LVU784
 2656              		.loc 1 1584 45 is_stmt 0 view .LVU785
 2657 0056 0021     		movs	r1, #0
 2658 0058 1967     		str	r1, [r3, #112]
1585:segger/rtt/src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 2659              		.loc 1 1585 5 is_stmt 1 view .LVU786
 2660              		.loc 1 1585 45 is_stmt 0 view .LVU787
 2661 005a D966     		str	r1, [r3, #108]
1586:segger/rtt/src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].Flags        = Flags;
 2662              		.loc 1 1586 5 is_stmt 1 view .LVU788
ARM GAS  /tmp/ccjFarMV.s 			page 80


 2663              		.loc 1 1586 45 is_stmt 0 view .LVU789
 2664 005c 5D67     		str	r5, [r3, #116]
1587:segger/rtt/src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2665              		.loc 1 1587 5 is_stmt 1 view .LVU790
 2666              		.syntax unified
 2667              	@ 1587 "segger/rtt/src/SEGGER_RTT.c" 1
 2668 005e BFF35F8F 		dmb
 2669              	
 2670              	@ 0 "" 2
 2671              		.loc 1 1587 15 view .LVU791
 2672              	.LVL268:
 2673              		.thumb
 2674              		.syntax unified
 2675              	.L161:
1588:segger/rtt/src/SEGGER_RTT.c ****   } else {
1589:segger/rtt/src/SEGGER_RTT.c ****     BufferIndex = -1;
1590:segger/rtt/src/SEGGER_RTT.c ****   }
1591:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2676              		.loc 1 1591 3 view .LVU792
 2677              		.syntax unified
 2678              	@ 1591 "segger/rtt/src/SEGGER_RTT.c" 1
 2679 0062 82F31188 		msr   basepri, r2  
 2680              		
 2681              	@ 0 "" 2
 2682              		.thumb
 2683              		.syntax unified
 2684              	.LBE25:
 2685              		.loc 1 1591 22 view .LVU793
1592:segger/rtt/src/SEGGER_RTT.c ****   return BufferIndex;
 2686              		.loc 1 1592 3 view .LVU794
1593:segger/rtt/src/SEGGER_RTT.c **** }
 2687              		.loc 1 1593 1 is_stmt 0 view .LVU795
 2688 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2689              	.LVL269:
 2690              	.L164:
 2691              	.LBB26:
1570:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2692              		.loc 1 1570 3 is_stmt 1 discriminator 1 view .LVU796
 2693 006a FFF7FEFF 		bl	_DoInit
 2694              	.LVL270:
1570:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2695              		.loc 1 1570 3 is_stmt 0 discriminator 1 view .LVU797
 2696 006e D2E7     		b	.L158
 2697              	.LVL271:
 2698              	.L162:
1570:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2699              		.loc 1 1570 3 discriminator 1 view .LVU798
 2700              	.LBE26:
 2701              	.LBB27:
1589:segger/rtt/src/SEGGER_RTT.c ****   }
 2702              		.loc 1 1589 17 view .LVU799
 2703 0070 4FF0FF30 		mov	r0, #-1
 2704              	.LVL272:
1589:segger/rtt/src/SEGGER_RTT.c ****   }
 2705              		.loc 1 1589 17 view .LVU800
 2706 0074 F5E7     		b	.L161
 2707              	.L166:
ARM GAS  /tmp/ccjFarMV.s 			page 81


 2708 0076 00BF     		.align	2
 2709              	.L165:
 2710 0078 00000000 		.word	_SEGGER_RTT
 2711              	.LBE27:
 2712              		.cfi_endproc
 2713              	.LFE23:
 2715              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2716              		.align	1
 2717              		.global	SEGGER_RTT_AllocUpBuffer
 2718              		.syntax unified
 2719              		.thumb
 2720              		.thumb_func
 2722              	SEGGER_RTT_AllocUpBuffer:
 2723              	.LVL273:
 2724              	.LFB24:
1594:segger/rtt/src/SEGGER_RTT.c **** 
1595:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1596:segger/rtt/src/SEGGER_RTT.c **** *
1597:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1598:segger/rtt/src/SEGGER_RTT.c **** *
1599:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1600:segger/rtt/src/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1601:segger/rtt/src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1602:segger/rtt/src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1603:segger/rtt/src/SEGGER_RTT.c **** *
1604:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1605:segger/rtt/src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1606:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1607:segger/rtt/src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1608:segger/rtt/src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1609:segger/rtt/src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1610:segger/rtt/src/SEGGER_RTT.c **** *
1611:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1612:segger/rtt/src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1613:segger/rtt/src/SEGGER_RTT.c **** *     < 0 - Error
1614:segger/rtt/src/SEGGER_RTT.c **** */
1615:segger/rtt/src/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2725              		.loc 1 1615 101 is_stmt 1 view -0
 2726              		.cfi_startproc
 2727              		@ args = 0, pretend = 0, frame = 0
 2728              		@ frame_needed = 0, uses_anonymous_args = 0
 2729              		.loc 1 1615 101 is_stmt 0 view .LVU802
 2730 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2731              	.LCFI28:
 2732              		.cfi_def_cfa_offset 24
 2733              		.cfi_offset 3, -24
 2734              		.cfi_offset 4, -20
 2735              		.cfi_offset 5, -16
 2736              		.cfi_offset 6, -12
 2737              		.cfi_offset 7, -8
 2738              		.cfi_offset 14, -4
 2739 0002 0746     		mov	r7, r0
 2740 0004 0E46     		mov	r6, r1
 2741 0006 1546     		mov	r5, r2
 2742 0008 1C46     		mov	r4, r3
1616:segger/rtt/src/SEGGER_RTT.c ****   int BufferIndex;
 2743              		.loc 1 1616 3 is_stmt 1 view .LVU803
ARM GAS  /tmp/ccjFarMV.s 			page 82


1617:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2744              		.loc 1 1617 3 view .LVU804
1618:segger/rtt/src/SEGGER_RTT.c **** 
1619:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 2745              		.loc 1 1619 3 view .LVU805
 2746              	.LBB28:
 2747              		.loc 1 1619 3 view .LVU806
 2748              		.loc 1 1619 3 view .LVU807
 2749              	.LVL274:
 2750              		.loc 1 1619 3 view .LVU808
 2751 000a 204B     		ldr	r3, .L175
 2752              	.LVL275:
 2753              		.loc 1 1619 3 is_stmt 0 view .LVU809
 2754 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2755 000e DBB2     		uxtb	r3, r3
 2756 0010 532B     		cmp	r3, #83
 2757 0012 34D1     		bne	.L174
 2758              	.LVL276:
 2759              	.L168:
 2760              		.loc 1 1619 3 view .LVU810
 2761              	.LBE28:
 2762              		.loc 1 1619 3 is_stmt 1 discriminator 3 view .LVU811
 2763              	.LBB29:
1620:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2764              		.loc 1 1620 3 view .LVU812
 2765              		.loc 1 1620 3 view .LVU813
 2766              		.syntax unified
 2767              	@ 1620 "segger/rtt/src/SEGGER_RTT.c" 1
 2768 0014 EFF31182 		mrs   r2, basepri  
 2769 0018 4FF02001 		mov   r1, #32       
 2770 001c 81F31188 		msr   basepri, r1  
 2771              		
 2772              	@ 0 "" 2
 2773              	.LVL277:
 2774              		.loc 1 1620 20 view .LVU814
1621:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 2775              		.loc 1 1621 3 view .LVU815
1622:segger/rtt/src/SEGGER_RTT.c ****   BufferIndex = 0;
 2776              		.loc 1 1622 3 view .LVU816
 2777              		.loc 1 1622 15 is_stmt 0 view .LVU817
 2778              		.thumb
 2779              		.syntax unified
 2780 0020 0020     		movs	r0, #0
 2781              	.LVL278:
 2782              	.L170:
1623:segger/rtt/src/SEGGER_RTT.c ****   do {
 2783              		.loc 1 1623 3 is_stmt 1 view .LVU818
1624:segger/rtt/src/SEGGER_RTT.c ****     if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 2784              		.loc 1 1624 5 view .LVU819
 2785              		.loc 1 1624 33 is_stmt 0 view .LVU820
 2786 0022 00F1010C 		add	ip, r0, #1
 2787 0026 0CEB4C0C 		add	ip, ip, ip, lsl #1
 2788 002a 184B     		ldr	r3, .L175
 2789 002c 03EBCC0C 		add	ip, r3, ip, lsl #3
 2790 0030 DCF80430 		ldr	r3, [ip, #4]
 2791              		.loc 1 1624 8 view .LVU821
 2792 0034 23B1     		cbz	r3, .L169
ARM GAS  /tmp/ccjFarMV.s 			page 83


1625:segger/rtt/src/SEGGER_RTT.c ****       break;
1626:segger/rtt/src/SEGGER_RTT.c ****     }
1627:segger/rtt/src/SEGGER_RTT.c ****     BufferIndex++;
 2793              		.loc 1 1627 5 is_stmt 1 view .LVU822
 2794              		.loc 1 1627 16 is_stmt 0 view .LVU823
 2795 0036 0130     		adds	r0, r0, #1
 2796              	.LVL279:
1628:segger/rtt/src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 2797              		.loc 1 1628 24 is_stmt 1 view .LVU824
 2798              		.loc 1 1628 32 is_stmt 0 view .LVU825
 2799 0038 144B     		ldr	r3, .L175
 2800 003a 1B69     		ldr	r3, [r3, #16]
 2801              		.loc 1 1628 24 view .LVU826
 2802 003c 8342     		cmp	r3, r0
 2803 003e F0DC     		bgt	.L170
 2804              	.L169:
1629:segger/rtt/src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 2805              		.loc 1 1629 3 is_stmt 1 view .LVU827
 2806              		.loc 1 1629 27 is_stmt 0 view .LVU828
 2807 0040 124B     		ldr	r3, .L175
 2808 0042 1B69     		ldr	r3, [r3, #16]
 2809              		.loc 1 1629 6 view .LVU829
 2810 0044 8342     		cmp	r3, r0
 2811 0046 1DDD     		ble	.L172
1630:segger/rtt/src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].sName        = sName;
 2812              		.loc 1 1630 5 is_stmt 1 view .LVU830
 2813              		.loc 1 1630 43 is_stmt 0 view .LVU831
 2814 0048 104B     		ldr	r3, .L175
 2815 004a 411C     		adds	r1, r0, #1
 2816 004c 01EB410C 		add	ip, r1, r1, lsl #1
 2817 0050 4FEACC0C 		lsl	ip, ip, #3
 2818 0054 43F80C70 		str	r7, [r3, ip]
1631:segger/rtt/src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2819              		.loc 1 1631 5 is_stmt 1 view .LVU832
 2820              		.loc 1 1631 43 is_stmt 0 view .LVU833
 2821 0058 01EB4101 		add	r1, r1, r1, lsl #1
 2822 005c 03EBC101 		add	r1, r3, r1, lsl #3
 2823 0060 4E60     		str	r6, [r1, #4]
1632:segger/rtt/src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2824              		.loc 1 1632 5 is_stmt 1 view .LVU834
 2825              		.loc 1 1632 43 is_stmt 0 view .LVU835
 2826 0062 00EB4001 		add	r1, r0, r0, lsl #1
 2827 0066 03EBC103 		add	r3, r3, r1, lsl #3
 2828 006a 1D62     		str	r5, [r3, #32]
1633:segger/rtt/src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 2829              		.loc 1 1633 5 is_stmt 1 view .LVU836
 2830              		.loc 1 1633 43 is_stmt 0 view .LVU837
 2831 006c 0021     		movs	r1, #0
 2832 006e 9962     		str	r1, [r3, #40]
1634:segger/rtt/src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 2833              		.loc 1 1634 5 is_stmt 1 view .LVU838
 2834              		.loc 1 1634 43 is_stmt 0 view .LVU839
 2835 0070 5962     		str	r1, [r3, #36]
1635:segger/rtt/src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].Flags        = Flags;
 2836              		.loc 1 1635 5 is_stmt 1 view .LVU840
 2837              		.loc 1 1635 43 is_stmt 0 view .LVU841
 2838 0072 DC62     		str	r4, [r3, #44]
ARM GAS  /tmp/ccjFarMV.s 			page 84


1636:segger/rtt/src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2839              		.loc 1 1636 5 is_stmt 1 view .LVU842
 2840              		.syntax unified
 2841              	@ 1636 "segger/rtt/src/SEGGER_RTT.c" 1
 2842 0074 BFF35F8F 		dmb
 2843              	
 2844              	@ 0 "" 2
 2845              		.loc 1 1636 15 view .LVU843
 2846              	.LVL280:
 2847              		.thumb
 2848              		.syntax unified
 2849              	.L171:
1637:segger/rtt/src/SEGGER_RTT.c ****   } else {
1638:segger/rtt/src/SEGGER_RTT.c ****     BufferIndex = -1;
1639:segger/rtt/src/SEGGER_RTT.c ****   }
1640:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2850              		.loc 1 1640 3 view .LVU844
 2851              		.syntax unified
 2852              	@ 1640 "segger/rtt/src/SEGGER_RTT.c" 1
 2853 0078 82F31188 		msr   basepri, r2  
 2854              		
 2855              	@ 0 "" 2
 2856              		.thumb
 2857              		.syntax unified
 2858              	.LBE29:
 2859              		.loc 1 1640 22 view .LVU845
1641:segger/rtt/src/SEGGER_RTT.c ****   return BufferIndex;
 2860              		.loc 1 1641 3 view .LVU846
1642:segger/rtt/src/SEGGER_RTT.c **** }
 2861              		.loc 1 1642 1 is_stmt 0 view .LVU847
 2862 007c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2863              	.LVL281:
 2864              	.L174:
 2865              	.LBB30:
1619:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2866              		.loc 1 1619 3 is_stmt 1 discriminator 1 view .LVU848
 2867 007e FFF7FEFF 		bl	_DoInit
 2868              	.LVL282:
1619:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2869              		.loc 1 1619 3 is_stmt 0 discriminator 1 view .LVU849
 2870 0082 C7E7     		b	.L168
 2871              	.LVL283:
 2872              	.L172:
1619:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2873              		.loc 1 1619 3 discriminator 1 view .LVU850
 2874              	.LBE30:
 2875              	.LBB31:
1638:segger/rtt/src/SEGGER_RTT.c ****   }
 2876              		.loc 1 1638 17 view .LVU851
 2877 0084 4FF0FF30 		mov	r0, #-1
 2878              	.LVL284:
1638:segger/rtt/src/SEGGER_RTT.c ****   }
 2879              		.loc 1 1638 17 view .LVU852
 2880 0088 F6E7     		b	.L171
 2881              	.L176:
 2882 008a 00BF     		.align	2
 2883              	.L175:
ARM GAS  /tmp/ccjFarMV.s 			page 85


 2884 008c 00000000 		.word	_SEGGER_RTT
 2885              	.LBE31:
 2886              		.cfi_endproc
 2887              	.LFE24:
 2889              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2890              		.align	1
 2891              		.global	SEGGER_RTT_ConfigUpBuffer
 2892              		.syntax unified
 2893              		.thumb
 2894              		.thumb_func
 2896              	SEGGER_RTT_ConfigUpBuffer:
 2897              	.LVL285:
 2898              	.LFB25:
1643:segger/rtt/src/SEGGER_RTT.c **** 
1644:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1645:segger/rtt/src/SEGGER_RTT.c **** *
1646:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1647:segger/rtt/src/SEGGER_RTT.c **** *
1648:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1649:segger/rtt/src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1650:segger/rtt/src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1651:segger/rtt/src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1652:segger/rtt/src/SEGGER_RTT.c **** *
1653:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1654:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1655:segger/rtt/src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1656:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1657:segger/rtt/src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1658:segger/rtt/src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1659:segger/rtt/src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1660:segger/rtt/src/SEGGER_RTT.c **** *
1661:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1662:segger/rtt/src/SEGGER_RTT.c **** *    >= 0 - O.K.
1663:segger/rtt/src/SEGGER_RTT.c **** *     < 0 - Error
1664:segger/rtt/src/SEGGER_RTT.c **** *
1665:segger/rtt/src/SEGGER_RTT.c **** *  Additional information
1666:segger/rtt/src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1667:segger/rtt/src/SEGGER_RTT.c **** *    May only be called once per buffer.
1668:segger/rtt/src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1669:segger/rtt/src/SEGGER_RTT.c **** */
1670:segger/rtt/src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2899              		.loc 1 1670 124 is_stmt 1 view -0
 2900              		.cfi_startproc
 2901              		@ args = 4, pretend = 0, frame = 0
 2902              		@ frame_needed = 0, uses_anonymous_args = 0
 2903              		.loc 1 1670 124 is_stmt 0 view .LVU854
 2904 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2905              	.LCFI29:
 2906              		.cfi_def_cfa_offset 24
 2907              		.cfi_offset 3, -24
 2908              		.cfi_offset 4, -20
 2909              		.cfi_offset 5, -16
 2910              		.cfi_offset 6, -12
 2911              		.cfi_offset 7, -8
 2912              		.cfi_offset 14, -4
 2913 0002 0446     		mov	r4, r0
 2914 0004 0F46     		mov	r7, r1
ARM GAS  /tmp/ccjFarMV.s 			page 86


 2915 0006 1646     		mov	r6, r2
 2916 0008 1D46     		mov	r5, r3
1671:segger/rtt/src/SEGGER_RTT.c ****   int r;
 2917              		.loc 1 1671 3 is_stmt 1 view .LVU855
1672:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2918              		.loc 1 1672 3 view .LVU856
1673:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 2919              		.loc 1 1673 3 view .LVU857
1674:segger/rtt/src/SEGGER_RTT.c **** 
1675:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 2920              		.loc 1 1675 3 view .LVU858
 2921              	.LBB32:
 2922              		.loc 1 1675 3 view .LVU859
 2923              		.loc 1 1675 3 view .LVU860
 2924              	.LVL286:
 2925              		.loc 1 1675 3 view .LVU861
 2926 000a 194B     		ldr	r3, .L184
 2927              	.LVL287:
 2928              		.loc 1 1675 3 is_stmt 0 view .LVU862
 2929 000c 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2930              	.LVL288:
 2931              		.loc 1 1675 3 view .LVU863
 2932 000e C0B2     		uxtb	r0, r0
 2933 0010 5328     		cmp	r0, #83
 2934 0012 26D1     		bne	.L183
 2935              	.LVL289:
 2936              	.L178:
 2937              		.loc 1 1675 3 view .LVU864
 2938              	.LBE32:
 2939              		.loc 1 1675 3 is_stmt 1 discriminator 3 view .LVU865
1676:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 2940              		.loc 1 1676 3 view .LVU866
1677:segger/rtt/src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 2941              		.loc 1 1677 3 view .LVU867
 2942              		.loc 1 1677 6 is_stmt 0 view .LVU868
 2943 0014 022C     		cmp	r4, #2
 2944 0016 27D8     		bhi	.L181
 2945              	.LBB33:
1678:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2946              		.loc 1 1678 5 is_stmt 1 view .LVU869
 2947              		.loc 1 1678 5 view .LVU870
 2948              		.syntax unified
 2949              	@ 1678 "segger/rtt/src/SEGGER_RTT.c" 1
 2950 0018 EFF31183 		mrs   r3, basepri  
 2951 001c 4FF02001 		mov   r1, #32       
 2952 0020 81F31188 		msr   basepri, r1  
 2953              		
 2954              	@ 0 "" 2
 2955              	.LVL290:
 2956              		.loc 1 1678 22 view .LVU871
1679:segger/rtt/src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 2957              		.loc 1 1679 5 view .LVU872
1680:segger/rtt/src/SEGGER_RTT.c ****     if (BufferIndex) {
 2958              		.loc 1 1680 5 view .LVU873
 2959              		.loc 1 1680 8 is_stmt 0 view .LVU874
 2960              		.thumb
 2961              		.syntax unified
ARM GAS  /tmp/ccjFarMV.s 			page 87


 2962 0024 94B1     		cbz	r4, .L180
1681:segger/rtt/src/SEGGER_RTT.c ****       pUp->sName        = sName;
 2963              		.loc 1 1681 7 is_stmt 1 view .LVU875
 2964              		.loc 1 1681 25 is_stmt 0 view .LVU876
 2965 0026 124A     		ldr	r2, .L184
 2966 0028 601C     		adds	r0, r4, #1
 2967 002a 00EB4001 		add	r1, r0, r0, lsl #1
 2968 002e C900     		lsls	r1, r1, #3
 2969 0030 5750     		str	r7, [r2, r1]
1682:segger/rtt/src/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 2970              		.loc 1 1682 7 is_stmt 1 view .LVU877
 2971              		.loc 1 1682 25 is_stmt 0 view .LVU878
 2972 0032 00EB4000 		add	r0, r0, r0, lsl #1
 2973 0036 02EBC000 		add	r0, r2, r0, lsl #3
 2974 003a 4660     		str	r6, [r0, #4]
1683:segger/rtt/src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 2975              		.loc 1 1683 7 is_stmt 1 view .LVU879
 2976              		.loc 1 1683 25 is_stmt 0 view .LVU880
 2977 003c 04EB4401 		add	r1, r4, r4, lsl #1
 2978 0040 02EBC102 		add	r2, r2, r1, lsl #3
 2979 0044 1562     		str	r5, [r2, #32]
1684:segger/rtt/src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 2980              		.loc 1 1684 7 is_stmt 1 view .LVU881
 2981              		.loc 1 1684 25 is_stmt 0 view .LVU882
 2982 0046 0021     		movs	r1, #0
 2983 0048 9162     		str	r1, [r2, #40]
1685:segger/rtt/src/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 2984              		.loc 1 1685 7 is_stmt 1 view .LVU883
 2985              		.loc 1 1685 25 is_stmt 0 view .LVU884
 2986 004a 5162     		str	r1, [r2, #36]
 2987              	.L180:
1686:segger/rtt/src/SEGGER_RTT.c ****     }
1687:segger/rtt/src/SEGGER_RTT.c ****     pUp->Flags          = Flags;
 2988              		.loc 1 1687 5 is_stmt 1 view .LVU885
 2989              		.loc 1 1687 25 is_stmt 0 view .LVU886
 2990 004c 04EB4404 		add	r4, r4, r4, lsl #1
 2991              	.LVL291:
 2992              		.loc 1 1687 25 view .LVU887
 2993 0050 074A     		ldr	r2, .L184
 2994 0052 02EBC402 		add	r2, r2, r4, lsl #3
 2995 0056 0699     		ldr	r1, [sp, #24]
 2996 0058 D162     		str	r1, [r2, #44]
1688:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2997              		.loc 1 1688 5 is_stmt 1 view .LVU888
 2998              		.syntax unified
 2999              	@ 1688 "segger/rtt/src/SEGGER_RTT.c" 1
 3000 005a 83F31188 		msr   basepri, r3  
 3001              		
 3002              	@ 0 "" 2
 3003              		.thumb
 3004              		.syntax unified
 3005              	.LBE33:
 3006              		.loc 1 1688 24 view .LVU889
1689:segger/rtt/src/SEGGER_RTT.c ****     r =  0;
 3007              		.loc 1 1689 5 view .LVU890
 3008              	.LVL292:
 3009              		.loc 1 1689 7 is_stmt 0 view .LVU891
ARM GAS  /tmp/ccjFarMV.s 			page 88


 3010 005e 0020     		movs	r0, #0
 3011              	.LVL293:
 3012              	.L177:
1690:segger/rtt/src/SEGGER_RTT.c ****   } else {
1691:segger/rtt/src/SEGGER_RTT.c ****     r = -1;
1692:segger/rtt/src/SEGGER_RTT.c ****   }
1693:segger/rtt/src/SEGGER_RTT.c ****   return r;
1694:segger/rtt/src/SEGGER_RTT.c **** }
 3013              		.loc 1 1694 1 view .LVU892
 3014 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3015              	.LVL294:
 3016              	.L183:
 3017              	.LBB34:
1675:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3018              		.loc 1 1675 3 is_stmt 1 discriminator 1 view .LVU893
 3019 0062 FFF7FEFF 		bl	_DoInit
 3020              	.LVL295:
1675:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3021              		.loc 1 1675 3 is_stmt 0 discriminator 1 view .LVU894
 3022 0066 D5E7     		b	.L178
 3023              	.LVL296:
 3024              	.L181:
1675:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3025              		.loc 1 1675 3 discriminator 1 view .LVU895
 3026              	.LBE34:
1691:segger/rtt/src/SEGGER_RTT.c ****   }
 3027              		.loc 1 1691 7 view .LVU896
 3028 0068 4FF0FF30 		mov	r0, #-1
 3029              	.LVL297:
1693:segger/rtt/src/SEGGER_RTT.c **** }
 3030              		.loc 1 1693 3 is_stmt 1 view .LVU897
1693:segger/rtt/src/SEGGER_RTT.c **** }
 3031              		.loc 1 1693 10 is_stmt 0 view .LVU898
 3032 006c F8E7     		b	.L177
 3033              	.L185:
 3034 006e 00BF     		.align	2
 3035              	.L184:
 3036 0070 00000000 		.word	_SEGGER_RTT
 3037              		.cfi_endproc
 3038              	.LFE25:
 3040              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 3041              		.align	1
 3042              		.global	SEGGER_RTT_ConfigDownBuffer
 3043              		.syntax unified
 3044              		.thumb
 3045              		.thumb_func
 3047              	SEGGER_RTT_ConfigDownBuffer:
 3048              	.LVL298:
 3049              	.LFB26:
1695:segger/rtt/src/SEGGER_RTT.c **** 
1696:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1697:segger/rtt/src/SEGGER_RTT.c **** *
1698:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1699:segger/rtt/src/SEGGER_RTT.c **** *
1700:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1701:segger/rtt/src/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1702:segger/rtt/src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
ARM GAS  /tmp/ccjFarMV.s 			page 89


1703:segger/rtt/src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1704:segger/rtt/src/SEGGER_RTT.c **** *
1705:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1706:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1707:segger/rtt/src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1708:segger/rtt/src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1709:segger/rtt/src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1710:segger/rtt/src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1711:segger/rtt/src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1712:segger/rtt/src/SEGGER_RTT.c **** *
1713:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1714:segger/rtt/src/SEGGER_RTT.c **** *    >= 0  O.K.
1715:segger/rtt/src/SEGGER_RTT.c **** *     < 0  Error
1716:segger/rtt/src/SEGGER_RTT.c **** *
1717:segger/rtt/src/SEGGER_RTT.c **** *  Additional information
1718:segger/rtt/src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1719:segger/rtt/src/SEGGER_RTT.c **** *    May only be called once per buffer.
1720:segger/rtt/src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1721:segger/rtt/src/SEGGER_RTT.c **** */
1722:segger/rtt/src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 3050              		.loc 1 1722 126 is_stmt 1 view -0
 3051              		.cfi_startproc
 3052              		@ args = 4, pretend = 0, frame = 0
 3053              		@ frame_needed = 0, uses_anonymous_args = 0
 3054              		.loc 1 1722 126 is_stmt 0 view .LVU900
 3055 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3056              	.LCFI30:
 3057              		.cfi_def_cfa_offset 24
 3058              		.cfi_offset 3, -24
 3059              		.cfi_offset 4, -20
 3060              		.cfi_offset 5, -16
 3061              		.cfi_offset 6, -12
 3062              		.cfi_offset 7, -8
 3063              		.cfi_offset 14, -4
 3064 0002 0446     		mov	r4, r0
 3065 0004 0F46     		mov	r7, r1
 3066 0006 1646     		mov	r6, r2
 3067 0008 1D46     		mov	r5, r3
1723:segger/rtt/src/SEGGER_RTT.c ****   int r;
 3068              		.loc 1 1723 3 is_stmt 1 view .LVU901
1724:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3069              		.loc 1 1724 3 view .LVU902
1725:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3070              		.loc 1 1725 3 view .LVU903
1726:segger/rtt/src/SEGGER_RTT.c **** 
1727:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 3071              		.loc 1 1727 3 view .LVU904
 3072              	.LBB35:
 3073              		.loc 1 1727 3 view .LVU905
 3074              		.loc 1 1727 3 view .LVU906
 3075              	.LVL299:
 3076              		.loc 1 1727 3 view .LVU907
 3077 000a 164B     		ldr	r3, .L193
 3078              	.LVL300:
 3079              		.loc 1 1727 3 is_stmt 0 view .LVU908
 3080 000c 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3081              	.LVL301:
ARM GAS  /tmp/ccjFarMV.s 			page 90


 3082              		.loc 1 1727 3 view .LVU909
 3083 000e C0B2     		uxtb	r0, r0
 3084 0010 5328     		cmp	r0, #83
 3085 0012 20D1     		bne	.L192
 3086              	.LVL302:
 3087              	.L187:
 3088              		.loc 1 1727 3 view .LVU910
 3089              	.LBE35:
 3090              		.loc 1 1727 3 is_stmt 1 discriminator 3 view .LVU911
1728:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3091              		.loc 1 1728 3 view .LVU912
1729:segger/rtt/src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3092              		.loc 1 1729 3 view .LVU913
 3093              		.loc 1 1729 6 is_stmt 0 view .LVU914
 3094 0014 022C     		cmp	r4, #2
 3095 0016 21D8     		bhi	.L190
 3096              	.LBB36:
1730:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3097              		.loc 1 1730 5 is_stmt 1 view .LVU915
 3098              		.loc 1 1730 5 view .LVU916
 3099              		.syntax unified
 3100              	@ 1730 "segger/rtt/src/SEGGER_RTT.c" 1
 3101 0018 EFF31180 		mrs   r0, basepri  
 3102 001c 4FF02001 		mov   r1, #32       
 3103 0020 81F31188 		msr   basepri, r1  
 3104              		
 3105              	@ 0 "" 2
 3106              	.LVL303:
 3107              		.loc 1 1730 22 view .LVU917
1731:segger/rtt/src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3108              		.loc 1 1731 5 view .LVU918
1732:segger/rtt/src/SEGGER_RTT.c ****     if (BufferIndex) {
 3109              		.loc 1 1732 5 view .LVU919
 3110              		.loc 1 1732 8 is_stmt 0 view .LVU920
 3111              		.thumb
 3112              		.syntax unified
 3113 0024 54B1     		cbz	r4, .L189
1733:segger/rtt/src/SEGGER_RTT.c ****       pDown->sName        = sName;
 3114              		.loc 1 1733 7 is_stmt 1 view .LVU921
 3115              		.loc 1 1733 27 is_stmt 0 view .LVU922
 3116 0026 04EB4402 		add	r2, r4, r4, lsl #1
 3117 002a 0E4B     		ldr	r3, .L193
 3118 002c 03EBC203 		add	r3, r3, r2, lsl #3
 3119 0030 1F66     		str	r7, [r3, #96]
1734:segger/rtt/src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3120              		.loc 1 1734 7 is_stmt 1 view .LVU923
 3121              		.loc 1 1734 27 is_stmt 0 view .LVU924
 3122 0032 5E66     		str	r6, [r3, #100]
1735:segger/rtt/src/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
 3123              		.loc 1 1735 7 is_stmt 1 view .LVU925
 3124              		.loc 1 1735 27 is_stmt 0 view .LVU926
 3125 0034 9D66     		str	r5, [r3, #104]
1736:segger/rtt/src/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 3126              		.loc 1 1736 7 is_stmt 1 view .LVU927
 3127              		.loc 1 1736 27 is_stmt 0 view .LVU928
 3128 0036 0022     		movs	r2, #0
 3129 0038 1A67     		str	r2, [r3, #112]
ARM GAS  /tmp/ccjFarMV.s 			page 91


1737:segger/rtt/src/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 3130              		.loc 1 1737 7 is_stmt 1 view .LVU929
 3131              		.loc 1 1737 27 is_stmt 0 view .LVU930
 3132 003a DA66     		str	r2, [r3, #108]
 3133              	.L189:
1738:segger/rtt/src/SEGGER_RTT.c ****     }
1739:segger/rtt/src/SEGGER_RTT.c ****     pDown->Flags          = Flags;
 3134              		.loc 1 1739 5 is_stmt 1 view .LVU931
 3135              		.loc 1 1739 27 is_stmt 0 view .LVU932
 3136 003c 04EB4404 		add	r4, r4, r4, lsl #1
 3137              	.LVL304:
 3138              		.loc 1 1739 27 view .LVU933
 3139 0040 084B     		ldr	r3, .L193
 3140 0042 03EBC403 		add	r3, r3, r4, lsl #3
 3141 0046 069A     		ldr	r2, [sp, #24]
 3142 0048 5A67     		str	r2, [r3, #116]
1740:segger/rtt/src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 3143              		.loc 1 1740 5 is_stmt 1 view .LVU934
 3144              		.syntax unified
 3145              	@ 1740 "segger/rtt/src/SEGGER_RTT.c" 1
 3146 004a BFF35F8F 		dmb
 3147              	
 3148              	@ 0 "" 2
 3149              		.loc 1 1740 15 view .LVU935
1741:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3150              		.loc 1 1741 5 view .LVU936
 3151              	@ 1741 "segger/rtt/src/SEGGER_RTT.c" 1
 3152 004e 80F31188 		msr   basepri, r0  
 3153              		
 3154              	@ 0 "" 2
 3155              		.thumb
 3156              		.syntax unified
 3157              	.LBE36:
 3158              		.loc 1 1741 24 view .LVU937
1742:segger/rtt/src/SEGGER_RTT.c ****     r =  0;
 3159              		.loc 1 1742 5 view .LVU938
 3160              	.LVL305:
 3161              		.loc 1 1742 7 is_stmt 0 view .LVU939
 3162 0052 0020     		movs	r0, #0
 3163              	.LVL306:
 3164              	.L186:
1743:segger/rtt/src/SEGGER_RTT.c ****   } else {
1744:segger/rtt/src/SEGGER_RTT.c ****     r = -1;
1745:segger/rtt/src/SEGGER_RTT.c ****   }
1746:segger/rtt/src/SEGGER_RTT.c ****   return r;
1747:segger/rtt/src/SEGGER_RTT.c **** }
 3165              		.loc 1 1747 1 view .LVU940
 3166 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3167              	.LVL307:
 3168              	.L192:
 3169              	.LBB37:
1727:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3170              		.loc 1 1727 3 is_stmt 1 discriminator 1 view .LVU941
 3171 0056 FFF7FEFF 		bl	_DoInit
 3172              	.LVL308:
1727:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3173              		.loc 1 1727 3 is_stmt 0 discriminator 1 view .LVU942
ARM GAS  /tmp/ccjFarMV.s 			page 92


 3174 005a DBE7     		b	.L187
 3175              	.LVL309:
 3176              	.L190:
1727:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3177              		.loc 1 1727 3 discriminator 1 view .LVU943
 3178              	.LBE37:
1744:segger/rtt/src/SEGGER_RTT.c ****   }
 3179              		.loc 1 1744 7 view .LVU944
 3180 005c 4FF0FF30 		mov	r0, #-1
 3181              	.LVL310:
1746:segger/rtt/src/SEGGER_RTT.c **** }
 3182              		.loc 1 1746 3 is_stmt 1 view .LVU945
1746:segger/rtt/src/SEGGER_RTT.c **** }
 3183              		.loc 1 1746 10 is_stmt 0 view .LVU946
 3184 0060 F8E7     		b	.L186
 3185              	.L194:
 3186 0062 00BF     		.align	2
 3187              	.L193:
 3188 0064 00000000 		.word	_SEGGER_RTT
 3189              		.cfi_endproc
 3190              	.LFE26:
 3192              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 3193              		.align	1
 3194              		.global	SEGGER_RTT_SetNameUpBuffer
 3195              		.syntax unified
 3196              		.thumb
 3197              		.thumb_func
 3199              	SEGGER_RTT_SetNameUpBuffer:
 3200              	.LVL311:
 3201              	.LFB27:
1748:segger/rtt/src/SEGGER_RTT.c **** 
1749:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1750:segger/rtt/src/SEGGER_RTT.c **** *
1751:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1752:segger/rtt/src/SEGGER_RTT.c **** *
1753:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1754:segger/rtt/src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1755:segger/rtt/src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1756:segger/rtt/src/SEGGER_RTT.c **** *
1757:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1758:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1759:segger/rtt/src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1760:segger/rtt/src/SEGGER_RTT.c **** *
1761:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1762:segger/rtt/src/SEGGER_RTT.c **** *    >= 0  O.K.
1763:segger/rtt/src/SEGGER_RTT.c **** *     < 0  Error
1764:segger/rtt/src/SEGGER_RTT.c **** */
1765:segger/rtt/src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 3202              		.loc 1 1765 73 is_stmt 1 view -0
 3203              		.cfi_startproc
 3204              		@ args = 0, pretend = 0, frame = 0
 3205              		@ frame_needed = 0, uses_anonymous_args = 0
 3206              		.loc 1 1765 73 is_stmt 0 view .LVU948
 3207 0000 38B5     		push	{r3, r4, r5, lr}
 3208              	.LCFI31:
 3209              		.cfi_def_cfa_offset 16
 3210              		.cfi_offset 3, -16
ARM GAS  /tmp/ccjFarMV.s 			page 93


 3211              		.cfi_offset 4, -12
 3212              		.cfi_offset 5, -8
 3213              		.cfi_offset 14, -4
 3214 0002 0446     		mov	r4, r0
 3215 0004 0D46     		mov	r5, r1
1766:segger/rtt/src/SEGGER_RTT.c ****   int r;
 3216              		.loc 1 1766 3 is_stmt 1 view .LVU949
1767:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3217              		.loc 1 1767 3 view .LVU950
1768:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3218              		.loc 1 1768 3 view .LVU951
1769:segger/rtt/src/SEGGER_RTT.c **** 
1770:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 3219              		.loc 1 1770 3 view .LVU952
 3220              	.LBB38:
 3221              		.loc 1 1770 3 view .LVU953
 3222              		.loc 1 1770 3 view .LVU954
 3223              	.LVL312:
 3224              		.loc 1 1770 3 view .LVU955
 3225 0006 0E4B     		ldr	r3, .L201
 3226 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3227 000a DBB2     		uxtb	r3, r3
 3228 000c 532B     		cmp	r3, #83
 3229 000e 11D1     		bne	.L200
 3230              	.LVL313:
 3231              	.L196:
 3232              		.loc 1 1770 3 is_stmt 0 view .LVU956
 3233              	.LBE38:
 3234              		.loc 1 1770 3 is_stmt 1 discriminator 3 view .LVU957
1771:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3235              		.loc 1 1771 3 view .LVU958
1772:segger/rtt/src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3236              		.loc 1 1772 3 view .LVU959
 3237              		.loc 1 1772 6 is_stmt 0 view .LVU960
 3238 0010 022C     		cmp	r4, #2
 3239 0012 12D8     		bhi	.L198
 3240              	.LBB39:
1773:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3241              		.loc 1 1773 5 is_stmt 1 view .LVU961
 3242              		.loc 1 1773 5 view .LVU962
 3243              		.syntax unified
 3244              	@ 1773 "segger/rtt/src/SEGGER_RTT.c" 1
 3245 0014 EFF31183 		mrs   r3, basepri  
 3246 0018 4FF02001 		mov   r1, #32       
 3247 001c 81F31188 		msr   basepri, r1  
 3248              		
 3249              	@ 0 "" 2
 3250              	.LVL314:
 3251              		.loc 1 1773 22 view .LVU963
1774:segger/rtt/src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3252              		.loc 1 1774 5 view .LVU964
1775:segger/rtt/src/SEGGER_RTT.c ****     pUp->sName = sName;
 3253              		.loc 1 1775 5 view .LVU965
 3254              		.loc 1 1775 16 is_stmt 0 view .LVU966
 3255              		.thumb
 3256              		.syntax unified
 3257 0020 0134     		adds	r4, r4, #1
ARM GAS  /tmp/ccjFarMV.s 			page 94


 3258              	.LVL315:
 3259              		.loc 1 1775 16 view .LVU967
 3260 0022 04EB4404 		add	r4, r4, r4, lsl #1
 3261              	.LVL316:
 3262              		.loc 1 1775 16 view .LVU968
 3263 0026 E400     		lsls	r4, r4, #3
 3264 0028 054A     		ldr	r2, .L201
 3265 002a 1551     		str	r5, [r2, r4]
1776:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3266              		.loc 1 1776 5 is_stmt 1 view .LVU969
 3267              		.syntax unified
 3268              	@ 1776 "segger/rtt/src/SEGGER_RTT.c" 1
 3269 002c 83F31188 		msr   basepri, r3  
 3270              		
 3271              	@ 0 "" 2
 3272              		.thumb
 3273              		.syntax unified
 3274              	.LBE39:
 3275              		.loc 1 1776 24 view .LVU970
1777:segger/rtt/src/SEGGER_RTT.c ****     r =  0;
 3276              		.loc 1 1777 5 view .LVU971
 3277              	.LVL317:
 3278              		.loc 1 1777 7 is_stmt 0 view .LVU972
 3279 0030 0020     		movs	r0, #0
 3280              	.LVL318:
 3281              	.L195:
1778:segger/rtt/src/SEGGER_RTT.c ****   } else {
1779:segger/rtt/src/SEGGER_RTT.c ****     r = -1;
1780:segger/rtt/src/SEGGER_RTT.c ****   }
1781:segger/rtt/src/SEGGER_RTT.c ****   return r;
1782:segger/rtt/src/SEGGER_RTT.c **** }
 3282              		.loc 1 1782 1 view .LVU973
 3283 0032 38BD     		pop	{r3, r4, r5, pc}
 3284              	.LVL319:
 3285              	.L200:
 3286              	.LBB40:
1770:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3287              		.loc 1 1770 3 is_stmt 1 discriminator 1 view .LVU974
 3288 0034 FFF7FEFF 		bl	_DoInit
 3289              	.LVL320:
1770:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3290              		.loc 1 1770 3 is_stmt 0 discriminator 1 view .LVU975
 3291 0038 EAE7     		b	.L196
 3292              	.LVL321:
 3293              	.L198:
1770:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3294              		.loc 1 1770 3 discriminator 1 view .LVU976
 3295              	.LBE40:
1779:segger/rtt/src/SEGGER_RTT.c ****   }
 3296              		.loc 1 1779 7 view .LVU977
 3297 003a 4FF0FF30 		mov	r0, #-1
 3298              	.LVL322:
1781:segger/rtt/src/SEGGER_RTT.c **** }
 3299              		.loc 1 1781 3 is_stmt 1 view .LVU978
1781:segger/rtt/src/SEGGER_RTT.c **** }
 3300              		.loc 1 1781 10 is_stmt 0 view .LVU979
 3301 003e F8E7     		b	.L195
ARM GAS  /tmp/ccjFarMV.s 			page 95


 3302              	.L202:
 3303              		.align	2
 3304              	.L201:
 3305 0040 00000000 		.word	_SEGGER_RTT
 3306              		.cfi_endproc
 3307              	.LFE27:
 3309              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 3310              		.align	1
 3311              		.global	SEGGER_RTT_SetNameDownBuffer
 3312              		.syntax unified
 3313              		.thumb
 3314              		.thumb_func
 3316              	SEGGER_RTT_SetNameDownBuffer:
 3317              	.LVL323:
 3318              	.LFB28:
1783:segger/rtt/src/SEGGER_RTT.c **** 
1784:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1785:segger/rtt/src/SEGGER_RTT.c **** *
1786:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1787:segger/rtt/src/SEGGER_RTT.c **** *
1788:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1789:segger/rtt/src/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1790:segger/rtt/src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1791:segger/rtt/src/SEGGER_RTT.c **** *
1792:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1793:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1794:segger/rtt/src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1795:segger/rtt/src/SEGGER_RTT.c **** *
1796:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1797:segger/rtt/src/SEGGER_RTT.c **** *    >= 0  O.K.
1798:segger/rtt/src/SEGGER_RTT.c **** *     < 0  Error
1799:segger/rtt/src/SEGGER_RTT.c **** */
1800:segger/rtt/src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 3319              		.loc 1 1800 75 is_stmt 1 view -0
 3320              		.cfi_startproc
 3321              		@ args = 0, pretend = 0, frame = 0
 3322              		@ frame_needed = 0, uses_anonymous_args = 0
 3323              		.loc 1 1800 75 is_stmt 0 view .LVU981
 3324 0000 38B5     		push	{r3, r4, r5, lr}
 3325              	.LCFI32:
 3326              		.cfi_def_cfa_offset 16
 3327              		.cfi_offset 3, -16
 3328              		.cfi_offset 4, -12
 3329              		.cfi_offset 5, -8
 3330              		.cfi_offset 14, -4
 3331 0002 0446     		mov	r4, r0
 3332 0004 0D46     		mov	r5, r1
1801:segger/rtt/src/SEGGER_RTT.c ****   int r;
 3333              		.loc 1 1801 3 is_stmt 1 view .LVU982
1802:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3334              		.loc 1 1802 3 view .LVU983
1803:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3335              		.loc 1 1803 3 view .LVU984
1804:segger/rtt/src/SEGGER_RTT.c **** 
1805:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 3336              		.loc 1 1805 3 view .LVU985
 3337              	.LBB41:
ARM GAS  /tmp/ccjFarMV.s 			page 96


 3338              		.loc 1 1805 3 view .LVU986
 3339              		.loc 1 1805 3 view .LVU987
 3340              	.LVL324:
 3341              		.loc 1 1805 3 view .LVU988
 3342 0006 0E4B     		ldr	r3, .L209
 3343 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3344 000a DBB2     		uxtb	r3, r3
 3345 000c 532B     		cmp	r3, #83
 3346 000e 11D1     		bne	.L208
 3347              	.LVL325:
 3348              	.L204:
 3349              		.loc 1 1805 3 is_stmt 0 view .LVU989
 3350              	.LBE41:
 3351              		.loc 1 1805 3 is_stmt 1 discriminator 3 view .LVU990
1806:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3352              		.loc 1 1806 3 view .LVU991
1807:segger/rtt/src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3353              		.loc 1 1807 3 view .LVU992
 3354              		.loc 1 1807 6 is_stmt 0 view .LVU993
 3355 0010 022C     		cmp	r4, #2
 3356 0012 12D8     		bhi	.L206
 3357              	.LBB42:
1808:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3358              		.loc 1 1808 5 is_stmt 1 view .LVU994
 3359              		.loc 1 1808 5 view .LVU995
 3360              		.syntax unified
 3361              	@ 1808 "segger/rtt/src/SEGGER_RTT.c" 1
 3362 0014 EFF31182 		mrs   r2, basepri  
 3363 0018 4FF02001 		mov   r1, #32       
 3364 001c 81F31188 		msr   basepri, r1  
 3365              		
 3366              	@ 0 "" 2
 3367              	.LVL326:
 3368              		.loc 1 1808 22 view .LVU996
1809:segger/rtt/src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3369              		.loc 1 1809 5 view .LVU997
1810:segger/rtt/src/SEGGER_RTT.c ****     pDown->sName = sName;
 3370              		.loc 1 1810 5 view .LVU998
 3371              		.loc 1 1810 18 is_stmt 0 view .LVU999
 3372              		.thumb
 3373              		.syntax unified
 3374 0020 04EB4404 		add	r4, r4, r4, lsl #1
 3375              	.LVL327:
 3376              		.loc 1 1810 18 view .LVU1000
 3377 0024 064B     		ldr	r3, .L209
 3378 0026 03EBC403 		add	r3, r3, r4, lsl #3
 3379 002a 1D66     		str	r5, [r3, #96]
1811:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3380              		.loc 1 1811 5 is_stmt 1 view .LVU1001
 3381              		.syntax unified
 3382              	@ 1811 "segger/rtt/src/SEGGER_RTT.c" 1
 3383 002c 82F31188 		msr   basepri, r2  
 3384              		
 3385              	@ 0 "" 2
 3386              		.thumb
 3387              		.syntax unified
 3388              	.LBE42:
ARM GAS  /tmp/ccjFarMV.s 			page 97


 3389              		.loc 1 1811 24 view .LVU1002
1812:segger/rtt/src/SEGGER_RTT.c ****     r =  0;
 3390              		.loc 1 1812 5 view .LVU1003
 3391              	.LVL328:
 3392              		.loc 1 1812 7 is_stmt 0 view .LVU1004
 3393 0030 0020     		movs	r0, #0
 3394              	.LVL329:
 3395              	.L203:
1813:segger/rtt/src/SEGGER_RTT.c ****   } else {
1814:segger/rtt/src/SEGGER_RTT.c ****     r = -1;
1815:segger/rtt/src/SEGGER_RTT.c ****   }
1816:segger/rtt/src/SEGGER_RTT.c ****   return r;
1817:segger/rtt/src/SEGGER_RTT.c **** }
 3396              		.loc 1 1817 1 view .LVU1005
 3397 0032 38BD     		pop	{r3, r4, r5, pc}
 3398              	.LVL330:
 3399              	.L208:
 3400              	.LBB43:
1805:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3401              		.loc 1 1805 3 is_stmt 1 discriminator 1 view .LVU1006
 3402 0034 FFF7FEFF 		bl	_DoInit
 3403              	.LVL331:
1805:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3404              		.loc 1 1805 3 is_stmt 0 discriminator 1 view .LVU1007
 3405 0038 EAE7     		b	.L204
 3406              	.LVL332:
 3407              	.L206:
1805:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3408              		.loc 1 1805 3 discriminator 1 view .LVU1008
 3409              	.LBE43:
1814:segger/rtt/src/SEGGER_RTT.c ****   }
 3410              		.loc 1 1814 7 view .LVU1009
 3411 003a 4FF0FF30 		mov	r0, #-1
 3412              	.LVL333:
1816:segger/rtt/src/SEGGER_RTT.c **** }
 3413              		.loc 1 1816 3 is_stmt 1 view .LVU1010
1816:segger/rtt/src/SEGGER_RTT.c **** }
 3414              		.loc 1 1816 10 is_stmt 0 view .LVU1011
 3415 003e F8E7     		b	.L203
 3416              	.L210:
 3417              		.align	2
 3418              	.L209:
 3419 0040 00000000 		.word	_SEGGER_RTT
 3420              		.cfi_endproc
 3421              	.LFE28:
 3423              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 3424              		.align	1
 3425              		.global	SEGGER_RTT_SetFlagsUpBuffer
 3426              		.syntax unified
 3427              		.thumb
 3428              		.thumb_func
 3430              	SEGGER_RTT_SetFlagsUpBuffer:
 3431              	.LVL334:
 3432              	.LFB29:
1818:segger/rtt/src/SEGGER_RTT.c **** 
1819:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1820:segger/rtt/src/SEGGER_RTT.c **** *
ARM GAS  /tmp/ccjFarMV.s 			page 98


1821:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1822:segger/rtt/src/SEGGER_RTT.c **** *
1823:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1824:segger/rtt/src/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1825:segger/rtt/src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1826:segger/rtt/src/SEGGER_RTT.c **** *
1827:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1828:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1829:segger/rtt/src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1830:segger/rtt/src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1831:segger/rtt/src/SEGGER_RTT.c **** *
1832:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1833:segger/rtt/src/SEGGER_RTT.c **** *    >= 0  O.K.
1834:segger/rtt/src/SEGGER_RTT.c **** *     < 0  Error
1835:segger/rtt/src/SEGGER_RTT.c **** */
1836:segger/rtt/src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 3433              		.loc 1 1836 71 is_stmt 1 view -0
 3434              		.cfi_startproc
 3435              		@ args = 0, pretend = 0, frame = 0
 3436              		@ frame_needed = 0, uses_anonymous_args = 0
 3437              		.loc 1 1836 71 is_stmt 0 view .LVU1013
 3438 0000 38B5     		push	{r3, r4, r5, lr}
 3439              	.LCFI33:
 3440              		.cfi_def_cfa_offset 16
 3441              		.cfi_offset 3, -16
 3442              		.cfi_offset 4, -12
 3443              		.cfi_offset 5, -8
 3444              		.cfi_offset 14, -4
 3445 0002 0446     		mov	r4, r0
 3446 0004 0D46     		mov	r5, r1
1837:segger/rtt/src/SEGGER_RTT.c ****   int r;
 3447              		.loc 1 1837 3 is_stmt 1 view .LVU1014
1838:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3448              		.loc 1 1838 3 view .LVU1015
1839:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3449              		.loc 1 1839 3 view .LVU1016
1840:segger/rtt/src/SEGGER_RTT.c **** 
1841:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 3450              		.loc 1 1841 3 view .LVU1017
 3451              	.LBB44:
 3452              		.loc 1 1841 3 view .LVU1018
 3453              		.loc 1 1841 3 view .LVU1019
 3454              	.LVL335:
 3455              		.loc 1 1841 3 view .LVU1020
 3456 0006 0E4B     		ldr	r3, .L217
 3457 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3458 000a DBB2     		uxtb	r3, r3
 3459 000c 532B     		cmp	r3, #83
 3460 000e 11D1     		bne	.L216
 3461              	.LVL336:
 3462              	.L212:
 3463              		.loc 1 1841 3 is_stmt 0 view .LVU1021
 3464              	.LBE44:
 3465              		.loc 1 1841 3 is_stmt 1 discriminator 3 view .LVU1022
1842:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3466              		.loc 1 1842 3 view .LVU1023
1843:segger/rtt/src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
ARM GAS  /tmp/ccjFarMV.s 			page 99


 3467              		.loc 1 1843 3 view .LVU1024
 3468              		.loc 1 1843 6 is_stmt 0 view .LVU1025
 3469 0010 022C     		cmp	r4, #2
 3470 0012 12D8     		bhi	.L214
 3471              	.LBB45:
1844:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3472              		.loc 1 1844 5 is_stmt 1 view .LVU1026
 3473              		.loc 1 1844 5 view .LVU1027
 3474              		.syntax unified
 3475              	@ 1844 "segger/rtt/src/SEGGER_RTT.c" 1
 3476 0014 EFF31182 		mrs   r2, basepri  
 3477 0018 4FF02001 		mov   r1, #32       
 3478 001c 81F31188 		msr   basepri, r1  
 3479              		
 3480              	@ 0 "" 2
 3481              	.LVL337:
 3482              		.loc 1 1844 22 view .LVU1028
1845:segger/rtt/src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3483              		.loc 1 1845 5 view .LVU1029
1846:segger/rtt/src/SEGGER_RTT.c ****     pUp->Flags = Flags;
 3484              		.loc 1 1846 5 view .LVU1030
 3485              		.loc 1 1846 16 is_stmt 0 view .LVU1031
 3486              		.thumb
 3487              		.syntax unified
 3488 0020 04EB4404 		add	r4, r4, r4, lsl #1
 3489              	.LVL338:
 3490              		.loc 1 1846 16 view .LVU1032
 3491 0024 064B     		ldr	r3, .L217
 3492 0026 03EBC403 		add	r3, r3, r4, lsl #3
 3493 002a DD62     		str	r5, [r3, #44]
1847:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3494              		.loc 1 1847 5 is_stmt 1 view .LVU1033
 3495              		.syntax unified
 3496              	@ 1847 "segger/rtt/src/SEGGER_RTT.c" 1
 3497 002c 82F31188 		msr   basepri, r2  
 3498              		
 3499              	@ 0 "" 2
 3500              		.thumb
 3501              		.syntax unified
 3502              	.LBE45:
 3503              		.loc 1 1847 24 view .LVU1034
1848:segger/rtt/src/SEGGER_RTT.c ****     r =  0;
 3504              		.loc 1 1848 5 view .LVU1035
 3505              	.LVL339:
 3506              		.loc 1 1848 7 is_stmt 0 view .LVU1036
 3507 0030 0020     		movs	r0, #0
 3508              	.LVL340:
 3509              	.L211:
1849:segger/rtt/src/SEGGER_RTT.c ****   } else {
1850:segger/rtt/src/SEGGER_RTT.c ****     r = -1;
1851:segger/rtt/src/SEGGER_RTT.c ****   }
1852:segger/rtt/src/SEGGER_RTT.c ****   return r;
1853:segger/rtt/src/SEGGER_RTT.c **** }
 3510              		.loc 1 1853 1 view .LVU1037
 3511 0032 38BD     		pop	{r3, r4, r5, pc}
 3512              	.LVL341:
 3513              	.L216:
ARM GAS  /tmp/ccjFarMV.s 			page 100


 3514              	.LBB46:
1841:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3515              		.loc 1 1841 3 is_stmt 1 discriminator 1 view .LVU1038
 3516 0034 FFF7FEFF 		bl	_DoInit
 3517              	.LVL342:
1841:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3518              		.loc 1 1841 3 is_stmt 0 discriminator 1 view .LVU1039
 3519 0038 EAE7     		b	.L212
 3520              	.LVL343:
 3521              	.L214:
1841:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3522              		.loc 1 1841 3 discriminator 1 view .LVU1040
 3523              	.LBE46:
1850:segger/rtt/src/SEGGER_RTT.c ****   }
 3524              		.loc 1 1850 7 view .LVU1041
 3525 003a 4FF0FF30 		mov	r0, #-1
 3526              	.LVL344:
1852:segger/rtt/src/SEGGER_RTT.c **** }
 3527              		.loc 1 1852 3 is_stmt 1 view .LVU1042
1852:segger/rtt/src/SEGGER_RTT.c **** }
 3528              		.loc 1 1852 10 is_stmt 0 view .LVU1043
 3529 003e F8E7     		b	.L211
 3530              	.L218:
 3531              		.align	2
 3532              	.L217:
 3533 0040 00000000 		.word	_SEGGER_RTT
 3534              		.cfi_endproc
 3535              	.LFE29:
 3537              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3538              		.align	1
 3539              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3540              		.syntax unified
 3541              		.thumb
 3542              		.thumb_func
 3544              	SEGGER_RTT_SetFlagsDownBuffer:
 3545              	.LVL345:
 3546              	.LFB30:
1854:segger/rtt/src/SEGGER_RTT.c **** 
1855:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1856:segger/rtt/src/SEGGER_RTT.c **** *
1857:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1858:segger/rtt/src/SEGGER_RTT.c **** *
1859:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1860:segger/rtt/src/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1861:segger/rtt/src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1862:segger/rtt/src/SEGGER_RTT.c **** *
1863:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1864:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1865:segger/rtt/src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1866:segger/rtt/src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1867:segger/rtt/src/SEGGER_RTT.c **** *
1868:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1869:segger/rtt/src/SEGGER_RTT.c **** *    >= 0  O.K.
1870:segger/rtt/src/SEGGER_RTT.c **** *     < 0  Error
1871:segger/rtt/src/SEGGER_RTT.c **** */
1872:segger/rtt/src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3547              		.loc 1 1872 73 is_stmt 1 view -0
ARM GAS  /tmp/ccjFarMV.s 			page 101


 3548              		.cfi_startproc
 3549              		@ args = 0, pretend = 0, frame = 0
 3550              		@ frame_needed = 0, uses_anonymous_args = 0
 3551              		.loc 1 1872 73 is_stmt 0 view .LVU1045
 3552 0000 38B5     		push	{r3, r4, r5, lr}
 3553              	.LCFI34:
 3554              		.cfi_def_cfa_offset 16
 3555              		.cfi_offset 3, -16
 3556              		.cfi_offset 4, -12
 3557              		.cfi_offset 5, -8
 3558              		.cfi_offset 14, -4
 3559 0002 0446     		mov	r4, r0
 3560 0004 0D46     		mov	r5, r1
1873:segger/rtt/src/SEGGER_RTT.c ****   int r;
 3561              		.loc 1 1873 3 is_stmt 1 view .LVU1046
1874:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3562              		.loc 1 1874 3 view .LVU1047
1875:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3563              		.loc 1 1875 3 view .LVU1048
1876:segger/rtt/src/SEGGER_RTT.c **** 
1877:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 3564              		.loc 1 1877 3 view .LVU1049
 3565              	.LBB47:
 3566              		.loc 1 1877 3 view .LVU1050
 3567              		.loc 1 1877 3 view .LVU1051
 3568              	.LVL346:
 3569              		.loc 1 1877 3 view .LVU1052
 3570 0006 0E4B     		ldr	r3, .L225
 3571 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3572 000a DBB2     		uxtb	r3, r3
 3573 000c 532B     		cmp	r3, #83
 3574 000e 11D1     		bne	.L224
 3575              	.LVL347:
 3576              	.L220:
 3577              		.loc 1 1877 3 is_stmt 0 view .LVU1053
 3578              	.LBE47:
 3579              		.loc 1 1877 3 is_stmt 1 discriminator 3 view .LVU1054
1878:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3580              		.loc 1 1878 3 view .LVU1055
1879:segger/rtt/src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3581              		.loc 1 1879 3 view .LVU1056
 3582              		.loc 1 1879 6 is_stmt 0 view .LVU1057
 3583 0010 022C     		cmp	r4, #2
 3584 0012 12D8     		bhi	.L222
 3585              	.LBB48:
1880:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3586              		.loc 1 1880 5 is_stmt 1 view .LVU1058
 3587              		.loc 1 1880 5 view .LVU1059
 3588              		.syntax unified
 3589              	@ 1880 "segger/rtt/src/SEGGER_RTT.c" 1
 3590 0014 EFF31182 		mrs   r2, basepri  
 3591 0018 4FF02001 		mov   r1, #32       
 3592 001c 81F31188 		msr   basepri, r1  
 3593              		
 3594              	@ 0 "" 2
 3595              	.LVL348:
 3596              		.loc 1 1880 22 view .LVU1060
ARM GAS  /tmp/ccjFarMV.s 			page 102


1881:segger/rtt/src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3597              		.loc 1 1881 5 view .LVU1061
1882:segger/rtt/src/SEGGER_RTT.c ****     pDown->Flags = Flags;
 3598              		.loc 1 1882 5 view .LVU1062
 3599              		.loc 1 1882 18 is_stmt 0 view .LVU1063
 3600              		.thumb
 3601              		.syntax unified
 3602 0020 04EB4404 		add	r4, r4, r4, lsl #1
 3603              	.LVL349:
 3604              		.loc 1 1882 18 view .LVU1064
 3605 0024 064B     		ldr	r3, .L225
 3606 0026 03EBC403 		add	r3, r3, r4, lsl #3
 3607 002a 5D67     		str	r5, [r3, #116]
1883:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3608              		.loc 1 1883 5 is_stmt 1 view .LVU1065
 3609              		.syntax unified
 3610              	@ 1883 "segger/rtt/src/SEGGER_RTT.c" 1
 3611 002c 82F31188 		msr   basepri, r2  
 3612              		
 3613              	@ 0 "" 2
 3614              		.thumb
 3615              		.syntax unified
 3616              	.LBE48:
 3617              		.loc 1 1883 24 view .LVU1066
1884:segger/rtt/src/SEGGER_RTT.c ****     r =  0;
 3618              		.loc 1 1884 5 view .LVU1067
 3619              	.LVL350:
 3620              		.loc 1 1884 7 is_stmt 0 view .LVU1068
 3621 0030 0020     		movs	r0, #0
 3622              	.LVL351:
 3623              	.L219:
1885:segger/rtt/src/SEGGER_RTT.c ****   } else {
1886:segger/rtt/src/SEGGER_RTT.c ****     r = -1;
1887:segger/rtt/src/SEGGER_RTT.c ****   }
1888:segger/rtt/src/SEGGER_RTT.c ****   return r;
1889:segger/rtt/src/SEGGER_RTT.c **** }
 3624              		.loc 1 1889 1 view .LVU1069
 3625 0032 38BD     		pop	{r3, r4, r5, pc}
 3626              	.LVL352:
 3627              	.L224:
 3628              	.LBB49:
1877:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3629              		.loc 1 1877 3 is_stmt 1 discriminator 1 view .LVU1070
 3630 0034 FFF7FEFF 		bl	_DoInit
 3631              	.LVL353:
1877:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3632              		.loc 1 1877 3 is_stmt 0 discriminator 1 view .LVU1071
 3633 0038 EAE7     		b	.L220
 3634              	.LVL354:
 3635              	.L222:
1877:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3636              		.loc 1 1877 3 discriminator 1 view .LVU1072
 3637              	.LBE49:
1886:segger/rtt/src/SEGGER_RTT.c ****   }
 3638              		.loc 1 1886 7 view .LVU1073
 3639 003a 4FF0FF30 		mov	r0, #-1
 3640              	.LVL355:
ARM GAS  /tmp/ccjFarMV.s 			page 103


1888:segger/rtt/src/SEGGER_RTT.c **** }
 3641              		.loc 1 1888 3 is_stmt 1 view .LVU1074
1888:segger/rtt/src/SEGGER_RTT.c **** }
 3642              		.loc 1 1888 10 is_stmt 0 view .LVU1075
 3643 003e F8E7     		b	.L219
 3644              	.L226:
 3645              		.align	2
 3646              	.L225:
 3647 0040 00000000 		.word	_SEGGER_RTT
 3648              		.cfi_endproc
 3649              	.LFE30:
 3651              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3652              		.align	1
 3653              		.global	SEGGER_RTT_Init
 3654              		.syntax unified
 3655              		.thumb
 3656              		.thumb_func
 3658              	SEGGER_RTT_Init:
 3659              	.LFB31:
1890:segger/rtt/src/SEGGER_RTT.c **** 
1891:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1892:segger/rtt/src/SEGGER_RTT.c **** *
1893:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1894:segger/rtt/src/SEGGER_RTT.c **** *
1895:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1896:segger/rtt/src/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1897:segger/rtt/src/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1898:segger/rtt/src/SEGGER_RTT.c **** *
1899:segger/rtt/src/SEGGER_RTT.c **** */
1900:segger/rtt/src/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3660              		.loc 1 1900 29 is_stmt 1 view -0
 3661              		.cfi_startproc
 3662              		@ args = 0, pretend = 0, frame = 0
 3663              		@ frame_needed = 0, uses_anonymous_args = 0
 3664 0000 08B5     		push	{r3, lr}
 3665              	.LCFI35:
 3666              		.cfi_def_cfa_offset 8
 3667              		.cfi_offset 3, -8
 3668              		.cfi_offset 14, -4
1901:segger/rtt/src/SEGGER_RTT.c ****   _DoInit();
 3669              		.loc 1 1901 3 view .LVU1077
 3670 0002 FFF7FEFF 		bl	_DoInit
 3671              	.LVL356:
1902:segger/rtt/src/SEGGER_RTT.c **** }
 3672              		.loc 1 1902 1 is_stmt 0 view .LVU1078
 3673 0006 08BD     		pop	{r3, pc}
 3674              		.cfi_endproc
 3675              	.LFE31:
 3677              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 3678              		.align	1
 3679              		.global	SEGGER_RTT_SetTerminal
 3680              		.syntax unified
 3681              		.thumb
 3682              		.thumb_func
 3684              	SEGGER_RTT_SetTerminal:
 3685              	.LVL357:
 3686              	.LFB32:
ARM GAS  /tmp/ccjFarMV.s 			page 104


1903:segger/rtt/src/SEGGER_RTT.c **** 
1904:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1905:segger/rtt/src/SEGGER_RTT.c **** *
1906:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1907:segger/rtt/src/SEGGER_RTT.c **** *
1908:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1909:segger/rtt/src/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1910:segger/rtt/src/SEGGER_RTT.c **** *
1911:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1912:segger/rtt/src/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1913:segger/rtt/src/SEGGER_RTT.c **** *
1914:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1915:segger/rtt/src/SEGGER_RTT.c **** *    >= 0  O.K.
1916:segger/rtt/src/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1917:segger/rtt/src/SEGGER_RTT.c **** *
1918:segger/rtt/src/SEGGER_RTT.c **** *  Notes
1919:segger/rtt/src/SEGGER_RTT.c **** *    (1) Buffer 0 is always reserved for terminal I/O, so we can use index 0 here, fixed
1920:segger/rtt/src/SEGGER_RTT.c **** */
1921:segger/rtt/src/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 3687              		.loc 1 1921 55 is_stmt 1 view -0
 3688              		.cfi_startproc
 3689              		@ args = 0, pretend = 0, frame = 8
 3690              		@ frame_needed = 0, uses_anonymous_args = 0
 3691              		.loc 1 1921 55 is_stmt 0 view .LVU1080
 3692 0000 30B5     		push	{r4, r5, lr}
 3693              	.LCFI36:
 3694              		.cfi_def_cfa_offset 12
 3695              		.cfi_offset 4, -12
 3696              		.cfi_offset 5, -8
 3697              		.cfi_offset 14, -4
 3698 0002 83B0     		sub	sp, sp, #12
 3699              	.LCFI37:
 3700              		.cfi_def_cfa_offset 24
 3701 0004 0446     		mov	r4, r0
1922:segger/rtt/src/SEGGER_RTT.c ****   unsigned char         ac[2];
 3702              		.loc 1 1922 3 is_stmt 1 view .LVU1081
1923:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3703              		.loc 1 1923 3 view .LVU1082
1924:segger/rtt/src/SEGGER_RTT.c ****   unsigned Avail;
 3704              		.loc 1 1924 3 view .LVU1083
1925:segger/rtt/src/SEGGER_RTT.c ****   int r;
 3705              		.loc 1 1925 3 view .LVU1084
1926:segger/rtt/src/SEGGER_RTT.c **** 
1927:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 3706              		.loc 1 1927 3 view .LVU1085
 3707              	.LBB50:
 3708              		.loc 1 1927 3 view .LVU1086
 3709              		.loc 1 1927 3 view .LVU1087
 3710              	.LVL358:
 3711              		.loc 1 1927 3 view .LVU1088
 3712 0006 1E4B     		ldr	r3, .L240
 3713 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3714 000a DBB2     		uxtb	r3, r3
 3715 000c 532B     		cmp	r3, #83
 3716 000e 1FD1     		bne	.L237
 3717              	.LVL359:
 3718              	.L230:
ARM GAS  /tmp/ccjFarMV.s 			page 105


 3719              		.loc 1 1927 3 is_stmt 0 view .LVU1089
 3720              	.LBE50:
 3721              		.loc 1 1927 3 is_stmt 1 discriminator 3 view .LVU1090
1928:segger/rtt/src/SEGGER_RTT.c ****   r = 0;
 3722              		.loc 1 1928 3 view .LVU1091
1929:segger/rtt/src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3723              		.loc 1 1929 3 view .LVU1092
 3724              		.loc 1 1929 9 is_stmt 0 view .LVU1093
 3725 0010 FF23     		movs	r3, #255
 3726 0012 8DF80430 		strb	r3, [sp, #4]
1930:segger/rtt/src/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 3727              		.loc 1 1930 3 is_stmt 1 view .LVU1094
 3728              		.loc 1 1930 6 is_stmt 0 view .LVU1095
 3729 0016 0F2C     		cmp	r4, #15
 3730 0018 2FD8     		bhi	.L234
1931:segger/rtt/src/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 3731              		.loc 1 1931 5 is_stmt 1 view .LVU1096
 3732              		.loc 1 1931 25 is_stmt 0 view .LVU1097
 3733 001a 1A4B     		ldr	r3, .L240+4
 3734 001c 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 3735              		.loc 1 1931 11 view .LVU1098
 3736 001e 8DF80530 		strb	r3, [sp, #5]
1932:segger/rtt/src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // 
 3737              		.loc 1 1932 5 is_stmt 1 view .LVU1099
 3738              	.LVL360:
 3739              	.LBB51:
1933:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();                     // Lock to make sure that no other task is writing into 
 3740              		.loc 1 1933 5 view .LVU1100
 3741              		.loc 1 1933 5 view .LVU1101
 3742              		.syntax unified
 3743              	@ 1933 "segger/rtt/src/SEGGER_RTT.c" 1
 3744 0022 EFF31185 		mrs   r5, basepri  
 3745 0026 4FF02001 		mov   r1, #32       
 3746 002a 81F31188 		msr   basepri, r1  
 3747              		
 3748              	@ 0 "" 2
 3749              	.LVL361:
 3750              		.loc 1 1933 22 view .LVU1102
1934:segger/rtt/src/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 3751              		.loc 1 1934 5 view .LVU1103
 3752              		.loc 1 1934 15 is_stmt 0 view .LVU1104
 3753              		.thumb
 3754              		.syntax unified
 3755 002e 144B     		ldr	r3, .L240
 3756 0030 DB6A     		ldr	r3, [r3, #44]
 3757              		.loc 1 1934 23 view .LVU1105
 3758 0032 03F00303 		and	r3, r3, #3
 3759              		.loc 1 1934 8 view .LVU1106
 3760 0036 022B     		cmp	r3, #2
 3761 0038 0DD0     		beq	.L238
1935:segger/rtt/src/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
1936:segger/rtt/src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
1937:segger/rtt/src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1938:segger/rtt/src/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 3762              		.loc 1 1938 7 is_stmt 1 view .LVU1107
 3763              		.loc 1 1938 15 is_stmt 0 view .LVU1108
 3764 003a 1348     		ldr	r0, .L240+8
ARM GAS  /tmp/ccjFarMV.s 			page 106


 3765              	.LVL362:
 3766              		.loc 1 1938 15 view .LVU1109
 3767 003c FFF7FEFF 		bl	_GetAvailWriteSpace
 3768              	.LVL363:
1939:segger/rtt/src/SEGGER_RTT.c ****       if (Avail >= 2) {
 3769              		.loc 1 1939 7 is_stmt 1 view .LVU1110
 3770              		.loc 1 1939 10 is_stmt 0 view .LVU1111
 3771 0040 0128     		cmp	r0, #1
 3772 0042 11D8     		bhi	.L239
1940:segger/rtt/src/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
1941:segger/rtt/src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
1942:segger/rtt/src/SEGGER_RTT.c ****       } else {
1943:segger/rtt/src/SEGGER_RTT.c ****         r = -1;
 3773              		.loc 1 1943 11 view .LVU1112
 3774 0044 4FF0FF30 		mov	r0, #-1
 3775              	.LVL364:
 3776              	.L233:
1944:segger/rtt/src/SEGGER_RTT.c ****       }
1945:segger/rtt/src/SEGGER_RTT.c ****     }
1946:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3777              		.loc 1 1946 5 is_stmt 1 view .LVU1113
 3778              		.syntax unified
 3779              	@ 1946 "segger/rtt/src/SEGGER_RTT.c" 1
 3780 0048 85F31188 		msr   basepri, r5  
 3781              		
 3782              	@ 0 "" 2
 3783              		.thumb
 3784              		.syntax unified
 3785              	.LBE51:
 3786              		.loc 1 1946 24 view .LVU1114
 3787              	.LVL365:
 3788              	.L229:
1947:segger/rtt/src/SEGGER_RTT.c ****   } else {
1948:segger/rtt/src/SEGGER_RTT.c ****     r = -1;
1949:segger/rtt/src/SEGGER_RTT.c ****   }
1950:segger/rtt/src/SEGGER_RTT.c ****   return r;
1951:segger/rtt/src/SEGGER_RTT.c **** }
 3789              		.loc 1 1951 1 is_stmt 0 view .LVU1115
 3790 004c 03B0     		add	sp, sp, #12
 3791              	.LCFI38:
 3792              		.cfi_remember_state
 3793              		.cfi_def_cfa_offset 12
 3794              		@ sp needed
 3795 004e 30BD     		pop	{r4, r5, pc}
 3796              	.LVL366:
 3797              	.L237:
 3798              	.LCFI39:
 3799              		.cfi_restore_state
 3800              	.LBB52:
1927:segger/rtt/src/SEGGER_RTT.c ****   r = 0;
 3801              		.loc 1 1927 3 is_stmt 1 discriminator 1 view .LVU1116
 3802 0050 FFF7FEFF 		bl	_DoInit
 3803              	.LVL367:
1927:segger/rtt/src/SEGGER_RTT.c ****   r = 0;
 3804              		.loc 1 1927 3 is_stmt 0 discriminator 1 view .LVU1117
 3805 0054 DCE7     		b	.L230
 3806              	.LVL368:
ARM GAS  /tmp/ccjFarMV.s 			page 107


 3807              	.L238:
1927:segger/rtt/src/SEGGER_RTT.c ****   r = 0;
 3808              		.loc 1 1927 3 discriminator 1 view .LVU1118
 3809              	.LBE52:
 3810              	.LBB53:
1935:segger/rtt/src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3811              		.loc 1 1935 7 is_stmt 1 view .LVU1119
1935:segger/rtt/src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3812              		.loc 1 1935 23 is_stmt 0 view .LVU1120
 3813 0056 0D4B     		ldr	r3, .L240+12
 3814 0058 1C70     		strb	r4, [r3]
1936:segger/rtt/src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3815              		.loc 1 1936 7 is_stmt 1 view .LVU1121
 3816 005a 0222     		movs	r2, #2
 3817 005c 01A9     		add	r1, sp, #4
 3818 005e 0A48     		ldr	r0, .L240+8
 3819              	.LVL369:
1936:segger/rtt/src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3820              		.loc 1 1936 7 is_stmt 0 view .LVU1122
 3821 0060 FFF7FEFF 		bl	_WriteBlocking
 3822              	.LVL370:
1936:segger/rtt/src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3823              		.loc 1 1936 7 view .LVU1123
 3824              	.LBE53:
1928:segger/rtt/src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3825              		.loc 1 1928 5 view .LVU1124
 3826 0064 0020     		movs	r0, #0
 3827              	.LBB54:
 3828 0066 EFE7     		b	.L233
 3829              	.LVL371:
 3830              	.L239:
1940:segger/rtt/src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3831              		.loc 1 1940 9 is_stmt 1 view .LVU1125
1940:segger/rtt/src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3832              		.loc 1 1940 25 is_stmt 0 view .LVU1126
 3833 0068 084B     		ldr	r3, .L240+12
 3834 006a 1C70     		strb	r4, [r3]
1941:segger/rtt/src/SEGGER_RTT.c ****       } else {
 3835              		.loc 1 1941 9 is_stmt 1 view .LVU1127
 3836 006c 0222     		movs	r2, #2
 3837 006e 01A9     		add	r1, sp, #4
 3838 0070 0548     		ldr	r0, .L240+8
 3839              	.LVL372:
1941:segger/rtt/src/SEGGER_RTT.c ****       } else {
 3840              		.loc 1 1941 9 is_stmt 0 view .LVU1128
 3841 0072 FFF7FEFF 		bl	_WriteNoCheck
 3842              	.LVL373:
1941:segger/rtt/src/SEGGER_RTT.c ****       } else {
 3843              		.loc 1 1941 9 view .LVU1129
 3844              	.LBE54:
1928:segger/rtt/src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3845              		.loc 1 1928 5 view .LVU1130
 3846 0076 0020     		movs	r0, #0
 3847              	.LBB55:
 3848 0078 E6E7     		b	.L233
 3849              	.LVL374:
 3850              	.L234:
ARM GAS  /tmp/ccjFarMV.s 			page 108


1928:segger/rtt/src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3851              		.loc 1 1928 5 view .LVU1131
 3852              	.LBE55:
1948:segger/rtt/src/SEGGER_RTT.c ****   }
 3853              		.loc 1 1948 7 view .LVU1132
 3854 007a 4FF0FF30 		mov	r0, #-1
 3855              	.LVL375:
1950:segger/rtt/src/SEGGER_RTT.c **** }
 3856              		.loc 1 1950 3 is_stmt 1 view .LVU1133
1950:segger/rtt/src/SEGGER_RTT.c **** }
 3857              		.loc 1 1950 10 is_stmt 0 view .LVU1134
 3858 007e E5E7     		b	.L229
 3859              	.L241:
 3860              		.align	2
 3861              	.L240:
 3862 0080 00000000 		.word	_SEGGER_RTT
 3863 0084 00000000 		.word	_aTerminalId
 3864 0088 18000000 		.word	_SEGGER_RTT+24
 3865 008c 00000000 		.word	_ActiveTerminal
 3866              		.cfi_endproc
 3867              	.LFE32:
 3869              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3870              		.align	1
 3871              		.global	SEGGER_RTT_TerminalOut
 3872              		.syntax unified
 3873              		.thumb
 3874              		.thumb_func
 3876              	SEGGER_RTT_TerminalOut:
 3877              	.LVL376:
 3878              	.LFB33:
1952:segger/rtt/src/SEGGER_RTT.c **** 
1953:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
1954:segger/rtt/src/SEGGER_RTT.c **** *
1955:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1956:segger/rtt/src/SEGGER_RTT.c **** *
1957:segger/rtt/src/SEGGER_RTT.c **** *  Function description
1958:segger/rtt/src/SEGGER_RTT.c **** *    Writes a string to the given terminal
1959:segger/rtt/src/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1960:segger/rtt/src/SEGGER_RTT.c **** *
1961:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
1962:segger/rtt/src/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1963:segger/rtt/src/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1964:segger/rtt/src/SEGGER_RTT.c **** *
1965:segger/rtt/src/SEGGER_RTT.c **** *  Return value
1966:segger/rtt/src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1967:segger/rtt/src/SEGGER_RTT.c **** *     < 0 - Error.
1968:segger/rtt/src/SEGGER_RTT.c **** *
1969:segger/rtt/src/SEGGER_RTT.c **** */
1970:segger/rtt/src/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 3879              		.loc 1 1970 70 is_stmt 1 view -0
 3880              		.cfi_startproc
 3881              		@ args = 0, pretend = 0, frame = 0
 3882              		@ frame_needed = 0, uses_anonymous_args = 0
 3883              		.loc 1 1970 70 is_stmt 0 view .LVU1136
 3884 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3885              	.LCFI40:
 3886              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccjFarMV.s 			page 109


 3887              		.cfi_offset 3, -32
 3888              		.cfi_offset 4, -28
 3889              		.cfi_offset 5, -24
 3890              		.cfi_offset 6, -20
 3891              		.cfi_offset 7, -16
 3892              		.cfi_offset 8, -12
 3893              		.cfi_offset 9, -8
 3894              		.cfi_offset 14, -4
 3895 0004 0446     		mov	r4, r0
 3896 0006 0D46     		mov	r5, r1
1971:segger/rtt/src/SEGGER_RTT.c ****   int                   Status;
 3897              		.loc 1 1971 3 is_stmt 1 view .LVU1137
1972:segger/rtt/src/SEGGER_RTT.c ****   unsigned              FragLen;
 3898              		.loc 1 1972 3 view .LVU1138
1973:segger/rtt/src/SEGGER_RTT.c ****   unsigned              Avail;
 3899              		.loc 1 1973 3 view .LVU1139
1974:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3900              		.loc 1 1974 3 view .LVU1140
1975:segger/rtt/src/SEGGER_RTT.c ****   //
1976:segger/rtt/src/SEGGER_RTT.c ****   INIT();
 3901              		.loc 1 1976 3 view .LVU1141
 3902              	.LBB56:
 3903              		.loc 1 1976 3 view .LVU1142
 3904              		.loc 1 1976 3 view .LVU1143
 3905              	.LVL377:
 3906              		.loc 1 1976 3 view .LVU1144
 3907 0008 364B     		ldr	r3, .L256
 3908 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3909 000c DBB2     		uxtb	r3, r3
 3910 000e 532B     		cmp	r3, #83
 3911 0010 1FD1     		bne	.L253
 3912              	.LVL378:
 3913              	.L243:
 3914              		.loc 1 1976 3 is_stmt 0 view .LVU1145
 3915              	.LBE56:
 3916              		.loc 1 1976 3 is_stmt 1 discriminator 3 view .LVU1146
1977:segger/rtt/src/SEGGER_RTT.c ****   //
1978:segger/rtt/src/SEGGER_RTT.c ****   // Validate terminal ID.
1979:segger/rtt/src/SEGGER_RTT.c ****   //
1980:segger/rtt/src/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 3917              		.loc 1 1980 3 view .LVU1147
 3918              		.loc 1 1980 6 is_stmt 0 view .LVU1148
 3919 0012 0F2C     		cmp	r4, #15
 3920 0014 62D8     		bhi	.L248
1981:segger/rtt/src/SEGGER_RTT.c ****     //
1982:segger/rtt/src/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1983:segger/rtt/src/SEGGER_RTT.c ****     //
1984:segger/rtt/src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // 
 3921              		.loc 1 1984 5 is_stmt 1 view .LVU1149
 3922              	.LVL379:
1985:segger/rtt/src/SEGGER_RTT.c ****     //
1986:segger/rtt/src/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1987:segger/rtt/src/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1988:segger/rtt/src/SEGGER_RTT.c ****     //
1989:segger/rtt/src/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 3923              		.loc 1 1989 5 view .LVU1150
 3924              		.loc 1 1989 15 is_stmt 0 view .LVU1151
ARM GAS  /tmp/ccjFarMV.s 			page 110


 3925 0016 2846     		mov	r0, r5
 3926 0018 FFF7FEFF 		bl	strlen
 3927              	.LVL380:
 3928 001c 8046     		mov	r8, r0
 3929              	.LVL381:
 3930              	.LBB57:
1990:segger/rtt/src/SEGGER_RTT.c ****     //
1991:segger/rtt/src/SEGGER_RTT.c ****     // How we output depends upon the mode...
1992:segger/rtt/src/SEGGER_RTT.c ****     //
1993:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3931              		.loc 1 1993 5 is_stmt 1 view .LVU1152
 3932              		.loc 1 1993 5 view .LVU1153
 3933              		.syntax unified
 3934              	@ 1993 "segger/rtt/src/SEGGER_RTT.c" 1
 3935 001e EFF31186 		mrs   r6, basepri  
 3936 0022 4FF02001 		mov   r1, #32       
 3937 0026 81F31188 		msr   basepri, r1  
 3938              		
 3939              	@ 0 "" 2
 3940              	.LVL382:
 3941              		.loc 1 1993 22 view .LVU1154
1994:segger/rtt/src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3942              		.loc 1 1994 5 view .LVU1155
 3943              		.loc 1 1994 13 is_stmt 0 view .LVU1156
 3944              		.thumb
 3945              		.syntax unified
 3946 002a 2F4F     		ldr	r7, .L256+4
 3947              	.LVL383:
 3948              		.loc 1 1994 13 view .LVU1157
 3949 002c 3846     		mov	r0, r7
 3950              	.LVL384:
 3951              		.loc 1 1994 13 view .LVU1158
 3952 002e FFF7FEFF 		bl	_GetAvailWriteSpace
 3953              	.LVL385:
 3954 0032 8146     		mov	r9, r0
 3955              	.LVL386:
1995:segger/rtt/src/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 3956              		.loc 1 1995 5 is_stmt 1 view .LVU1159
 3957              		.loc 1 1995 18 is_stmt 0 view .LVU1160
 3958 0034 7B69     		ldr	r3, [r7, #20]
 3959              		.loc 1 1995 26 view .LVU1161
 3960 0036 03F00303 		and	r3, r3, #3
 3961              		.loc 1 1995 5 view .LVU1162
 3962 003a 012B     		cmp	r3, #1
 3963 003c 1CD0     		beq	.L245
 3964 003e 022B     		cmp	r3, #2
 3965 0040 34D0     		beq	.L246
 3966 0042 002B     		cmp	r3, #0
 3967 0044 47D1     		bne	.L249
1996:segger/rtt/src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1997:segger/rtt/src/SEGGER_RTT.c ****       //
1998:segger/rtt/src/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1999:segger/rtt/src/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
2000:segger/rtt/src/SEGGER_RTT.c ****       //
2001:segger/rtt/src/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
 3968              		.loc 1 2001 7 is_stmt 1 view .LVU1163
 3969              		.loc 1 2001 28 is_stmt 0 view .LVU1164
ARM GAS  /tmp/ccjFarMV.s 			page 111


 3970 0046 08F10403 		add	r3, r8, #4
 3971              		.loc 1 2001 10 view .LVU1165
 3972 004a 8342     		cmp	r3, r0
 3973 004c 04D9     		bls	.L254
2002:segger/rtt/src/SEGGER_RTT.c ****         Status = 0;
 3974              		.loc 1 2002 16 view .LVU1166
 3975 004e 0024     		movs	r4, #0
 3976              	.LVL387:
 3977              		.loc 1 2002 16 view .LVU1167
 3978 0050 3CE0     		b	.L247
 3979              	.LVL388:
 3980              	.L253:
 3981              		.loc 1 2002 16 view .LVU1168
 3982              	.LBE57:
 3983              	.LBB58:
1976:segger/rtt/src/SEGGER_RTT.c ****   //
 3984              		.loc 1 1976 3 is_stmt 1 discriminator 1 view .LVU1169
 3985 0052 FFF7FEFF 		bl	_DoInit
 3986              	.LVL389:
1976:segger/rtt/src/SEGGER_RTT.c ****   //
 3987              		.loc 1 1976 3 is_stmt 0 discriminator 1 view .LVU1170
 3988 0056 DCE7     		b	.L243
 3989              	.LVL390:
 3990              	.L254:
1976:segger/rtt/src/SEGGER_RTT.c ****   //
 3991              		.loc 1 1976 3 discriminator 1 view .LVU1171
 3992              	.LBE58:
 3993              	.LBB59:
2003:segger/rtt/src/SEGGER_RTT.c ****       } else {
2004:segger/rtt/src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
 3994              		.loc 1 2004 9 is_stmt 1 view .LVU1172
 3995 0058 2146     		mov	r1, r4
 3996 005a 3846     		mov	r0, r7
 3997              	.LVL391:
 3998              		.loc 1 2004 9 is_stmt 0 view .LVU1173
 3999 005c FFF7FEFF 		bl	_PostTerminalSwitch
 4000              	.LVL392:
2005:segger/rtt/src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 4001              		.loc 1 2005 9 is_stmt 1 view .LVU1174
 4002              		.loc 1 2005 23 is_stmt 0 view .LVU1175
 4003 0060 4246     		mov	r2, r8
 4004 0062 2946     		mov	r1, r5
 4005 0064 3846     		mov	r0, r7
 4006 0066 FFF7FEFF 		bl	_WriteBlocking
 4007              	.LVL393:
 4008 006a 0446     		mov	r4, r0
 4009              	.LVL394:
2006:segger/rtt/src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4010              		.loc 1 2006 9 is_stmt 1 view .LVU1176
 4011 006c 1F4B     		ldr	r3, .L256+8
 4012 006e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4013 0070 3846     		mov	r0, r7
 4014              	.LVL395:
 4015              		.loc 1 2006 9 is_stmt 0 view .LVU1177
 4016 0072 FFF7FEFF 		bl	_PostTerminalSwitch
 4017              	.LVL396:
 4018 0076 29E0     		b	.L247
ARM GAS  /tmp/ccjFarMV.s 			page 112


 4019              	.LVL397:
 4020              	.L245:
2007:segger/rtt/src/SEGGER_RTT.c ****       }
2008:segger/rtt/src/SEGGER_RTT.c ****       break;
2009:segger/rtt/src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
2010:segger/rtt/src/SEGGER_RTT.c ****       //
2011:segger/rtt/src/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
2012:segger/rtt/src/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
2013:segger/rtt/src/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
2014:segger/rtt/src/SEGGER_RTT.c ****       //
2015:segger/rtt/src/SEGGER_RTT.c ****       if (Avail < 4u) {
 4021              		.loc 1 2015 7 is_stmt 1 view .LVU1178
 4022              		.loc 1 2015 10 is_stmt 0 view .LVU1179
 4023 0078 0328     		cmp	r0, #3
 4024 007a 02D8     		bhi	.L255
2016:segger/rtt/src/SEGGER_RTT.c ****         Status = -1;
 4025              		.loc 1 2016 16 view .LVU1180
 4026 007c 4FF0FF34 		mov	r4, #-1
 4027 0080 24E0     		b	.L247
 4028              	.L255:
2017:segger/rtt/src/SEGGER_RTT.c ****       } else {
2018:segger/rtt/src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
 4029              		.loc 1 2018 9 is_stmt 1 view .LVU1181
 4030 0082 194F     		ldr	r7, .L256+4
 4031              		.loc 1 2018 9 is_stmt 0 view .LVU1182
 4032 0084 2146     		mov	r1, r4
 4033 0086 3846     		mov	r0, r7
 4034              	.LVL398:
 4035              		.loc 1 2018 9 view .LVU1183
 4036 0088 FFF7FEFF 		bl	_PostTerminalSwitch
 4037              	.LVL399:
2019:segger/rtt/src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 4038              		.loc 1 2019 9 is_stmt 1 view .LVU1184
 4039              		.loc 1 2019 66 is_stmt 0 view .LVU1185
 4040 008c A9F10402 		sub	r2, r9, #4
 4041              		.loc 1 2019 23 view .LVU1186
 4042 0090 4245     		cmp	r2, r8
 4043 0092 28BF     		it	cs
 4044 0094 4246     		movcs	r2, r8
 4045 0096 2946     		mov	r1, r5
 4046 0098 3846     		mov	r0, r7
 4047 009a FFF7FEFF 		bl	_WriteBlocking
 4048              	.LVL400:
 4049 009e 0446     		mov	r4, r0
 4050              	.LVL401:
2020:segger/rtt/src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4051              		.loc 1 2020 9 is_stmt 1 view .LVU1187
 4052 00a0 124B     		ldr	r3, .L256+8
 4053 00a2 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4054 00a4 3846     		mov	r0, r7
 4055              	.LVL402:
 4056              		.loc 1 2020 9 is_stmt 0 view .LVU1188
 4057 00a6 FFF7FEFF 		bl	_PostTerminalSwitch
 4058              	.LVL403:
 4059 00aa 0FE0     		b	.L247
 4060              	.LVL404:
 4061              	.L246:
ARM GAS  /tmp/ccjFarMV.s 			page 113


2021:segger/rtt/src/SEGGER_RTT.c ****       }
2022:segger/rtt/src/SEGGER_RTT.c ****       break;
2023:segger/rtt/src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
2024:segger/rtt/src/SEGGER_RTT.c ****       //
2025:segger/rtt/src/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
2026:segger/rtt/src/SEGGER_RTT.c ****       //
2027:segger/rtt/src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
 4062              		.loc 1 2027 7 is_stmt 1 view .LVU1189
 4063 00ac 0E4F     		ldr	r7, .L256+4
 4064              		.loc 1 2027 7 is_stmt 0 view .LVU1190
 4065 00ae 2146     		mov	r1, r4
 4066 00b0 3846     		mov	r0, r7
 4067              	.LVL405:
 4068              		.loc 1 2027 7 view .LVU1191
 4069 00b2 FFF7FEFF 		bl	_PostTerminalSwitch
 4070              	.LVL406:
2028:segger/rtt/src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 4071              		.loc 1 2028 7 is_stmt 1 view .LVU1192
 4072              		.loc 1 2028 21 is_stmt 0 view .LVU1193
 4073 00b6 4246     		mov	r2, r8
 4074 00b8 2946     		mov	r1, r5
 4075 00ba 3846     		mov	r0, r7
 4076 00bc FFF7FEFF 		bl	_WriteBlocking
 4077              	.LVL407:
 4078 00c0 0446     		mov	r4, r0
 4079              	.LVL408:
2029:segger/rtt/src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 4080              		.loc 1 2029 7 is_stmt 1 view .LVU1194
 4081 00c2 0A4B     		ldr	r3, .L256+8
 4082 00c4 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4083 00c6 3846     		mov	r0, r7
 4084              	.LVL409:
 4085              		.loc 1 2029 7 is_stmt 0 view .LVU1195
 4086 00c8 FFF7FEFF 		bl	_PostTerminalSwitch
 4087              	.LVL410:
2030:segger/rtt/src/SEGGER_RTT.c ****       break;
 4088              		.loc 1 2030 7 is_stmt 1 view .LVU1196
 4089              	.L247:
2031:segger/rtt/src/SEGGER_RTT.c ****     default:
2032:segger/rtt/src/SEGGER_RTT.c ****       Status = -1;
2033:segger/rtt/src/SEGGER_RTT.c ****       break;
2034:segger/rtt/src/SEGGER_RTT.c ****     }
2035:segger/rtt/src/SEGGER_RTT.c ****     //
2036:segger/rtt/src/SEGGER_RTT.c ****     // Finish up.
2037:segger/rtt/src/SEGGER_RTT.c ****     //
2038:segger/rtt/src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 4090              		.loc 1 2038 5 view .LVU1197
 4091              		.syntax unified
 4092              	@ 2038 "segger/rtt/src/SEGGER_RTT.c" 1
 4093 00cc 86F31188 		msr   basepri, r6  
 4094              		
 4095              	@ 0 "" 2
 4096              		.thumb
 4097              		.syntax unified
 4098              	.LBE59:
 4099              		.loc 1 2038 24 view .LVU1198
 4100              	.LVL411:
ARM GAS  /tmp/ccjFarMV.s 			page 114


 4101              	.L242:
2039:segger/rtt/src/SEGGER_RTT.c ****   } else {
2040:segger/rtt/src/SEGGER_RTT.c ****     Status = -1;
2041:segger/rtt/src/SEGGER_RTT.c ****   }
2042:segger/rtt/src/SEGGER_RTT.c ****   return Status;
2043:segger/rtt/src/SEGGER_RTT.c **** }
 4102              		.loc 1 2043 1 is_stmt 0 view .LVU1199
 4103 00d0 2046     		mov	r0, r4
 4104 00d2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4105              	.LVL412:
 4106              	.L249:
 4107              	.LBB60:
1995:segger/rtt/src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
 4108              		.loc 1 1995 5 view .LVU1200
 4109 00d6 4FF0FF34 		mov	r4, #-1
 4110 00da F7E7     		b	.L247
 4111              	.LVL413:
 4112              	.L248:
1995:segger/rtt/src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
 4113              		.loc 1 1995 5 view .LVU1201
 4114              	.LBE60:
2040:segger/rtt/src/SEGGER_RTT.c ****   }
 4115              		.loc 1 2040 12 view .LVU1202
 4116 00dc 4FF0FF34 		mov	r4, #-1
 4117              	.LVL414:
2042:segger/rtt/src/SEGGER_RTT.c **** }
 4118              		.loc 1 2042 3 is_stmt 1 view .LVU1203
2042:segger/rtt/src/SEGGER_RTT.c **** }
 4119              		.loc 1 2042 10 is_stmt 0 view .LVU1204
 4120 00e0 F6E7     		b	.L242
 4121              	.L257:
 4122 00e2 00BF     		.align	2
 4123              	.L256:
 4124 00e4 00000000 		.word	_SEGGER_RTT
 4125 00e8 18000000 		.word	_SEGGER_RTT+24
 4126 00ec 00000000 		.word	_ActiveTerminal
 4127              		.cfi_endproc
 4128              	.LFE33:
 4130              		.section	.text.SEGGER_RTT_GetAvailWriteSpace,"ax",%progbits
 4131              		.align	1
 4132              		.global	SEGGER_RTT_GetAvailWriteSpace
 4133              		.syntax unified
 4134              		.thumb
 4135              		.thumb_func
 4137              	SEGGER_RTT_GetAvailWriteSpace:
 4138              	.LVL415:
 4139              	.LFB34:
2044:segger/rtt/src/SEGGER_RTT.c **** 
2045:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
2046:segger/rtt/src/SEGGER_RTT.c **** *
2047:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_GetAvailWriteSpace
2048:segger/rtt/src/SEGGER_RTT.c **** *
2049:segger/rtt/src/SEGGER_RTT.c **** *  Function description
2050:segger/rtt/src/SEGGER_RTT.c **** *    Returns the number of bytes available in the ring buffer.
2051:segger/rtt/src/SEGGER_RTT.c **** *
2052:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
2053:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
ARM GAS  /tmp/ccjFarMV.s 			page 115


2054:segger/rtt/src/SEGGER_RTT.c **** *
2055:segger/rtt/src/SEGGER_RTT.c **** *  Return value
2056:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes that are free in the selected up buffer.
2057:segger/rtt/src/SEGGER_RTT.c **** */
2058:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex) {
 4140              		.loc 1 2058 63 is_stmt 1 view -0
 4141              		.cfi_startproc
 4142              		@ args = 0, pretend = 0, frame = 0
 4143              		@ frame_needed = 0, uses_anonymous_args = 0
 4144              		.loc 1 2058 63 is_stmt 0 view .LVU1206
 4145 0000 08B5     		push	{r3, lr}
 4146              	.LCFI41:
 4147              		.cfi_def_cfa_offset 8
 4148              		.cfi_offset 3, -8
 4149              		.cfi_offset 14, -4
2059:segger/rtt/src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 4150              		.loc 1 2059 3 is_stmt 1 view .LVU1207
2060:segger/rtt/src/SEGGER_RTT.c **** 
2061:segger/rtt/src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 4151              		.loc 1 2061 3 view .LVU1208
 4152              		.loc 1 2061 9 is_stmt 0 view .LVU1209
 4153 0002 0130     		adds	r0, r0, #1
 4154              	.LVL416:
 4155              		.loc 1 2061 9 view .LVU1210
 4156 0004 00EB4000 		add	r0, r0, r0, lsl #1
 4157              	.LVL417:
2062:segger/rtt/src/SEGGER_RTT.c ****   return _GetAvailWriteSpace(pRing);
 4158              		.loc 1 2062 3 is_stmt 1 view .LVU1211
 4159              		.loc 1 2062 10 is_stmt 0 view .LVU1212
 4160 0008 024B     		ldr	r3, .L260
 4161 000a 03EBC000 		add	r0, r3, r0, lsl #3
 4162              	.LVL418:
 4163              		.loc 1 2062 10 view .LVU1213
 4164 000e FFF7FEFF 		bl	_GetAvailWriteSpace
 4165              	.LVL419:
2063:segger/rtt/src/SEGGER_RTT.c **** }
 4166              		.loc 1 2063 1 view .LVU1214
 4167 0012 08BD     		pop	{r3, pc}
 4168              	.L261:
 4169              		.align	2
 4170              	.L260:
 4171 0014 00000000 		.word	_SEGGER_RTT
 4172              		.cfi_endproc
 4173              	.LFE34:
 4175              		.section	.text.SEGGER_RTT_GetBytesInBuffer,"ax",%progbits
 4176              		.align	1
 4177              		.global	SEGGER_RTT_GetBytesInBuffer
 4178              		.syntax unified
 4179              		.thumb
 4180              		.thumb_func
 4182              	SEGGER_RTT_GetBytesInBuffer:
 4183              	.LVL420:
 4184              	.LFB35:
2064:segger/rtt/src/SEGGER_RTT.c **** 
2065:segger/rtt/src/SEGGER_RTT.c **** 
2066:segger/rtt/src/SEGGER_RTT.c **** /*********************************************************************
2067:segger/rtt/src/SEGGER_RTT.c **** *
ARM GAS  /tmp/ccjFarMV.s 			page 116


2068:segger/rtt/src/SEGGER_RTT.c **** *       SEGGER_RTT_GetBytesInBuffer()
2069:segger/rtt/src/SEGGER_RTT.c **** *
2070:segger/rtt/src/SEGGER_RTT.c **** *  Function description
2071:segger/rtt/src/SEGGER_RTT.c **** *    Returns the number of bytes currently used in the up buffer.
2072:segger/rtt/src/SEGGER_RTT.c **** *
2073:segger/rtt/src/SEGGER_RTT.c **** *  Parameters
2074:segger/rtt/src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2075:segger/rtt/src/SEGGER_RTT.c **** *
2076:segger/rtt/src/SEGGER_RTT.c **** *  Return value
2077:segger/rtt/src/SEGGER_RTT.c **** *    Number of bytes that are used in the buffer.
2078:segger/rtt/src/SEGGER_RTT.c **** */
2079:segger/rtt/src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
 4185              		.loc 1 2079 60 is_stmt 1 view -0
 4186              		.cfi_startproc
 4187              		@ args = 0, pretend = 0, frame = 0
 4188              		@ frame_needed = 0, uses_anonymous_args = 0
 4189              		@ link register save eliminated.
2080:segger/rtt/src/SEGGER_RTT.c ****   unsigned RdOff;
 4190              		.loc 1 2080 3 view .LVU1216
2081:segger/rtt/src/SEGGER_RTT.c ****   unsigned WrOff;
 4191              		.loc 1 2081 3 view .LVU1217
2082:segger/rtt/src/SEGGER_RTT.c ****   unsigned r;
 4192              		.loc 1 2082 3 view .LVU1218
2083:segger/rtt/src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 4193              		.loc 1 2083 3 view .LVU1219
2084:segger/rtt/src/SEGGER_RTT.c ****   //
2085:segger/rtt/src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
2086:segger/rtt/src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
2087:segger/rtt/src/SEGGER_RTT.c ****   //
2088:segger/rtt/src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 4194              		.loc 1 2088 3 view .LVU1220
2089:segger/rtt/src/SEGGER_RTT.c ****   RdOff = pRTTCB->aUp[BufferIndex].RdOff;
 4195              		.loc 1 2089 3 view .LVU1221
 4196              		.loc 1 2089 9 is_stmt 0 view .LVU1222
 4197 0000 00EB4002 		add	r2, r0, r0, lsl #1
 4198 0004 084B     		ldr	r3, .L265
 4199 0006 03EBC203 		add	r3, r3, r2, lsl #3
 4200 000a 9A6A     		ldr	r2, [r3, #40]
 4201              	.LVL421:
2090:segger/rtt/src/SEGGER_RTT.c ****   WrOff = pRTTCB->aUp[BufferIndex].WrOff;
 4202              		.loc 1 2090 3 is_stmt 1 view .LVU1223
 4203              		.loc 1 2090 9 is_stmt 0 view .LVU1224
 4204 000c 5B6A     		ldr	r3, [r3, #36]
 4205              	.LVL422:
2091:segger/rtt/src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4206              		.loc 1 2091 3 is_stmt 1 view .LVU1225
 4207              		.loc 1 2091 6 is_stmt 0 view .LVU1226
 4208 000e 9A42     		cmp	r2, r3
 4209 0010 01D8     		bhi	.L263
2092:segger/rtt/src/SEGGER_RTT.c ****     r = WrOff - RdOff;
 4210              		.loc 1 2092 5 is_stmt 1 view .LVU1227
 4211              		.loc 1 2092 7 is_stmt 0 view .LVU1228
 4212 0012 981A     		subs	r0, r3, r2
 4213              	.LVL423:
 4214              		.loc 1 2092 7 view .LVU1229
 4215 0014 7047     		bx	lr
 4216              	.LVL424:
ARM GAS  /tmp/ccjFarMV.s 			page 117


 4217              	.L263:
2093:segger/rtt/src/SEGGER_RTT.c ****   } else {
2094:segger/rtt/src/SEGGER_RTT.c ****     r = pRTTCB->aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
 4218              		.loc 1 2094 5 is_stmt 1 view .LVU1230
 4219              		.loc 1 2094 33 is_stmt 0 view .LVU1231
 4220 0016 00EB4000 		add	r0, r0, r0, lsl #1
 4221              	.LVL425:
 4222              		.loc 1 2094 33 view .LVU1232
 4223 001a 0349     		ldr	r1, .L265
 4224 001c 01EBC001 		add	r1, r1, r0, lsl #3
 4225 0020 086A     		ldr	r0, [r1, #32]
 4226              		.loc 1 2094 47 view .LVU1233
 4227 0022 D21A     		subs	r2, r2, r3
 4228              	.LVL426:
 4229              		.loc 1 2094 7 view .LVU1234
 4230 0024 1044     		add	r0, r0, r2
 4231              	.LVL427:
2095:segger/rtt/src/SEGGER_RTT.c ****   }
2096:segger/rtt/src/SEGGER_RTT.c ****   return r;
 4232              		.loc 1 2096 3 is_stmt 1 view .LVU1235
2097:segger/rtt/src/SEGGER_RTT.c **** }
 4233              		.loc 1 2097 1 is_stmt 0 view .LVU1236
 4234 0026 7047     		bx	lr
 4235              	.L266:
 4236              		.align	2
 4237              	.L265:
 4238 0028 00000000 		.word	_SEGGER_RTT
 4239              		.cfi_endproc
 4240              	.LFE35:
 4242              		.section	.rodata._aInitStr.0,"a"
 4243              		.align	2
 4246              	_aInitStr.0:
 4247 0000 00000000 		.ascii	"\000\000\000\000\000\000TTR REGGES\000"
 4247      00005454 
 4247      52205245 
 4247      47474553 
 4247      00
 4248              		.section	.bss._ActiveTerminal,"aw",%nobits
 4251              	_ActiveTerminal:
 4252 0000 00       		.space	1
 4253              		.section	.bss._acDownBuffer,"aw",%nobits
 4254              		.align	2
 4257              	_acDownBuffer:
 4258 0000 00000000 		.space	16
 4258      00000000 
 4258      00000000 
 4258      00000000 
 4259              		.section	.bss._acUpBuffer,"aw",%nobits
 4260              		.align	2
 4263              	_acUpBuffer:
 4264 0000 00000000 		.space	1024
 4264      00000000 
 4264      00000000 
 4264      00000000 
 4264      00000000 
 4265              		.global	_SEGGER_RTT
 4266              		.section	.bss._SEGGER_RTT,"aw",%nobits
ARM GAS  /tmp/ccjFarMV.s 			page 118


 4267              		.align	2
 4270              	_SEGGER_RTT:
 4271 0000 00000000 		.space	168
 4271      00000000 
 4271      00000000 
 4271      00000000 
 4271      00000000 
 4272              		.section	.rodata._aTerminalId,"a"
 4273              		.align	2
 4276              	_aTerminalId:
 4277 0000 30313233 		.ascii	"0123456789ABCDEF"
 4277      34353637 
 4277      38394142 
 4277      43444546 
 4278              		.text
 4279              	.Letext0:
 4280              		.file 2 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stddef.h"
 4281              		.file 3 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 4282              		.file 4 "segger/rtt/inc/SEGGER_RTT.h"
 4283              		.file 5 "/usr/include/newlib/string.h"
 4284              		.file 6 "<built-in>"
ARM GAS  /tmp/ccjFarMV.s 			page 119


DEFINED SYMBOLS
                            *ABS*:00000000 SEGGER_RTT.c
     /tmp/ccjFarMV.s:21     .text._GetAvailWriteSpace:00000000 $t
     /tmp/ccjFarMV.s:26     .text._GetAvailWriteSpace:00000000 _GetAvailWriteSpace
     /tmp/ccjFarMV.s:79     .text._WriteNoCheck:00000000 $t
     /tmp/ccjFarMV.s:84     .text._WriteNoCheck:00000000 _WriteNoCheck
     /tmp/ccjFarMV.s:201    .text._WriteBlocking:00000000 $t
     /tmp/ccjFarMV.s:206    .text._WriteBlocking:00000000 _WriteBlocking
     /tmp/ccjFarMV.s:359    .text._PostTerminalSwitch:00000000 $t
     /tmp/ccjFarMV.s:364    .text._PostTerminalSwitch:00000000 _PostTerminalSwitch
     /tmp/ccjFarMV.s:406    .text._PostTerminalSwitch:00000020 $d
     /tmp/ccjFarMV.s:4276   .rodata._aTerminalId:00000000 _aTerminalId
     /tmp/ccjFarMV.s:411    .rodata._DoInit.str1.4:00000000 $d
     /tmp/ccjFarMV.s:415    .text._DoInit:00000000 $t
     /tmp/ccjFarMV.s:420    .text._DoInit:00000000 _DoInit
     /tmp/ccjFarMV.s:537    .text._DoInit:00000058 $d
     /tmp/ccjFarMV.s:4270   .bss._SEGGER_RTT:00000000 _SEGGER_RTT
     /tmp/ccjFarMV.s:4263   .bss._acUpBuffer:00000000 _acUpBuffer
     /tmp/ccjFarMV.s:4257   .bss._acDownBuffer:00000000 _acDownBuffer
     /tmp/ccjFarMV.s:4246   .rodata._aInitStr.0:00000000 _aInitStr.0
     /tmp/ccjFarMV.s:546    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 $t
     /tmp/ccjFarMV.s:552    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 SEGGER_RTT_ReadUpBufferNoLock
     /tmp/ccjFarMV.s:748    .text.SEGGER_RTT_ReadUpBufferNoLock:000000a8 $d
     /tmp/ccjFarMV.s:753    .text.SEGGER_RTT_ReadNoLock:00000000 $t
     /tmp/ccjFarMV.s:759    .text.SEGGER_RTT_ReadNoLock:00000000 SEGGER_RTT_ReadNoLock
     /tmp/ccjFarMV.s:952    .text.SEGGER_RTT_ReadNoLock:000000a0 $d
     /tmp/ccjFarMV.s:957    .text.SEGGER_RTT_ReadUpBuffer:00000000 $t
     /tmp/ccjFarMV.s:963    .text.SEGGER_RTT_ReadUpBuffer:00000000 SEGGER_RTT_ReadUpBuffer
     /tmp/ccjFarMV.s:1015   .text.SEGGER_RTT_Read:00000000 $t
     /tmp/ccjFarMV.s:1021   .text.SEGGER_RTT_Read:00000000 SEGGER_RTT_Read
     /tmp/ccjFarMV.s:1073   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 $t
     /tmp/ccjFarMV.s:1079   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 SEGGER_RTT_WriteWithOverwriteNoLock
     /tmp/ccjFarMV.s:1334   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000110 $d
     /tmp/ccjFarMV.s:1339   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 $t
     /tmp/ccjFarMV.s:1345   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 SEGGER_RTT_WriteDownBufferNoLock
     /tmp/ccjFarMV.s:1461   .text.SEGGER_RTT_WriteDownBufferNoLock:00000060 $d
     /tmp/ccjFarMV.s:1466   .text.SEGGER_RTT_WriteNoLock:00000000 $t
     /tmp/ccjFarMV.s:1472   .text.SEGGER_RTT_WriteNoLock:00000000 SEGGER_RTT_WriteNoLock
     /tmp/ccjFarMV.s:1589   .text.SEGGER_RTT_WriteNoLock:00000068 $d
     /tmp/ccjFarMV.s:1594   .text.SEGGER_RTT_WriteDownBuffer:00000000 $t
     /tmp/ccjFarMV.s:1600   .text.SEGGER_RTT_WriteDownBuffer:00000000 SEGGER_RTT_WriteDownBuffer
     /tmp/ccjFarMV.s:1682   .text.SEGGER_RTT_WriteDownBuffer:00000034 $d
     /tmp/ccjFarMV.s:1688   .text.SEGGER_RTT_Write:00000000 $t
     /tmp/ccjFarMV.s:1694   .text.SEGGER_RTT_Write:00000000 SEGGER_RTT_Write
     /tmp/ccjFarMV.s:1776   .text.SEGGER_RTT_Write:00000034 $d
     /tmp/ccjFarMV.s:1782   .text.SEGGER_RTT_WriteString:00000000 $t
     /tmp/ccjFarMV.s:1788   .text.SEGGER_RTT_WriteString:00000000 SEGGER_RTT_WriteString
     /tmp/ccjFarMV.s:1831   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 $t
     /tmp/ccjFarMV.s:1837   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 SEGGER_RTT_PutCharSkipNoLock
     /tmp/ccjFarMV.s:1941   .text.SEGGER_RTT_PutCharSkipNoLock:00000050 $d
     /tmp/ccjFarMV.s:1946   .text.SEGGER_RTT_PutCharSkip:00000000 $t
     /tmp/ccjFarMV.s:1952   .text.SEGGER_RTT_PutCharSkip:00000000 SEGGER_RTT_PutCharSkip
     /tmp/ccjFarMV.s:2102   .text.SEGGER_RTT_PutCharSkip:00000074 $d
     /tmp/ccjFarMV.s:2108   .text.SEGGER_RTT_PutChar:00000000 $t
     /tmp/ccjFarMV.s:2114   .text.SEGGER_RTT_PutChar:00000000 SEGGER_RTT_PutChar
     /tmp/ccjFarMV.s:2289   .text.SEGGER_RTT_PutChar:00000098 $d
     /tmp/ccjFarMV.s:2295   .text.SEGGER_RTT_GetKey:00000000 $t
ARM GAS  /tmp/ccjFarMV.s 			page 120


     /tmp/ccjFarMV.s:2301   .text.SEGGER_RTT_GetKey:00000000 SEGGER_RTT_GetKey
     /tmp/ccjFarMV.s:2353   .text.SEGGER_RTT_WaitKey:00000000 $t
     /tmp/ccjFarMV.s:2359   .text.SEGGER_RTT_WaitKey:00000000 SEGGER_RTT_WaitKey
     /tmp/ccjFarMV.s:2388   .text.SEGGER_RTT_HasKey:00000000 $t
     /tmp/ccjFarMV.s:2394   .text.SEGGER_RTT_HasKey:00000000 SEGGER_RTT_HasKey
     /tmp/ccjFarMV.s:2460   .text.SEGGER_RTT_HasKey:00000024 $d
     /tmp/ccjFarMV.s:2465   .text.SEGGER_RTT_HasData:00000000 $t
     /tmp/ccjFarMV.s:2471   .text.SEGGER_RTT_HasData:00000000 SEGGER_RTT_HasData
     /tmp/ccjFarMV.s:2502   .text.SEGGER_RTT_HasData:0000001c $d
     /tmp/ccjFarMV.s:2507   .text.SEGGER_RTT_HasDataUp:00000000 $t
     /tmp/ccjFarMV.s:2513   .text.SEGGER_RTT_HasDataUp:00000000 SEGGER_RTT_HasDataUp
     /tmp/ccjFarMV.s:2544   .text.SEGGER_RTT_HasDataUp:0000001c $d
     /tmp/ccjFarMV.s:2549   .text.SEGGER_RTT_AllocDownBuffer:00000000 $t
     /tmp/ccjFarMV.s:2555   .text.SEGGER_RTT_AllocDownBuffer:00000000 SEGGER_RTT_AllocDownBuffer
     /tmp/ccjFarMV.s:2710   .text.SEGGER_RTT_AllocDownBuffer:00000078 $d
     /tmp/ccjFarMV.s:2716   .text.SEGGER_RTT_AllocUpBuffer:00000000 $t
     /tmp/ccjFarMV.s:2722   .text.SEGGER_RTT_AllocUpBuffer:00000000 SEGGER_RTT_AllocUpBuffer
     /tmp/ccjFarMV.s:2884   .text.SEGGER_RTT_AllocUpBuffer:0000008c $d
     /tmp/ccjFarMV.s:2890   .text.SEGGER_RTT_ConfigUpBuffer:00000000 $t
     /tmp/ccjFarMV.s:2896   .text.SEGGER_RTT_ConfigUpBuffer:00000000 SEGGER_RTT_ConfigUpBuffer
     /tmp/ccjFarMV.s:3036   .text.SEGGER_RTT_ConfigUpBuffer:00000070 $d
     /tmp/ccjFarMV.s:3041   .text.SEGGER_RTT_ConfigDownBuffer:00000000 $t
     /tmp/ccjFarMV.s:3047   .text.SEGGER_RTT_ConfigDownBuffer:00000000 SEGGER_RTT_ConfigDownBuffer
     /tmp/ccjFarMV.s:3188   .text.SEGGER_RTT_ConfigDownBuffer:00000064 $d
     /tmp/ccjFarMV.s:3193   .text.SEGGER_RTT_SetNameUpBuffer:00000000 $t
     /tmp/ccjFarMV.s:3199   .text.SEGGER_RTT_SetNameUpBuffer:00000000 SEGGER_RTT_SetNameUpBuffer
     /tmp/ccjFarMV.s:3305   .text.SEGGER_RTT_SetNameUpBuffer:00000040 $d
     /tmp/ccjFarMV.s:3310   .text.SEGGER_RTT_SetNameDownBuffer:00000000 $t
     /tmp/ccjFarMV.s:3316   .text.SEGGER_RTT_SetNameDownBuffer:00000000 SEGGER_RTT_SetNameDownBuffer
     /tmp/ccjFarMV.s:3419   .text.SEGGER_RTT_SetNameDownBuffer:00000040 $d
     /tmp/ccjFarMV.s:3424   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 $t
     /tmp/ccjFarMV.s:3430   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 SEGGER_RTT_SetFlagsUpBuffer
     /tmp/ccjFarMV.s:3533   .text.SEGGER_RTT_SetFlagsUpBuffer:00000040 $d
     /tmp/ccjFarMV.s:3538   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 $t
     /tmp/ccjFarMV.s:3544   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 SEGGER_RTT_SetFlagsDownBuffer
     /tmp/ccjFarMV.s:3647   .text.SEGGER_RTT_SetFlagsDownBuffer:00000040 $d
     /tmp/ccjFarMV.s:3652   .text.SEGGER_RTT_Init:00000000 $t
     /tmp/ccjFarMV.s:3658   .text.SEGGER_RTT_Init:00000000 SEGGER_RTT_Init
     /tmp/ccjFarMV.s:3678   .text.SEGGER_RTT_SetTerminal:00000000 $t
     /tmp/ccjFarMV.s:3684   .text.SEGGER_RTT_SetTerminal:00000000 SEGGER_RTT_SetTerminal
     /tmp/ccjFarMV.s:3862   .text.SEGGER_RTT_SetTerminal:00000080 $d
     /tmp/ccjFarMV.s:4251   .bss._ActiveTerminal:00000000 _ActiveTerminal
     /tmp/ccjFarMV.s:3870   .text.SEGGER_RTT_TerminalOut:00000000 $t
     /tmp/ccjFarMV.s:3876   .text.SEGGER_RTT_TerminalOut:00000000 SEGGER_RTT_TerminalOut
     /tmp/ccjFarMV.s:4124   .text.SEGGER_RTT_TerminalOut:000000e4 $d
     /tmp/ccjFarMV.s:4131   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 $t
     /tmp/ccjFarMV.s:4137   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 SEGGER_RTT_GetAvailWriteSpace
     /tmp/ccjFarMV.s:4171   .text.SEGGER_RTT_GetAvailWriteSpace:00000014 $d
     /tmp/ccjFarMV.s:4176   .text.SEGGER_RTT_GetBytesInBuffer:00000000 $t
     /tmp/ccjFarMV.s:4182   .text.SEGGER_RTT_GetBytesInBuffer:00000000 SEGGER_RTT_GetBytesInBuffer
     /tmp/ccjFarMV.s:4238   .text.SEGGER_RTT_GetBytesInBuffer:00000028 $d
     /tmp/ccjFarMV.s:4243   .rodata._aInitStr.0:00000000 $d
     /tmp/ccjFarMV.s:4252   .bss._ActiveTerminal:00000000 $d
     /tmp/ccjFarMV.s:4254   .bss._acDownBuffer:00000000 $d
     /tmp/ccjFarMV.s:4260   .bss._acUpBuffer:00000000 $d
     /tmp/ccjFarMV.s:4267   .bss._SEGGER_RTT:00000000 $d
     /tmp/ccjFarMV.s:4273   .rodata._aTerminalId:00000000 $d
ARM GAS  /tmp/ccjFarMV.s 			page 121



UNDEFINED SYMBOLS
memcpy
memset
strlen
