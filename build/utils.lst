ARM GAS  /tmp/ccgi4K3S.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"utils.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "App/utils/src/utils.c"
  20              		.section	.rodata.utils_printLog.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 25730A00 		.ascii	"%s\012\000"
  24              		.section	.text.utils_printLog,"ax",%progbits
  25              		.align	1
  26              		.global	utils_printLog
  27              		.syntax unified
  28              		.thumb
  29              		.thumb_func
  31              	utils_printLog:
  32              	.LVL0:
  33              	.LFB134:
   1:App/utils/src/utils.c **** /* Includes ------------------------------------------------------------------*/
   2:App/utils/src/utils.c **** #include "stm32f4xx_hal.h"
   3:App/utils/src/utils.c **** #include "SEGGER_RTT.h"
   4:App/utils/src/utils.c **** 
   5:App/utils/src/utils.c **** /* Defines -------------------------------------------------------------------*/
   6:App/utils/src/utils.c **** 
   7:App/utils/src/utils.c **** /* Private Typedef -----------------------------------------------------------*/
   8:App/utils/src/utils.c **** 
   9:App/utils/src/utils.c **** /* Private Variable Declaration ----------------------------------------------*/
  10:App/utils/src/utils.c **** 
  11:App/utils/src/utils.c **** /* Private Function Declaration ----------------------------------------------*/
  12:App/utils/src/utils.c **** 
  13:App/utils/src/utils.c **** /* Public Function Defnition -------------------------------------------------*/
  14:App/utils/src/utils.c **** 
  15:App/utils/src/utils.c **** void utils_printLog(char* message)
  16:App/utils/src/utils.c **** {
  34              		.loc 1 16 1 view -0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 0, uses_anonymous_args = 0
  38              		.loc 1 16 1 is_stmt 0 view .LVU1
  39 0000 08B5     		push	{r3, lr}
  40              	.LCFI0:
  41              		.cfi_def_cfa_offset 8
  42              		.cfi_offset 3, -8
ARM GAS  /tmp/ccgi4K3S.s 			page 2


  43              		.cfi_offset 14, -4
  44 0002 0246     		mov	r2, r0
  17:App/utils/src/utils.c ****   SEGGER_RTT_printf(0, "%s\n", message);
  45              		.loc 1 17 3 is_stmt 1 view .LVU2
  46 0004 0249     		ldr	r1, .L3
  47 0006 0020     		movs	r0, #0
  48              	.LVL1:
  49              		.loc 1 17 3 is_stmt 0 view .LVU3
  50 0008 FFF7FEFF 		bl	SEGGER_RTT_printf
  51              	.LVL2:
  18:App/utils/src/utils.c **** }
  52              		.loc 1 18 1 view .LVU4
  53 000c 08BD     		pop	{r3, pc}
  54              	.L4:
  55 000e 00BF     		.align	2
  56              	.L3:
  57 0010 00000000 		.word	.LC0
  58              		.cfi_endproc
  59              	.LFE134:
  61              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
  62              		.align	2
  63              	.LC1:
  64 0000 4572726F 		.ascii	"Error\000"
  64      7200
  65              		.section	.text.Error_Handler,"ax",%progbits
  66              		.align	1
  67              		.global	Error_Handler
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  72              	Error_Handler:
  73              	.LFB135:
  19:App/utils/src/utils.c **** 
  20:App/utils/src/utils.c **** /**
  21:App/utils/src/utils.c ****   * @brief  This function is executed in case of error occurrence.
  22:App/utils/src/utils.c ****   * @retval None
  23:App/utils/src/utils.c ****   */
  24:App/utils/src/utils.c **** void Error_Handler(void)
  25:App/utils/src/utils.c **** {
  74              		.loc 1 25 1 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ Volatile: function does not return.
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79 0000 08B5     		push	{r3, lr}
  80              	.LCFI1:
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 3, -8
  83              		.cfi_offset 14, -4
  26:App/utils/src/utils.c ****   utils_printLog("Error");
  84              		.loc 1 26 3 view .LVU6
  85 0002 0248     		ldr	r0, .L8
  86 0004 FFF7FEFF 		bl	utils_printLog
  87              	.LVL3:
  27:App/utils/src/utils.c ****   __disable_irq();
  88              		.loc 1 27 3 view .LVU7
  89              	.LBB4:
ARM GAS  /tmp/ccgi4K3S.s 			page 3


  90              	.LBI4:
  91              		.file 2 "STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
ARM GAS  /tmp/ccgi4K3S.s 			page 4


  56:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccgi4K3S.s 			page 5


 113:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
ARM GAS  /tmp/ccgi4K3S.s 			page 6


 170:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
ARM GAS  /tmp/ccgi4K3S.s 			page 7


 227:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccgi4K3S.s 			page 8


 284:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
ARM GAS  /tmp/ccgi4K3S.s 			page 9


 341:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccgi4K3S.s 			page 10


 398:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
ARM GAS  /tmp/ccgi4K3S.s 			page 11


 455:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccgi4K3S.s 			page 12


 512:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccgi4K3S.s 			page 13


 569:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
ARM GAS  /tmp/ccgi4K3S.s 			page 14


 626:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccgi4K3S.s 			page 15


 683:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
ARM GAS  /tmp/ccgi4K3S.s 			page 16


 740:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
ARM GAS  /tmp/ccgi4K3S.s 			page 17


 797:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
ARM GAS  /tmp/ccgi4K3S.s 			page 18


 854:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccgi4K3S.s 			page 19


 911:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
  92              		.loc 2 960 27 view .LVU8
  93              	.LBB5:
 961:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  94              		.loc 2 962 3 view .LVU9
  95              		.syntax unified
  96              	@ 962 "STM32F411/Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/ccgi4K3S.s 			page 20


  97 0008 72B6     		cpsid i
  98              	@ 0 "" 2
  99              		.thumb
 100              		.syntax unified
 101              	.L6:
 102              	.LBE5:
 103              	.LBE4:
  28:App/utils/src/utils.c ****   while (1)
 104              		.loc 1 28 3 view .LVU10
  29:App/utils/src/utils.c ****   {
  30:App/utils/src/utils.c ****   }
 105              		.loc 1 30 3 view .LVU11
  28:App/utils/src/utils.c ****   while (1)
 106              		.loc 1 28 9 view .LVU12
 107 000a FEE7     		b	.L6
 108              	.L9:
 109              		.align	2
 110              	.L8:
 111 000c 00000000 		.word	.LC1
 112              		.cfi_endproc
 113              	.LFE135:
 115              		.text
 116              	.Letext0:
 117              		.file 3 "segger/rtt/inc/SEGGER_RTT.h"
ARM GAS  /tmp/ccgi4K3S.s 			page 21


DEFINED SYMBOLS
                            *ABS*:00000000 utils.c
     /tmp/ccgi4K3S.s:21     .rodata.utils_printLog.str1.4:00000000 $d
     /tmp/ccgi4K3S.s:25     .text.utils_printLog:00000000 $t
     /tmp/ccgi4K3S.s:31     .text.utils_printLog:00000000 utils_printLog
     /tmp/ccgi4K3S.s:57     .text.utils_printLog:00000010 $d
     /tmp/ccgi4K3S.s:62     .rodata.Error_Handler.str1.4:00000000 $d
     /tmp/ccgi4K3S.s:66     .text.Error_Handler:00000000 $t
     /tmp/ccgi4K3S.s:72     .text.Error_Handler:00000000 Error_Handler
     /tmp/ccgi4K3S.s:111    .text.Error_Handler:0000000c $d

UNDEFINED SYMBOLS
SEGGER_RTT_printf
